<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibGit2Sharp</name>
    </assembly>
    <members>
        <member name="T:LibGit2Sharp.AfterRebaseStepInfo">
            <summary>
            Information about a rebase step that was just completed.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.AfterRebaseStepInfo.#ctor">
            <summary>
            Needed for mocking.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.AfterRebaseStepInfo.#ctor(LibGit2Sharp.RebaseStepInfo,System.Int64,System.Int64)">
            <summary>
            Constructor to call when the patch has already been applied for this step.
            </summary>
            <param name="stepInfo"></param>
            <param name="completedStepIndex"/>
            <param name="totalStepCount"></param>
        </member>
        <member name="P:LibGit2Sharp.AfterRebaseStepInfo.StepInfo">
            <summary>
            The info on the completed step.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.AfterRebaseStepInfo.Commit">
            <summary>
            The commit generated by the step, if any.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.AfterRebaseStepInfo.WasPatchAlreadyApplied">
            <summary>
            Was the changes for this step already applied. If so,
            <see cref="P:LibGit2Sharp.AfterRebaseStepInfo.Commit"/> will be null.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.AfterRebaseStepInfo.CompletedStepIndex">
            <summary>
            The index of the step that was just completed.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.AfterRebaseStepInfo.TotalStepCount">
            <summary>
            The total number of steps in the rebase operation.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.AmbiguousSpecificationException">
            <summary>
            The exception that is thrown when the provided specification cannot uniquely identify a reference, an object or a path.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.AmbiguousSpecificationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.AmbiguousSpecificationException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.AmbiguousSpecificationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.AmbiguousSpecificationException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.AmbiguousSpecificationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.AmbiguousSpecificationException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.AmbiguousSpecificationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.AmbiguousSpecificationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.AmbiguousSpecificationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.AmbiguousSpecificationException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.ArchiverBase">
            <summary>
            The archiving method needs to be passed an inheritor of this class, which will then be used
            to provide low-level archiving facilities (tar, zip, ...).
            <para>
              <see cref="M:LibGit2Sharp.ObjectDatabase.Archive(LibGit2Sharp.Commit,LibGit2Sharp.ArchiverBase)"/>
            </para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ArchiverBase.BeforeArchiving(LibGit2Sharp.Tree,LibGit2Sharp.ObjectId,System.DateTimeOffset)">
            <summary>
            Override this method to perform operations before the archiving of each entry of the tree takes place.
            </summary>
            <param name="tree">The tree that will be archived</param>
            <param name="oid">The ObjectId of the commit being archived, or null if there is no commit.</param>
            <param name="modificationTime">The modification time that will be used for the files in the archive.</param>
        </member>
        <member name="M:LibGit2Sharp.ArchiverBase.AfterArchiving(LibGit2Sharp.Tree,LibGit2Sharp.ObjectId,System.DateTimeOffset)">
            <summary>
            Override this method to perform operations after the archiving of each entry of the tree took place.
            </summary>
            <param name="tree">The tree that was archived</param>
            <param name="oid">The ObjectId of the commit being archived, or null if there is no commit.</param>
            <param name="modificationTime">The modification time that was used for the files in the archive.</param>
        </member>
        <member name="M:LibGit2Sharp.ArchiverBase.AddTreeEntry(System.String,LibGit2Sharp.TreeEntry,System.DateTimeOffset)">
            <summary>
            Implements the archiving of a TreeEntry in a given format.
            </summary>
            <param name="path">The path of the entry in the archive.</param>
            <param name="entry">The entry to archive.</param>
            <param name="modificationTime">The datetime the entry was last modified.</param>
        </member>
        <member name="T:LibGit2Sharp.BareRepositoryException">
            <summary>
            The exception that is thrown when an operation which requires a
            working directory is performed against a bare repository.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BareRepositoryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.BareRepositoryException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BareRepositoryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.BareRepositoryException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.BareRepositoryException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.BareRepositoryException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.BareRepositoryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.BareRepositoryException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.BareRepositoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.BareRepositoryException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.BeforeRebaseStepInfo">
            <summary>
            Information about a rebase step that is about to be performed.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BeforeRebaseStepInfo.#ctor">
            <summary>
            Needed for mocking.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BeforeRebaseStepInfo.StepInfo">
            <summary>
            Information on the step that is about to be performed.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BeforeRebaseStepInfo.StepIndex">
            <summary>
            The index of the step that is to be run.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BeforeRebaseStepInfo.TotalStepCount">
            <summary>
            The total number of steps in the rebase operation.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.BlameHunkCollection">
            <summary>
            The result of a blame operation.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BlameHunkCollection.#ctor">
            <summary>
            For easy mocking
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BlameHunkCollection.Item(System.Int32)">
            <summary>
            Access blame hunks by index.
            </summary>
            <param name="idx">The index of the hunk to retrieve</param>
            <returns>The <see cref="T:LibGit2Sharp.BlameHunk"/> at the given index.</returns>
        </member>
        <member name="M:LibGit2Sharp.BlameHunkCollection.HunkForLine(System.Int32)">
            <summary>
            Access blame hunks by the file line.
            </summary>
            <param name="line">Line number to search for</param>
            <returns>The <see cref="T:LibGit2Sharp.BlameHunk"/> that contains the specified file line.</returns>
        </member>
        <member name="M:LibGit2Sharp.BlameHunkCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:LibGit2Sharp.BlameHunk">
            <summary>
            A contiguous group of lines that have been traced to a single commit.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BlameHunk.#ctor">
            <summary>
            For easier mocking
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BlameHunk.ContainsLine(System.Int32)">
            <summary>
            Determine if this hunk contains a given line.
            </summary>
            <param name="line">Line number to test</param>
            <returns>True if this hunk contains the given line.</returns>
        </member>
        <member name="P:LibGit2Sharp.BlameHunk.LineCount">
            <summary>
            Number of lines in this hunk.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BlameHunk.FinalStartLineNumber">
            <summary>
            The line number where this hunk begins, as of <see cref="P:LibGit2Sharp.BlameHunk.FinalCommit"/>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BlameHunk.FinalSignature">
            <summary>
            Signature of the most recent change to this hunk.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BlameHunk.FinalCommit">
            <summary>
            Commit which most recently changed this file.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BlameHunk.InitialStartLineNumber">
            <summary>
            Line number where this hunk begins, as of <see cref="P:LibGit2Sharp.BlameHunk.FinalCommit"/>, in <see cref="P:LibGit2Sharp.BlameHunk.InitialPath"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BlameHunk.InitialSignature">
            <summary>
            Signature of the oldest-traced change to this hunk.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BlameHunk.InitialCommit">
            <summary>
            Commit to which the oldest change to this hunk has been traced.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BlameHunk.InitialPath">
            <summary>
            Path to the file where this hunk originated, as of <see cref="P:LibGit2Sharp.BlameHunk.InitialCommit"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BlameHunk.Equals(LibGit2Sharp.BlameHunk)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:LibGit2Sharp.BlameHunk.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.BlameHunk"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.BlameHunk"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.BlameHunk"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.BlameHunk.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.BlameHunk.op_Equality(LibGit2Sharp.BlameHunk,LibGit2Sharp.BlameHunk)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.BlameHunk"/>s are equal.
            </summary>
            <param name="left">First hunk to compare.</param>
            <param name="right">Second hunk to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.BlameHunk.op_Inequality(LibGit2Sharp.BlameHunk,LibGit2Sharp.BlameHunk)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.BlameHunk"/>s are unequal.
            </summary>
            <param name="left">First hunk to compare.</param>
            <param name="right">Second hunk to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.BlameStrategy">
            <summary>
            Strategy used for blaming.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.BlameStrategy.Default">
            <summary>
            Track renames of the file, but no block movement.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.BlameOptions">
            <summary>
            Optional adjustments to the behavior of blame.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BlameOptions.Strategy">
            <summary>
            Strategy to use to determine the blame for each line.
            The default is <see cref="F:LibGit2Sharp.BlameStrategy.Default"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BlameOptions.StartingAt">
            <summary>
            Latest commitish to consider (the starting point).
            If null, blame will use HEAD.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BlameOptions.StoppingAt">
            <summary>
            Oldest commitish to consider (the stopping point).
            If null, blame will continue until all the lines have been blamed,
            or until a commit with no parents is reached.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BlameOptions.MinLine">
            <summary>
            First text line in the file to blame (lines start at 1).
            If this is set to 0, the blame begins at line 1.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BlameOptions.MaxLine">
            <summary>
            Last text line in the file to blame (lines start at 1).
            If this is set to 0, blame ends with the last line in the file.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Blob">
            <summary>
            Stores the binary content of a tracked file.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Blob.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Blob.Size">
            <summary>
            Gets the size in bytes of the raw content of a blob.
            <para> Please note that this would load entire blob content in the memory to compute the Size.
            In order to read blob size from header, Repository.ObjectDatabase.RetrieveObjectMetadata(Blob.Id).Size
            can be used.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Blob.IsBinary">
            <summary>
             Determine if the blob content is most certainly binary or not.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Blob.GetContentStream">
            <summary>
            Gets the blob content in a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Blob.GetContentStream(LibGit2Sharp.FilteringOptions)">
            <summary>
            Gets the blob content in a <see cref="T:System.IO.Stream"/> as it would be
            checked out to the working directory.
            <param name="filteringOptions">Parameter controlling content filtering behavior</param>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Blob.GetContentText">
            <summary>
            Gets the blob content, decoded with UTF8 encoding if the encoding cannot be detected from the byte order mark
            </summary>
            <returns>Blob content as text.</returns>
        </member>
        <member name="M:LibGit2Sharp.Blob.GetContentText(System.Text.Encoding)">
            <summary>
            Gets the blob content decoded with the specified encoding,
            or according to byte order marks, or the specified encoding as a fallback
            </summary>
            <param name="encoding">The encoding of the text to use, if it cannot be detected</param>
            <returns>Blob content as text.</returns>
        </member>
        <member name="M:LibGit2Sharp.Blob.GetContentText(LibGit2Sharp.FilteringOptions)">
            <summary>
            Gets the blob content, decoded with UTF8 encoding if the encoding cannot be detected
            </summary>
            <param name="filteringOptions">Parameter controlling content filtering behavior</param>
            <returns>Blob content as text.</returns>
        </member>
        <member name="M:LibGit2Sharp.Blob.GetContentText(LibGit2Sharp.FilteringOptions,System.Text.Encoding)">
            <summary>
            Gets the blob content as it would be checked out to the
            working directory, decoded with the specified encoding,
            or according to byte order marks, with UTF8 as fallback,
            if <paramref name="encoding"/> is null.
            </summary>
            <param name="filteringOptions">Parameter controlling content filtering behavior</param>
            <param name="encoding">The encoding of the text. (default: detected or UTF8)</param>
            <returns>Blob content as text.</returns>
        </member>
        <member name="T:LibGit2Sharp.Branch">
            <summary>
            A branch is a special kind of reference
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Branch.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Branch.#ctor(LibGit2Sharp.Repository,LibGit2Sharp.Reference,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.Branch"/> class.
            </summary>
            <param name="repo">The repo.</param>
            <param name="reference">The reference.</param>
            <param name="canonicalName">The full name of the reference</param>
        </member>
        <member name="M:LibGit2Sharp.Branch.#ctor(LibGit2Sharp.Repository,LibGit2Sharp.Reference)">
            <summary>
            Initializes a new instance of an orphaned <see cref="T:LibGit2Sharp.Branch"/> class.
            <para>
              This <see cref="T:LibGit2Sharp.Branch"/> instance will point to no commit.
            </para>
            </summary>
            <param name="repo">The repo.</param>
            <param name="reference">The reference.</param>
        </member>
        <member name="P:LibGit2Sharp.Branch.Item(System.String)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.TreeEntry"/> pointed at by the <paramref name="relativePath"/> in the <see cref="P:LibGit2Sharp.Branch.Tip"/>.
            </summary>
            <param name="relativePath">The relative path to the <see cref="T:LibGit2Sharp.TreeEntry"/> from the <see cref="P:LibGit2Sharp.Branch.Tip"/> working directory.</param>
            <returns><c>null</c> if nothing has been found, the <see cref="T:LibGit2Sharp.TreeEntry"/> otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.Branch.IsRemote">
            <summary>
            Gets a value indicating whether this instance is a remote.
            </summary>
            <value>
            <c>true</c> if this instance is remote; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LibGit2Sharp.Branch.TrackedBranch">
            <summary>
            Gets the remote branch which is connected to this local one, or null if there is none.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Branch.IsTracking">
            <summary>
            Determines if this local branch is connected to a remote one.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Branch.TrackingDetails">
            <summary>
            Gets additional information about the tracked branch.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Branch.IsCurrentRepositoryHead">
            <summary>
            Gets a value indicating whether this instance is current branch (HEAD) in the repository.
            </summary>
            <value>
            <c>true</c> if this instance is the current branch; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LibGit2Sharp.Branch.Tip">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Commit"/> that this branch points to.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Branch.Commits">
            <summary>
            Gets the commits on this branch. (Starts walking from the References's target).
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Branch.UpstreamBranchCanonicalName">
            <summary>
            Gets the configured canonical name of the upstream branch.
            <para>
              This is the upstream reference to which this branch will be pushed.
              It corresponds to the "branch.branch_name.merge" property of the config file.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Branch.RemoteName">
            <summary>
            Get the name of the remote for the branch.
            <para>
              If this is a local branch, this will return the configured
              <see cref="P:LibGit2Sharp.Branch.Remote"/> to fetch from and push to. If this is a
              remote-tracking branch, this will return the name of the remote 
              containing the tracked branch. If there no tracking information 
              this will return null.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Branch.Remote">
            <summary>
            Get the remote for the branch.
            <para>
              If this is a local branch, this will return the configured
              <see cref="P:LibGit2Sharp.Branch.Remote"/> to fetch from and push to. If this is a
              remote-tracking branch, this will return the remote containing
              the tracked branch.
            </para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Branch.Shorten">
            <summary>
            Removes redundent leading namespaces (regarding the kind of
            reference being wrapped) from the canonical name.
            </summary>
            <returns>The friendly shortened name</returns>
        </member>
        <member name="T:LibGit2Sharp.BranchCollection">
            <summary>
            The collection of Branches in a <see cref="T:LibGit2Sharp.Repository"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.#ctor(LibGit2Sharp.Repository)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.BranchCollection"/> class.
            </summary>
            <param name="repo">The repo.</param>
        </member>
        <member name="P:LibGit2Sharp.BranchCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Branch"/> with the specified name.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Add(System.String,System.String)">
            <summary>
            Create a new local branch with the specified name
            </summary>
            <param name="name">The name of the branch.</param>
            <param name="committish">Revparse spec for the target commit.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Branch"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Add(System.String,LibGit2Sharp.Commit)">
            <summary>
            Create a new local branch with the specified name
            </summary>
            <param name="name">The name of the branch.</param>
            <param name="commit">The target commit.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Branch"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Add(System.String,LibGit2Sharp.Commit,System.Boolean)">
            <summary>
            Create a new local branch with the specified name
            </summary>
            <param name="name">The name of the branch.</param>
            <param name="commit">The target commit.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing branch, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Branch"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Add(System.String,System.String,System.Boolean)">
            <summary>
            Create a new local branch with the specified name
            </summary>
            <param name="name">The name of the branch.</param>
            <param name="committish">Revparse spec for the target commit.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing branch, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Branch"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Remove(System.String)">
            <summary>
            Deletes the branch with the specified name.
            </summary>
            <param name="name">The name of the branch to delete.</param>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Remove(System.String,System.Boolean)">
            <summary>
            Deletes the branch with the specified name.
            </summary>
            <param name="name">The name of the branch to delete.</param>
            <param name="isRemote">True if the provided <paramref name="name"/> is the name of a remote branch, false otherwise.</param>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Remove(LibGit2Sharp.Branch)">
            <summary>
            Deletes the specified branch.
            </summary>
            <param name="branch">The branch to delete.</param>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Rename(System.String,System.String)">
            <summary>
            Rename an existing local branch, using the default reflog message
            </summary>
            <param name="currentName">The current branch name.</param>
            <param name="newName">The new name the existing branch should bear.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Branch"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Rename(System.String,System.String,System.Boolean)">
            <summary>
            Rename an existing local branch, using the default reflog message
            </summary>
            <param name="currentName">The current branch name.</param>
            <param name="newName">The new name the existing branch should bear.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing branch, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Branch"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Rename(LibGit2Sharp.Branch,System.String)">
            <summary>
            Rename an existing local branch
            </summary>
            <param name="branch">The current local branch.</param>
            <param name="newName">The new name the existing branch should bear.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Branch"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Rename(LibGit2Sharp.Branch,System.String,System.Boolean)">
            <summary>
            Rename an existing local branch
            </summary>
            <param name="branch">The current local branch.</param>
            <param name="newName">The new name the existing branch should bear.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing branch, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Branch"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Update(LibGit2Sharp.Branch,System.Action{LibGit2Sharp.BranchUpdater}[])">
            <summary>
            Update properties of a branch.
            </summary>
            <param name="branch">The branch to update.</param>
            <param name="actions">Delegate to perform updates on the branch.</param>
            <returns>The updated branch.</returns>
        </member>
        <member name="T:LibGit2Sharp.BranchTrackingDetails">
            <summary>
            Tracking information for a <see cref="T:LibGit2Sharp.Branch"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BranchTrackingDetails.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BranchTrackingDetails.AheadBy">
            <summary>
            Gets the number of commits that exist in this local branch but don't exist in the tracked one.
            <para>
              This property will return <c>null</c> if this local branch has no upstream configuration
              or if the upstream branch does not exist
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BranchTrackingDetails.BehindBy">
            <summary>
            Gets the number of commits that exist in the tracked branch but don't exist in this local one.
            <para>
              This property will return <c>null</c> if this local branch has no upstream configuration
              or if the upstream branch does not exist
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BranchTrackingDetails.CommonAncestor">
            <summary>
            Gets the common ancestor of the local branch and its tracked remote branch.
            <para>
              This property will return <c>null</c> if this local branch has no upstream configuration,
              the upstream branch does not exist, or either branch is an orphan.
            </para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.BranchUpdater">
            <summary>
            Exposes properties of a branch that can be updated.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BranchUpdater.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BranchUpdater.TrackedBranch">
            <summary>
            Sets the upstream information for the branch.
            <para>
              Passing null or string.Empty will unset the upstream.
            </para>
            <para>
              The upstream branch name is with respect to the current repository.
              So, passing "refs/remotes/origin/master" will set the current branch
              to track "refs/heads/master" on the origin. Passing in
              "refs/heads/master" will result in the branch tracking the local
              master branch.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BranchUpdater.UpstreamBranch">
            <summary>
            Set the upstream branch for this branch.
            <para>
              To track the "master" branch on the "origin" remote, set the
              <see cref="P:LibGit2Sharp.BranchUpdater.Remote"/> property to "origin" and the <see cref="P:LibGit2Sharp.BranchUpdater.UpstreamBranch"/>
              property to "refs/heads/master".
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.BranchUpdater.Remote">
            <summary>
            Set the upstream remote for this branch.
            <para>
              To track the "master" branch on the "origin" remote, set the
              <see cref="P:LibGit2Sharp.BranchUpdater.Remote"/> property to "origin" and the <see cref="P:LibGit2Sharp.BranchUpdater.UpstreamBranch"/>
              property to "refs/heads/master".
            </para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BranchUpdater.SetUpstream(System.String)">
            <summary>
            Set the upstream information for the current branch.
            <para>
            The upstream branch name is with respect to the current repository.
            So, passing "refs/remotes/origin/master" will set the current branch
            to track "refs/heads/master" on the origin. Passing in
            "refs/heads/master" will result in the branch tracking the local
            master branch.
            </para>
            </summary>
            <param name="upstreamBranchName">The remote branch to track (e.g. refs/remotes/origin/master).</param>
        </member>
        <member name="M:LibGit2Sharp.BranchUpdater.SetUpstreamBranch(System.String)">
            <summary>
            Set the upstream merge branch for the local branch.
            </summary>
            <param name="mergeBranchName">The merge branch in the upstream remote's namespace.</param>
        </member>
        <member name="M:LibGit2Sharp.BranchUpdater.SetUpstreamRemote(System.String)">
            <summary>
            Set the upstream remote for the local branch.
            </summary>
            <param name="remoteName">The name of the remote to set as the upstream branch.</param>
        </member>
        <member name="M:LibGit2Sharp.BranchUpdater.GetUpstreamInformation(System.String,System.String@,System.String@)">
            <summary>
            Get the upstream remote and merge branch name from a Canonical branch name.
            This will return the remote name (or ".") if a local branch for the remote name.
            </summary>
            <param name="canonicalName">The canonical branch name to parse.</param>
            <param name="remoteName">The name of the corresponding remote the branch belongs to
            or "." if it is a local branch.</param>
            <param name="mergeBranchName">The name of the upstream branch to merge into.</param>
        </member>
        <member name="T:LibGit2Sharp.CheckoutCallbacks">
            <summary>
            Class to handle the mapping between libgit2 progress_cb callback on the git_checkout_opts
            structure to the CheckoutProgressHandler delegate.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutCallbacks.onCheckoutProgress">
            <summary>
            The managed delegate (e.g. from library consumer) to be called in response to the checkout progress callback.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutCallbacks.onCheckoutNotify">
            <summary>
            The managed delegate (e.g. from library consumer) to be called in response to the checkout notify callback.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CheckoutCallbacks.#ctor(LibGit2Sharp.Handlers.CheckoutProgressHandler,LibGit2Sharp.Handlers.CheckoutNotifyHandler)">
            <summary>
            Constructor to set up native callback for given managed delegate.
            </summary>
            <param name="onCheckoutProgress"><see cref="T:LibGit2Sharp.Handlers.CheckoutProgressHandler"/> delegate to call in response to checkout progress_cb</param>
            <param name="onCheckoutNotify"><see cref="T:LibGit2Sharp.Handlers.CheckoutNotifyHandler"/> delegate to call in response to checkout notification callback.</param>
        </member>
        <member name="P:LibGit2Sharp.CheckoutCallbacks.CheckoutProgressCallback">
            <summary>
            The method to pass for the native checkout progress callback.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CheckoutCallbacks.CheckoutNotifyCallback">
            <summary>
            The method to pass for the native checkout notify callback.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CheckoutCallbacks.From(LibGit2Sharp.Handlers.CheckoutProgressHandler,LibGit2Sharp.Handlers.CheckoutNotifyHandler)">
            <summary>
            Generate a delegate matching the signature of the native progress_cb callback and wraps the <see cref="T:LibGit2Sharp.Handlers.CheckoutProgressHandler"/> delegate.
            </summary>
            <param name="onCheckoutProgress"><see cref="T:LibGit2Sharp.Handlers.CheckoutProgressHandler"/> that should be wrapped in the native callback.</param>
            <param name="onCheckoutNotify"><see cref="T:LibGit2Sharp.Handlers.CheckoutNotifyHandler"/> delegate to call in response to checkout notification callback.</param>
            <returns>The delegate with signature matching the expected native callback.</returns>
        </member>
        <member name="M:LibGit2Sharp.CheckoutCallbacks.OnGitCheckoutProgress(System.IntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr)">
            <summary>
            The delegate with a signature that matches the native checkout progress_cb function's signature.
            </summary>
            <param name="str">The path that was updated.</param>
            <param name="completedSteps">The number of completed steps.</param>
            <param name="totalSteps">The total number of steps.</param>
            <param name="payload">Payload object.</param>
        </member>
        <member name="T:LibGit2Sharp.CheckoutFileConflictStrategy">
            <summary>
            Enum specifying what content checkout should write to disk
            for conflicts.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutFileConflictStrategy.Normal">
            <summary>
            Use the default behavior for handling file conflicts. This is
            controlled by the merge.conflictstyle config option, and is "Merge"
            if no option is explicitly set.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutFileConflictStrategy.Ours">
            <summary>
            For conflicting files, checkout the "ours" (stage 2)  version of
            the file from the index.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutFileConflictStrategy.Theirs">
            <summary>
            For conflicting files, checkout the "theirs" (stage 3) version of
            the file from the index.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutFileConflictStrategy.Merge">
            <summary>
            Write normal merge files for conflicts.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutFileConflictStrategy.Diff3">
            <summary>
            Write diff3 formated files for conflicts.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CheckoutModifiers">
            <summary>
            Options controlling Checkout behavior.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutModifiers.None">
            <summary>
            No checkout flags - use default behavior.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutModifiers.Force">
            <summary>
            Proceed with checkout even if the index or the working tree differs from HEAD.
            This will throw away local changes.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CheckoutNotifyFlags">
            <summary>
            Flags controlling checkout notification behavior.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutNotifyFlags.None">
            <summary>
            No checkout notification.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutNotifyFlags.Conflict">
            <summary>
            Notify on conflicting paths.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutNotifyFlags.Dirty">
            <summary>
            Notify about dirty files. These are files that do not need
            an update, but no longer match the baseline.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutNotifyFlags.Updated">
            <summary>
            Notify for files that will be updated.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutNotifyFlags.Untracked">
            <summary>
            Notify for untracked files.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutNotifyFlags.Ignored">
            <summary>
            Notify about ignored file.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CheckoutOptions">
            <summary>
            Collection of parameters controlling Checkout behavior.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CheckoutOptions.CheckoutModifiers">
            <summary>
            Options controlling checkout behavior.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CheckoutOptions.CheckoutNotifyFlags">
            <summary>
            The flags specifying what conditions are
            reported through the OnCheckoutNotify delegate.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CheckoutOptions.OnCheckoutNotify">
            <summary>
            Delegate to be called during checkout for files that match
            desired filter specified with the NotifyFlags property.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CheckoutOptions.OnCheckoutProgress">
            Delegate through which checkout will notify callers of
            certain conditions. The conditions that are reported is
            controlled with the CheckoutNotifyFlags property.
        </member>
        <member name="M:LibGit2Sharp.CheckoutOptions.LibGit2Sharp#Core#IConvertableToGitCheckoutOpts#GenerateCallbacks">
            <summary>
            Generate a <see cref="T:LibGit2Sharp.CheckoutCallbacks"/> object with the delegates
            hooked up to the native callbacks.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LibGit2Sharp.CherryPickOptions">
            <summary>
            Options controlling CherryPick behavior.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CherryPickOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.CherryPickOptions"/> class.
            By default the cherry pick will be committed if there are no conflicts.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CherryPickOptions.Mainline">
            <summary>
            When cherry picking a merge commit, the parent number to consider as
            mainline, starting from offset 1.
            <para>
             As a merge commit has multiple parents, cherry picking a merge commit
             will take only the changes relative to the given parent.  The parent
             to consider changes based on is called the mainline, and must be
             specified by its number (i.e. offset).
            </para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CherryPickResult">
            <summary>
            Class to report the result of a cherry picked.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CherryPickResult.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CherryPickResult.Commit">
            <summary>
            The resulting commit of the cherry pick.
            <para>
              This will return <code>null</code> if the cherry pick was not committed.
                This can happen if:
                  1) The cherry pick resulted in conflicts.
                  2) The option to not commit on success is set.
              </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CherryPickResult.Status">
            <summary>
            The status of the cherry pick.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CherryPickStatus">
            <summary>
            The status of what happened as a result of a cherry-pick.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CherryPickStatus.CherryPicked">
            <summary>
            The commit was successfully cherry picked.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CherryPickStatus.Conflicts">
            <summary>
            The cherry pick resulted in conflicts.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CloneOptions">
            <summary>
            Options to define clone behaviour
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CloneOptions.#ctor">
            <summary>
            Creates default <see cref="T:LibGit2Sharp.CloneOptions"/> for a non-bare clone
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CloneOptions.IsBare">
            <summary>
            True will result in a bare clone, false a full clone.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CloneOptions.Checkout">
            <summary>
            If true, the origin's HEAD will be checked out. This only applies
            to non-bare repositories.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CloneOptions.BranchName">
            <summary>
            The name of the branch to checkout. When unspecified the
            remote's default branch will be used instead.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CloneOptions.RecurseSubmodules">
            <summary>
            Recursively clone submodules.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CloneOptions.OnCheckoutProgress">
            <summary>
            Handler for checkout progress information.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CommitFilter">
            <summary>
            Criterias used to filter out and order the commits of the repository when querying its history.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CommitFilter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:LibGit2Sharp.CommitFilter"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CommitFilter.SortBy">
            <summary>
            The ordering stragtegy to use.
            <para>
              By default, the commits are shown in reverse chronological order.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CommitFilter.IncludeReachableFrom">
            <summary>
            A pointer to a commit object or a list of pointers to consider as starting points.
            <para>
              Can be either a <see cref="T:System.String"/> containing the sha or reference canonical name to use,
              a <see cref="T:LibGit2Sharp.Branch"/>, a <see cref="T:LibGit2Sharp.Reference"/>, a <see cref="T:LibGit2Sharp.Commit"/>, a <see cref="T:LibGit2Sharp.Tag"/>,
              a <see cref="T:LibGit2Sharp.TagAnnotation"/>, an <see cref="T:LibGit2Sharp.ObjectId"/> or even a mixed collection of all of the above.
              By default, the <see cref="P:LibGit2Sharp.Repository.Head"/> will be used as boundary.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CommitFilter.ExcludeReachableFrom">
            <summary>
            A pointer to a commit object or a list of pointers which will be excluded (along with ancestors) from the enumeration.
            <para>
              Can be either a <see cref="T:System.String"/> containing the sha or reference canonical name to use,
              a <see cref="T:LibGit2Sharp.Branch"/>, a <see cref="T:LibGit2Sharp.Reference"/>, a <see cref="T:LibGit2Sharp.Commit"/>, a <see cref="T:LibGit2Sharp.Tag"/>,
              a <see cref="T:LibGit2Sharp.TagAnnotation"/>, an <see cref="T:LibGit2Sharp.ObjectId"/> or even a mixed collection of all of the above.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CommitFilter.FirstParentOnly">
            <summary>
            Whether to limit the walk to each commit's first parent, instead of all of them
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CommitOptions">
            <summary>
            Provides optional additional information to commit creation.
            By default, a new commit will be created (instead of amending the
            HEAD commit) and an empty commit which is unchanged from the current
            HEAD is disallowed.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CommitOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.CommitOptions"/> class.
            <para>
              Default behavior:
                The message is prettified.
                No automatic removal of comments is performed.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CommitOptions.AmendPreviousCommit">
            <summary>
            True to amend the current <see cref="T:LibGit2Sharp.Commit"/> pointed at by <see cref="P:LibGit2Sharp.Repository.Head"/>, false otherwise.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CommitOptions.AllowEmptyCommit">
            <summary>
            True to allow creation of an empty <see cref="T:LibGit2Sharp.Commit"/>, false otherwise.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CommitOptions.PrettifyMessage">
            <summary>
            True to prettify the message by stripping leading and trailing empty lines, trailing whitespace, and collapsing consecutive empty lines, false otherwise.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CommitOptions.CommentaryChar">
            <summary>
            The starting line char used to identify commentaries in the Commit message during the prettifying of the Commit message. If set (usually to '#'), all lines starting with this char will be removed from the message before the Commit is done.
            This property will only be considered when PrettifyMessage is set to true.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CommitSortStrategies">
            <summary>
            Determines the sorting strategy when iterating through the commits of the repository
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CommitSortStrategies.None">
            <summary>
            Sort the commits in no particular ordering;
            this sorting is arbitrary, implementation-specific
            and subject to change at any time.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CommitSortStrategies.Topological">
            <summary>
            Sort the commits in topological order
            (parents before children); this sorting mode
            can be combined with time sorting.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CommitSortStrategies.Time">
            <summary>
            Sort the commits by commit time;
            this sorting mode can be combined with
            topological sorting.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CommitSortStrategies.Reverse">
            <summary>
            Iterate through the commits in reverse
            order; this sorting mode can be combined with
            any of the above.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CompareOptions">
            <summary>
            Options to define file comparison behavior.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CompareOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.CompareOptions"/> class.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CompareOptions.ContextLines">
            <summary>
            The number of unchanged lines that define the boundary of a hunk (and to display before and after).
            (Default = 3)
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CompareOptions.InterhunkLines">
            <summary>
            The maximum number of unchanged lines between hunk boundaries before the hunks will be merged into a one.
            (Default = 0)
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CompareOptions.Similarity">
            <summary>
            Options for rename detection. If null, the `diff.renames` configuration setting is used.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CompareOptions.IncludeUnmodified">
            <summary>
            Include "unmodified" entries in the results.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CompareOptions.Algorithm">
            <summary>
            Algorithm to be used when performing a Diff.
            By default, <see cref="F:LibGit2Sharp.DiffAlgorithm.Myers"/> will be used.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.FileHistory">
            <summary>
            Represents a file-related log of commits beyond renames.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.FileHistory.AllowedSortStrategies">
            <summary>
            The allowed commit sort strategies.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.FileHistory._repo">
            <summary>
            The repository.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.FileHistory._path">
            <summary>
            The file's path relative to the repository's root.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.FileHistory._queryFilter">
            <summary>
            The filter to be used in querying the commit log.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.FileHistory.#ctor(LibGit2Sharp.Repository,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.Core.FileHistory"/> class.
            The commits will be enumerated in reverse chronological order.
            </summary>
            <param name="repo">The repository.</param>
            <param name="path">The file's path relative to the repository's root.</param>
            <exception cref="T:System.ArgumentNullException">If any of the parameters is null.</exception>
        </member>
        <member name="M:LibGit2Sharp.Core.FileHistory.#ctor(LibGit2Sharp.Repository,System.String,LibGit2Sharp.CommitFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.Core.FileHistory"/> class.
            The given <see cref="T:LibGit2Sharp.CommitFilter"/> instance specifies the commit
            sort strategies and range of commits to be considered.
            Only the time (corresponding to <code>--date-order</code>) and topological
            (coresponding to <code>--topo-order</code>) sort strategies are supported.
            </summary>
            <param name="repo">The repository.</param>
            <param name="path">The file's path relative to the repository's root.</param>
            <param name="queryFilter">The filter to be used in querying the commit log.</param>
            <exception cref="T:System.ArgumentNullException">If any of the parameters is null.</exception>
            <exception cref="T:System.ArgumentException">When an unsupported commit sort strategy is specified.</exception>
        </member>
        <member name="M:LibGit2Sharp.Core.FileHistory.GetEnumerator">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates the
            <see cref="T:LibGit2Sharp.LogEntry"/> instances representing the file's history,
            including renames (as in <code>git log --follow</code>).
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Core.FileHistory.FullHistory(LibGit2Sharp.IRepository,System.String,LibGit2Sharp.CommitFilter)">
            <summary>
            Gets the relevant commits in which the given file was created, changed, or renamed.
            </summary>
            <param name="repo">The repository.</param>
            <param name="path">The file's path relative to the repository's root.</param>
            <param name="filter">The filter to be used in querying the commits log.</param>
            <returns>A collection of <see cref="T:LibGit2Sharp.LogEntry"/> instances.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.FetchPruneStrategy">
            <summary>
            Specify how the remote tracking branches should be locally dealt with
            when their upstream countepart doesn't exist anymore.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.FetchPruneStrategy.FromConfigurationOrDefault">
            <summary>
            Use the setting from the configuration
            or, when there isn't any, fallback to default behavior.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.FetchPruneStrategy.Prune">
            <summary>
            Force pruning on
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.FetchPruneStrategy.NoPrune">
            <summary>
            Force pruning off
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitFilter">
            <summary>
            A git filter
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitFilter.git_filter_init_fn">
             <summary>
             Initialize callback on filter
            
             Specified as `filter.initialize`, this is an optional callback invoked
             before a filter is first used.  It will be called once at most.
            
             If non-NULL, the filter's `initialize` callback will be invoked right
             before the first use of the filter, so you can defer expensive
             initialization operations (in case libgit2 is being used in a way that doesn't need the filter).
             </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitFilter.git_filter_shutdown_fn">
             <summary>
             Shutdown callback on filter
            
             Specified as `filter.shutdown`, this is an optional callback invoked
             when the filter is unregistered or when libgit2 is shutting down.  It
             will be called once at most and should release resources as needed.
             Typically this function will free the `git_filter` object itself.
             </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitFilter.git_filter_check_fn">
             <summary>
             Callback to decide if a given source needs this filter
             Specified as `filter.check`, this is an optional callback that checks if filtering is needed for a given source.
            
             It should return 0 if the filter should be applied (i.e. success), GIT_PASSTHROUGH if the filter should
             not be applied, or an error code to fail out of the filter processing pipeline and return to the caller.
            
             The `attr_values` will be set to the values of any attributes given in the filter definition.  See `git_filter` below for more detail.
            
             The `payload` will be a pointer to a reference payload for the filter. This will start as NULL, but `check` can assign to this
             pointer for later use by the `apply` callback.  Note that the value should be heap allocated (not stack), so that it doesn't go
             away before the `apply` callback can use it.  If a filter allocates and assigns a value to the `payload`, it will need a `cleanup`
             callback to free the payload.
             </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitFilter.git_filter_apply_fn">
             <summary>
             Callback to actually perform the data filtering
            
             Specified as `filter.apply`, this is the callback that actually filters data.
             If it successfully writes the output, it should return 0.  Like `check`,
             it can return GIT_PASSTHROUGH to indicate that the filter doesn't want to run.
             Other error codes will stop filter processing and return to the caller.
            
             The `payload` value will refer to any payload that was set by the `check` callback.  It may be read from or written to as needed.
             </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitFilter.git_filter_cleanup_fn">
            <summary>
            Callback to clean up after filtering has been applied. Specified as `filter.cleanup`, this is an optional callback invoked
            after the filter has been applied.  If the `check` or `apply` callbacks allocated a `payload`
            to keep per-source filter state, use this  callback to free that payload and release resources as required.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.git_filter_source">
            <summary>
            The file source being filtered
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitCheckoutOptsWrapper">
            <summary>
            A wrapper around the native GitCheckoutOpts structure. This class is responsible
            for the managed objects that the native code points to.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.GitCheckoutOptsWrapper.#ctor(LibGit2Sharp.Core.IConvertableToGitCheckoutOpts,LibGit2Sharp.Core.FilePath[])">
            <summary>
            Create wrapper around <see cref="T:LibGit2Sharp.Core.GitCheckoutOpts"/> from <see cref="T:LibGit2Sharp.CheckoutOptions"/>.
            </summary>
            <param name="options">Options to create native GitCheckoutOpts structure from.</param>
            <param name="paths">Paths to checkout.</param>
        </member>
        <member name="P:LibGit2Sharp.Core.GitCheckoutOptsWrapper.Options">
            <summary>
            Native struct to pass to libgit.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Core.GitCheckoutOptsWrapper.Callbacks">
            <summary>
            The managed class mapping native callbacks into the
            corresponding managed delegate.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitCheckoutOptsWrapper.PathArray">
            <summary>
            Keep the paths around so we can dispose them.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.GitCheckoutOptsWrapper.CheckoutStrategyFromFileConflictStrategy(LibGit2Sharp.CheckoutFileConflictStrategy)">
            <summary>
            Method to translate from <see cref="T:LibGit2Sharp.CheckoutFileConflictStrategy"/> to <see cref="T:LibGit2Sharp.Core.CheckoutStrategy"/> flags.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitCredentialType">
            <summary>
            Authentication type requested.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitCredentialType.UserPassPlaintext">
            <summary>
            A plaintext username and password.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitCredentialType.SshKey">
            <summary>
            A ssh key from disk.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitCredentialType.SshCustom">
            <summary>
            A key with a custom signature function.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitCredentialType.Default">
            <summary>
            A key for NTLM/Kerberos "default" credentials.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitCredentialType.SshInteractive">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitCredentialType.Username">
             <summary>
             Username-only information
            
             If the SSH transport does not know which username to use,
             it will ask via this credential type.
             </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitCredentialType.SshMemory">
             <summary>
             Credentials read from memory.
            
             Only available for libssh2+OpenSSL for now.
             </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeOpts.RenameThreshold">
            <summary>
            Similarity to consider a file renamed.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeOpts.TargetLimit">
            <summary>
            Maximum similarity sources to examine (overrides
            'merge.renameLimit' config (default 200)
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeOpts.SimilarityMetric">
            <summary>
            Pluggable similarityMetric; pass IntPtr.Zero
            to use internal metric.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeOpts.RecursionLimit">
            <summary>
            Maximum number of times to merge common ancestors to build a
            virtual merge base when faced with criss-cross merges.  When this
            limit is reached, the next ancestor will simply be used instead of
            attempting to merge it.  The default is unlimited.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeOpts.DefaultDriver">
            <summary>
            Default merge driver to be used when both sides of a merge have
            changed.  The default is the `text` driver.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeOpts.MergeFileFavorFlags">
            <summary>
            Flags for automerging content.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeOpts.FileFlags">
            <summary>
            File merging flags.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitMergeAnalysis">
            <summary>
            The results of `git_merge_analysis` indicate the merge opportunities.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeAnalysis.GIT_MERGE_ANALYSIS_NONE">
            <summary>
            No merge is possible.  (Unused.)
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeAnalysis.GIT_MERGE_ANALYSIS_NORMAL">
            <summary>
            A "normal" merge; both HEAD and the given merge input have diverged
            from their common ancestor.  The divergent commits must be merged.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeAnalysis.GIT_MERGE_ANALYSIS_UP_TO_DATE">
            <summary>
            All given merge inputs are reachable from HEAD, meaning the
            repository is up-to-date and no merge needs to be performed.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeAnalysis.GIT_MERGE_ANALYSIS_FASTFORWARD">
            <summary>
            The given merge input is a fast-forward from HEAD and no merge
            needs to be performed.  Instead, the client can check out the
            given merge input.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeAnalysis.GIT_MERGE_ANALYSIS_UNBORN">
            <summary>
            The HEAD of the current repository is "unborn" and does not point to
            a valid commit.  No merge can be performed, but the caller may wish
            to simply set HEAD to the target commit(s).
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergePreference.GIT_MERGE_PREFERENCE_NONE">
            <summary>
            No configuration was found that suggests a preferred behavior for
            merge.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergePreference.GIT_MERGE_PREFERENCE_NO_FASTFORWARD">
            <summary>
            There is a `merge.ff=false` configuration setting, suggesting that
            the user does not want to allow a fast-forward merge.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergePreference.GIT_MERGE_PREFERENCE_FASTFORWARD_ONLY">
            <summary>
            There is a `merge.ff=only` configuration setting, suggesting that
            the user only wants fast-forward merges.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeFlag.GIT_MERGE_NORMAL">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeFlag.GIT_MERGE_FIND_RENAMES">
            <summary>
            Detect renames that occur between the common ancestor and the "ours"
            side or the common ancestor and the "theirs" side.  This will enable
            the ability to merge between a modified and renamed file.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeFlag.GIT_MERGE_FAIL_ON_CONFLICT">
             <summary>
             If a conflict occurs, exit immediately instead of attempting to
             continue resolving conflicts.  The merge operation will fail with
             GIT_EMERGECONFLICT and no index will be returned.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeFlag.GIT_MERGE_SKIP_REUC">
            <summary>
            Do not write the REUC extension on the generated index
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeFlag.GIT_MERGE_NO_RECURSIVE">
            <summary>
            If the commits being merged have multiple merge bases, do not build
            a recursive merge base (by merging the multiple merge bases),
            instead simply use the first base.  This flag provides a similar
            merge base to `git-merge-resolve`.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeFileFlag.GIT_MERGE_FILE_DEFAULT">
            <summary>
            Defaults
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeFileFlag.GIT_MERGE_FILE_STYLE_MERGE">
            <summary>
            Create standard conflicted merge files
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeFileFlag.GIT_MERGE_FILE_STYLE_DIFF3">
            <summary>
            Create diff3-style files
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeFileFlag.GIT_MERGE_FILE_SIMPLIFY_ALNUM">
            <summary>
            Condense non-alphanumeric regions for simplified diff file
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeFileFlag.GIT_MERGE_FILE_IGNORE_WHITESPACE">
            <summary>
            Ignore all whitespace
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeFileFlag.GIT_MERGE_FILE_IGNORE_WHITESPACE_CHANGE">
            <summary>
            Ignore changes in amount of whitespace
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeFileFlag.GIT_MERGE_FILE_IGNORE_WHITESPACE_EOL">
            <summary>
            Ignore whitespace at end of line
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeFileFlag.GIT_MERGE_FILE_DIFF_PATIENCE">
            <summary>
            Use the "patience diff" algorithm
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitMergeFileFlag.GIT_MERGE_FILE_DIFF_MINIMAL">
            <summary>
            Take extra time to find minimal diff
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitBlameOptionFlags.GIT_BLAME_NORMAL">
            <summary>
            Normal blame, the default
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitBlameOptionFlags.GIT_BLAME_TRACK_COPIES_SAME_FILE">
            <summary>
            Track lines that have moved within a file (like `git blame -M`).
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitBlameOptionFlags.GIT_BLAME_TRACK_COPIES_SAME_COMMIT_MOVES">
            Track lines that have moved across files in the same commit (like `git blame -C`).
            NOT IMPLEMENTED. 
        </member>
        <member name="F:LibGit2Sharp.Core.GitBlameOptionFlags.GIT_BLAME_TRACK_COPIES_SAME_COMMIT_COPIES">
            <summary>
            Track lines that have been copied from another file that exists in the
            same commit (like `git blame -CC`). Implies SAME_FILE.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitBlameOptionFlags.GIT_BLAME_TRACK_COPIES_ANY_COMMIT_COPIES">
            <summary>
            Track lines that have been copied from another file that exists in *any*
            commit (like `git blame -CCC`). Implies SAME_COMMIT_COPIES.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitBlameOptionFlags.GIT_BLAME_FIRST_PARENT">
            <summary>
            Restrict the search of commits to those reachable
            following only the first parents.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.PushTransferCallbacks.#ctor(LibGit2Sharp.Handlers.PushTransferProgressHandler)">
            <summary>
            Constructor to set up the native callback given managed delegate.
            </summary>
            <param name="onPushTransferProgress">The <see cref="T:LibGit2Sharp.Handlers.TransferProgressHandler"/> delegate that the git_transfer_progress_callback will call.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.PushTransferCallbacks.GenerateCallback">
            <summary>
            Generates a delegate that matches the native git_transfer_progress_callback function's signature and wraps the <see cref="T:LibGit2Sharp.Handlers.PushTransferProgressHandler"/> delegate.
            </summary>
            <returns>A delegate method with a signature that matches git_transfer_progress_callback.</returns>
        </member>
        <member name="M:LibGit2Sharp.Core.PackbuilderCallbacks.#ctor(LibGit2Sharp.Handlers.PackBuilderProgressHandler)">
            <summary>S
            Constructor to set up the native callback given managed delegate.
            </summary>
            <param name="onPackBuilderProgress">The <see cref="T:LibGit2Sharp.Handlers.PackBuilderProgressHandler"/> delegate that the git_packbuilder_progress will call.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.PackbuilderCallbacks.GenerateCallback">
            <summary>
            Generates a delegate that matches the native git_packbuilder_progress function's signature and wraps the <see cref="T:LibGit2Sharp.Handlers.PackBuilderProgressHandler"/> delegate.
            </summary>
            <returns>A delegate method with a signature that matches git_transfer_progress_callback.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.git_status_entry">
            <summary>
            A status entry from libgit2.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.git_status_entry.status">
            <summary>
            Calculated status of a filepath in the working directory considering the current <see cref = "P:LibGit2Sharp.Repository.Index" /> and the <see cref="P:LibGit2Sharp.Repository.Head" />.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.git_status_entry.head_to_index">
            <summary>
            The difference between the <see cref="P:LibGit2Sharp.Repository.Head" /> and <see cref = "P:LibGit2Sharp.Repository.Index" />.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.git_status_entry.index_to_workdir">
            <summary>
            The difference between the <see cref = "P:LibGit2Sharp.Repository.Index" /> and the working directory.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitStrArray.Strings">
            <summary>
            A pointer to an array of null-terminated strings.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitStrArray.Count">
            <summary>
            The number of strings in the array.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.GitStrArray.Reset">
            <summary>
            Resets the GitStrArray to default values.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitStrArrayManaged">
            <summary>
            A git_strarray where the string array and strings themselves were allocated
            with LibGit2Sharp's allocator (Marshal.AllocHGlobal).
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitStrArrayNative">
            <summary>
            A git_strarray where the string array and strings themselves were allocated
            with libgit2's allocator. Only libgit2 can free this git_strarray.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.GitStrArrayNative.ReadStrings">
            <summary>
            Enumerates each string from the array using the UTF-8 marshaler.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.RepositoryOpenFlags">
            <summary>
            Option flags for `git_repository_open_ext`
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.RepositoryOpenFlags.NoSearch">
            <summary>
            Only open the repository if it can be
             *   immediately found in the start_path.  Do not walk up from the
             *   start_path looking at parent directories.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.RepositoryOpenFlags.CrossFS">
            <summary>
            Unless this flag is set, open will not
             *   continue searching across filesystem boundaries (i.e. when `st_dev`
             *   changes from the `stat` system call).  (E.g. Searching in a user's home
             *   directory "/home/user/source/" will not return "/.git/" as the found
             *   repo if "/" is a different filesystem than "/home".)
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_NONE">
            <summary>
            Default is a dry run, no actual updates.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_SAFE">
            <summary>
            Allow safe updates that cannot overwrite uncommited data.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_FORCE">
            <summary>
            Allow update of entries in working dir that are modified from HEAD.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_RECREATE_MISSING">
            <summary>
            Allow checkout to recreate missing files.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_ALLOW_CONFLICTS">
            <summary>
            Allow checkout to make safe updates even if conflicts are found
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_REMOVE_UNTRACKED">
            <summary>
            Remove untracked files not in index (that are not ignored)
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_REMOVE_IGNORED">
            <summary>
            Remove ignored files not in index
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_UPDATE_ONLY">
            <summary>
            Only update existing files, don't create new ones
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_DONT_UPDATE_INDEX">
            <summary>
            Normally checkout updates index entries as it goes; this stops that
            Implies `GIT_CHECKOUT_DONT_WRITE_INDEX`.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_NO_REFRESH">
            <summary>
            Don't refresh index/config/etc before doing checkout
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_SKIP_UNMERGED">
            Allow checkout to skip unmerged files
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_USE_OURS">
            <summary>
            For unmerged files, checkout stage 2 from index
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_USE_THEIRS">
            <summary>
            For unmerged files, checkout stage 3 from index
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH">
            <summary>
            Treat pathspec as simple list of exact match file paths
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES">
            <summary>
            Ignore directories in use, they will be left empty
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_DONT_OVERWRITE_IGNORED">
            <summary>
            Don't overwrite ignored files that exist in the checkout target
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_CONFLICT_STYLE_MERGE">
            <summary>
            Write normal merge files for conflicts
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_CONFLICT_STYLE_DIFF3">
            <summary>
            Include common ancestor data in diff3 format files for conflicts
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_DONT_REMOVE_EXISTING">
            <summary>
            Don't overwrite existing files or folders
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_DONT_WRITE_INDEX">
            <summary>
            Normally checkout writes the index upon completion; this prevents that.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_UPDATE_SUBMODULES">
            <summary>
            Recursively checkout submodules with same options (NOT IMPLEMENTED)
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.CheckoutStrategy.GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED">
            <summary>
            Recursively checkout submodules if HEAD moved in super repo (NOT IMPLEMENTED)
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.IConvertableToGitCheckoutOpts">
            <summary>
            An inteface for objects that specify parameters from which a
            GitCheckoutOpts struct can be populated.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.FastForwardCheckoutOptionsAdapter">
            <summary>
            This wraps an IConvertableToGitCheckoutOpts object and can tweak the
            properties so that they are appropriate for a checkout performed as
            part of a FastForward merge. Most properties are passthrough to the
            wrapped object.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.FastForwardCheckoutOptionsAdapter.GenerateCallbacks">
            <summary>
            Passthrough to the wrapped object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LibGit2Sharp.Core.FastForwardCheckoutOptionsAdapter.CheckoutStrategy">
            <summary>
            There should be no resolvable conflicts in a FastForward merge.
            Just perform checkout with the safe checkout strategy.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Core.FastForwardCheckoutOptionsAdapter.CheckoutNotifyFlags">
            <summary>
            Passthrough to the wrapped object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitTransferProgress">
            <summary>
            Managed structure corresponding to git_transfer_progress native structure.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.Proxy.ErrorMessageFromException(System.Exception)">
            <summary>
            This method will take an exception and try to generate an error message
            that captures the important messages of the error.
            The formatting is a bit subjective.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:LibGit2Sharp.Core.Proxy.GIT_REBASE_NO_OPERATION">
            <summary>
            The value from the native layer indicating that no rebase operation is in progress.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.Proxy.git_rebase_next(LibGit2Sharp.Core.Handles.RebaseHandle)">
            <summary>
            Returns null when finished.
            </summary>
            <param name="rebase"></param>
            <returns></returns>
        </member>
        <member name="T:LibGit2Sharp.Core.Proxy.GitRebaseCommitResult">
            <summary>
            Struct to report the result of calling git_rebase_commit.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.Proxy.GitRebaseCommitResult.CommitId">
            <summary>
            The ID of the commit that was generated, if any
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.Proxy.GitRebaseCommitResult.WasPatchAlreadyApplied">
            <summary>
            bool to indicate if the patch was already applied.
            If Patch was already applied, then CommitId will be empty (all zeros).
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.Proxy.git_submodule_lookup(LibGit2Sharp.Core.Handles.RepositoryHandle,LibGit2Sharp.Core.FilePath)">
            <summary>
            Returns a handle to the corresponding submodule,
            or an invalid handle if a submodule is not found.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.Proxy.git_trace_set(LibGit2Sharp.LogLevel,LibGit2Sharp.Core.NativeMethods.git_trace_cb)">
             <summary>
             Install/Enable logging inside of LibGit2 to send messages back to LibGit2Sharp.
            
             Since the given callback will be passed into and retained by C code,
             it is very important that you pass an actual delegate here (and don't
             let the compiler create/cast a temporary one for you).  Furthermore, you
             must hold a reference to this delegate until you turn off logging.
            
             This callback is unlike other callbacks because logging persists in the
             process until disabled; in contrast, most callbacks are only defined for
             the duration of the down-call.
             </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.Proxy.git_libgit2_features">
            <summary>
            Returns the features with which libgit2 was compiled.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.Proxy.git_libgit2_opts_get_search_path(LibGit2Sharp.ConfigurationLevel)">
            <summary>
            Get the paths under which libgit2 searches for the configuration file of a given level.
            </summary>
            <param name="level">The level (global/system/XDG) of the config.</param>
            <returns>
                The paths delimited by 'GIT_PATH_LIST_SEPARATOR'.
            </returns>
        </member>
        <member name="M:LibGit2Sharp.Core.Proxy.git_libgit2_opts_set_search_path(LibGit2Sharp.ConfigurationLevel,System.String)">
            <summary>
            Set the path(s) under which libgit2 searches for the configuration file of a given level.
            </summary>
            <param name="level">The level (global/system/XDG) of the config.</param>
            <param name="path">
                A string of paths delimited by 'GIT_PATH_LIST_SEPARATOR'.
                Pass null to reset the search path to the default.
            </param>
        </member>
        <member name="M:LibGit2Sharp.Core.Proxy.ConvertResultToCancelFlag(System.Boolean)">
            <summary>
            Helper method for consistent conversion of return value on
            Callbacks that support cancellation from bool to native type.
            True indicates that function should continue, false indicates
            user wants to cancel.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:LibGit2Sharp.Core.ProxyExtensions">
            <summary>
            Class to hold extension methods used by the proxy class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.ProxyExtensions.ConvertToInt(System.UIntPtr)">
            <summary>
            Convert a UIntPtr to a int value. Will throw
            exception if there is an overflow.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.Core.ProxyExtensions.ConvertToLong(System.UIntPtr)">
            <summary>
            Convert a UIntPtr to a long value. Will throw
            exception if there is an overflow.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.Core.TarWriter.#ctor(System.IO.Stream)">
            <summary>
            Writes tar (see GNU tar) archive to a stream
            </summary>
            <param name="writeStream">stream to write archive to</param>
        </member>
        <member name="T:LibGit2Sharp.Core.TarWriter.UsTarHeader">
            <summary>
            UsTar header implementation.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.TarWriter.FileNameExtendedHeader.Parse(System.String,System.String)">
            <summary>
              Logic taken from https://github.com/git/git/blob/master/archive-tar.c
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitRemoteCallbacks">
            <summary>
            Structure for git_remote_callbacks
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.LaxFilePathNoCleanupMarshaler">
             <summary>
             This marshaler is to be used for capturing a UTF-8 string owned by libgit2 and
             converting it to a managed FilePath instance. The marshaler will not attempt to
             free the native pointer after conversion, because the memory is owned by libgit2.
            
             Use this marshaler for return values, for example:
             [return: MarshalAs(UnmanagedType.CustomMarshaler,
                                MarshalCookie = UniqueId.UniqueIdentifier,
                                MarshalTypeRef = typeof(LaxFilePathNoCleanupMarshaler))]
             </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.StrictFilePathMarshaler">
             <summary>
             This marshaler is to be used for sending managed FilePath instances to libgit2.
             The marshaler will allocate a buffer in native memory to hold the UTF-8 string
             and perform the encoding conversion using that buffer as the target. The pointer
             received by libgit2 will be to this buffer. After the function call completes, the
             native buffer is freed.
            
             Use this marshaler for function parameters, for example:
             [DllImport(libgit2)]
             internal static extern int git_index_open(out IndexSafeHandle index,
                 [MarshalAs(UnmanagedType.CustomMarshaler,
                            MarshalCookie = UniqueId.UniqueIdentifier,
                            MarshalTypeRef = typeof(StrictFilePathMarshaler))] FilePath indexpath);
             </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.LaxFilePathMarshaler">
            <summary>
            This marshaler is to be used for capturing a UTF-8 string allocated by libgit2 and
            converting it to a managed FilePath instance. The marshaler will free the native pointer
            after conversion.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_NORMAL">
            <summary>
            Normal diff, the default
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_REVERSE">
            <summary>
            Reverse the sides of the diff
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_INCLUDE_IGNORED">
            <summary>
            Include ignored files in the diff
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_RECURSE_IGNORED_DIRS">
            <summary>
            Even with GIT_DIFF_INCLUDE_IGNORED, an entire ignored directory
            will be marked with only a single entry in the diff; this flag
            adds all files under the directory as IGNORED entries, too.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_INCLUDE_UNTRACKED">
            <summary>
            Include untracked files in the diff
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_RECURSE_UNTRACKED_DIRS">
            <summary>
            Even with GIT_DIFF_INCLUDE_UNTRACKED, an entire untracked
            directory will be marked with only a single entry in the diff
            (a la what core Git does in `git status`); this flag adds *all*
            files under untracked directories as UNTRACKED entries, too.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_INCLUDE_UNMODIFIED">
            <summary>
            Include unmodified files in the diff
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_INCLUDE_TYPECHANGE">
            <summary>
            Normally, a type change between files will be converted into a
            DELETED record for the old and an ADDED record for the new; this
            options enabled the generation of TYPECHANGE delta records.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_INCLUDE_TYPECHANGE_TREES">
            <summary>
            Even with GIT_DIFF_INCLUDE_TYPECHANGE, blob->tree changes still
            generally show as a DELETED blob.  This flag tries to correctly
            label blob->tree transitions as TYPECHANGE records with new_file's
            mode set to tree.  Note: the tree SHA will not be available.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_IGNORE_FILEMODE">
            <summary>
            Ignore file mode changes
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_IGNORE_SUBMODULES">
            <summary>
            Treat all submodules as unmodified
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_IGNORE_CASE">
            <summary>
            Use case insensitive filename comparisons
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_INCLUDE_CASECHANGE">
            <summary>
            May be combined with `GIT_DIFF_IGNORE_CASE` to specify that a file
            that has changed case will be returned as an add/delete pair.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_DISABLE_PATHSPEC_MATCH">
            <summary>
            If the pathspec is set in the diff options, this flags means to
            apply it as an exact match instead of as an fnmatch pattern.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_SKIP_BINARY_CHECK">
            <summary>
            Disable updating of the `binary` flag in delta records.  This is
            useful when iterating over a diff if you don't need hunk and data
            callbacks and want to avoid having to load file completely.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_ENABLE_FAST_UNTRACKED_DIRS">
            <summary>
            When diff finds an untracked directory, to match the behavior of
            core Git, it scans the contents for IGNORED and UNTRACKED files.
            If *all* contents are IGNORED, then the directory is IGNORED; if
            any contents are not IGNORED, then the directory is UNTRACKED.
            This is extra work that may not matter in many cases.  This flag
            turns off that scan and immediately labels an untracked directory
            as UNTRACKED (changing the behavior to not match core Git).
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_UPDATE_INDEX">
            <summary>
            When diff finds a file in the working directory with stat
            information different from the index, but the OID ends up being the
            same, write the correct stat information into the index.  Note:
            without this flag, diff will always leave the index untouched.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_INCLUDE_UNREADABLE">
            <summary>
            Include unreadable files in the diff
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_INCLUDE_UNREADABLE_AS_UNTRACKED">
            <summary>
            Include unreadable files in the diff
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_FORCE_TEXT">
            <summary>
            Treat all files as text, disabling binary attributes and detection
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_FORCE_BINARY">
            <summary>
            Treat all files as binary, disabling text diffs
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_IGNORE_WHITESPACE">
            <summary>
            Ignore all whitespace
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_IGNORE_WHITESPACE_CHANGE">
            <summary>
            Ignore changes in amount of whitespace
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_IGNORE_WHITESPACE_EOL">
            <summary>
            Ignore whitespace at end of line
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_SHOW_UNTRACKED_CONTENT">
            <summary>
            When generating patch text, include the content of untracked
            files.  This automatically turns on GIT_DIFF_INCLUDE_UNTRACKED but
            it does not turn on GIT_DIFF_RECURSE_UNTRACKED_DIRS.  Add that
            flag if you want the content of every single UNTRACKED file.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_SHOW_UNMODIFIED">
            <summary>
            When generating output, include the names of unmodified files if
            they are included in the git_diff.  Normally these are skipped in
            the formats that list files (e.g. name-only, name-status, raw).
            Even with this, these will not be included in patch format.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_PATIENCE">
            <summary>
            Use the "patience diff" algorithm
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_MINIMAL">
            <summary>
            Take extra time to find minimal diff
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitDiffOptionFlags.GIT_DIFF_SHOW_BINARY">
            <summary>
            Include the necessary deflate / delta information so that `git-apply`
            can apply given diff information to binary files.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitOdbBackend.Odb">
            <summary>
            This field is populated by libgit2 at backend addition time, and exists for its
            use only. From this side of the interop, it is unreferenced.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.read_callback">
            <summary>
            The backend is passed an OID. From that data the backend is expected to return a pointer to the
            data for that object, the size of the data, and the type of the object.
            </summary>
            <param name="buffer_p">[out] If the call is successful, the backend will write the address of a buffer containing the object contents here.</param>
            <param name="len_p">[out] If the call is successful, the backend will write the length of the buffer containing the object contents here.</param>
            <param name="type_p">[out] If the call is successful, the backend will write the type of the object here.</param>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="oid">[in] The OID which the backend is being asked to look up.</param>
            <returns>0 if successful; an error code otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.read_prefix_callback">
            <summary>
            The backend is passed a short OID and the number of characters in that short OID.
            From that data the backend is expected to return the full OID (in out_oid), a pointer
            to the data (in buffer_p), the size of the buffer returned in buffer_p (in len_p),
            and the object type (in type_p). The short OID might not be long enough to resolve
            to just one object. In that case the backend should return GIT_EAMBIGUOUS.
            </summary>
            <param name="out_oid">[out] If the call is successful, the backend will write the full OID if the object here.</param>
            <param name="buffer_p">[out] If the call is successful, the backend will write the address of a buffer containing the object contents here.</param>
            <param name="len_p">[out] If the call is successful, the backend will write the length of the buffer containing the object contents here.</param>
            <param name="type_p">[out] If the call is successful, the backend will write the type of the object here.</param>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="short_oid">[in] The short-form OID which the backend is being asked to look up.</param>
            <param name="len">[in] The length of the short-form OID (short_oid).</param>
            <returns>0 if successful; an error code otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.read_header_callback">
            <summary>
            The backend is passed an OID. From that data the backend is expected to return the size of the
            data for that OID, and the type of that OID.
            </summary>
            <param name="len_p">[out] If the call is successful, the backend will write the length of the data for the OID here.</param>
            <param name="type_p">[out] If the call is successful, the backend will write the type of the object here.</param>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="oid">[in] The OID which the backend is being asked to look up.</param>
            <returns>0 if successful; an error code otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.write_callback">
            <summary>
            The backend is passed an OID, the type of the object, and its contents. The backend is asked to write
            that data to the backing store.
            </summary>
            <param name="oid">[in] The OID which the backend is being asked to write.</param>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="data">[in] A pointer to the data for this object.</param>
            <param name="len">[in] The length of the buffer pointed to by data.</param>
            <param name="type">[in] The type of the object.</param>
            <returns>0 if successful; an error code otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.writestream_callback">
            <summary>
            The backend is passed an OID, the type of the object, and the length of its contents. The backend is
            asked to return a stream object which the caller can use to write the contents of the object to the
            backing store.
            </summary>
            <param name="stream_out">[out] The stream object which the caller will use to write the contents for this object.</param>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="length">[in] The length of the object's contents.</param>
            <param name="type">[in] The type of the object being written.</param>
            <returns>0 if successful; an error code otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.readstream_callback">
            <summary>
            The backend is passed an OID. The backend is asked to return a stream object which the caller can use
            to read the contents of this object from the backing store.
            </summary>
            <param name="stream_out">[out] The stream object which the caller will use to read the contents of this object.</param>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="oid">[in] The object ID that the caller is requesting.</param>
            <returns>0 if successful; an error code otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.exists_callback">
            <summary>
            The backend is passed an OID. The backend is asked to return a value that indicates whether or not
            the object exists in the backing store.
            </summary>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="oid">[in] The object ID that the caller is requesting.</param>
            <returns>True if the object exists; false otherwise</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.exists_prefix_callback">
            <summary>
            The backend is passed a short OID and the number of characters in that short OID.
            The backend is asked to return a value that indicates whether or not
            the object exists in the backing store. The short OID might not be long enough to resolve
            to just one object. In that case the backend should return GIT_EAMBIGUOUS.
            </summary>
            <param name="found_oid">[out] If the call is successful, the backend will write the full OID if the object here.</param>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="short_oid">[in] The short-form OID which the backend is being asked to look up.</param>
            <param name="len">[in] The length of the short-form OID (short_oid).</param>
            <returns>1 if the object exists, 0 if the object doesn't; an error code otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.foreach_callback">
            <summary>
            The backend is passed a callback function and a void* to pass through to the callback. The backend is
            asked to iterate through all objects in the backing store, invoking the callback for each item.
            </summary>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="cb">[in] The callback function to invoke.</param>
            <param name="data">[in] An arbitrary parameter to pass through to the callback</param>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.free_callback">
            <summary>
            The owner of this backend is finished with it. The backend is asked to clean up and shut down.
            </summary>
            <param name="backend">[in] A pointer to the backend which is being freed.</param>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.foreach_callback_callback">
            <summary>
            A callback for the backend's implementation of foreach.
            </summary>
            <param name="oid">The oid of each object in the backing store.</param>
            <param name="data">The arbitrary parameter given to foreach_callback.</param>
            <returns>A non-negative result indicates the enumeration should continue. Otherwise, the enumeration should stop.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.Ensure">
            <summary>
            Ensure input parameters
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks an argument to ensure it isn't null.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.ArgumentNotNullOrEmptyEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Checks an array argument to ensure it isn't null or empty.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.ArgumentNotNullOrEmptyString(System.String,System.String)">
            <summary>
            Checks a string argument to ensure it isn't null or empty.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.ArgumentDoesNotContainZeroByte(System.String,System.String)">
            <summary>
            Checks a string argument to ensure it doesn't contain a zero byte.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.ArgumentNotZeroIntPtr(System.IntPtr,System.String)">
            <summary>
            Checks an argument to ensure it isn't a IntPtr.Zero (aka null).
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.ArgumentIsExpectedIntPtr(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            Checks a pointer argument to ensure it is the expected pointer value.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="expectedValue">The expected value.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.ZeroResult(System.Int32)">
            <summary>
            Check that the result of a C call was successful
            <para>
              The native function is expected to return strictly 0 for
              success or a negative value in the case of failure.
            </para>
            </summary>
            <param name="result">The result to examine.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.BooleanResult(System.Int32)">
            <summary>
            Check that the result of a C call returns a boolean value.
            <para>
              The native function is expected to return strictly 0 or 1.
            </para>
            </summary>
            <param name="result">The result to examine.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.Int32Result(System.Int32)">
            <summary>
            Check that the result of a C call that returns an integer
            value was successful.
            <para>
              The native function is expected to return 0 or a positive
              value for success or a negative value in the case of failure.
            </para>
            </summary>
            <param name="result">The result to examine.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.ArgumentConformsTo``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            Checks an argument by applying provided checker.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="checker">The predicate which has to be satisfied</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.ArgumentPositiveInt32(System.Int64,System.String)">
            <summary>
            Checks an argument is a positive integer.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.GitObjectIsNotNull(LibGit2Sharp.GitObject,System.String)">
            <summary>
            Check that the result of a C call that returns a non-null GitObject
            using the default exception builder.
            <para>
              The native function is expected to return a valid object value.
            </para>
            </summary>
            <param name="gitObject">The <see cref="T:LibGit2Sharp.GitObject"/> to examine.</param>
            <param name="identifier">The <see cref="T:LibGit2Sharp.GitObject"/> identifier to examine.</param>
        </member>
        <member name="T:LibGit2Sharp.Core.Epoch">
            <summary>
            Provides helper methods to help converting between Epoch (unix timestamp) and <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.Epoch.ToDateTimeOffset(System.Int64,System.Int32)">
            <summary>
            Builds a <see cref="T:System.DateTimeOffset"/> from a Unix timestamp and a timezone offset.
            </summary>
            <param name="secondsSinceEpoch">The number of seconds since 00:00:00 UTC on 1 January 1970.</param>
            <param name="timeZoneOffsetInMinutes">The number of minutes from UTC in a timezone.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> representing this instant.</returns>
        </member>
        <member name="M:LibGit2Sharp.Core.Epoch.ToSecondsSinceEpoch(System.DateTimeOffset)">
            <summary>
            Converts the<see cref="P:System.DateTimeOffset.UtcDateTime"/> part of a <see cref="T:System.DateTimeOffset"/> into a Unix timestamp.
            </summary>
            <param name="date">The <see cref="T:System.DateTimeOffset"/> to convert.</param>
            <returns>The number of seconds since 00:00:00 UTC on 1 January 1970.</returns>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.NotFound">
            <summary>
            Input does not exist in the scope searched.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Exists">
            <summary>
            Input already exists in the processed scope.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Ambiguous">
            <summary>
            The given short oid is ambiguous.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Buffer">
            <summary>
            Buffer related issue.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.User">
            <summary>
            Callback error.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.BareRepo">
            <summary>
            Operation cannot be performed against a bare repository.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.OrphanedHead">
            <summary>
            Operation cannot be performed against an orphaned HEAD.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.UnmergedEntries">
            <summary>
            Operation cannot be performed against a not fully merged index.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.NonFastForward">
            <summary>
            Push cannot be performed against the remote without losing commits.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.InvalidSpecification">
            <summary>
            Input is not a valid specification.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Conflict">
            <summary>
            A conflicting change has been detected in the index
            or working directory.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.LockedFile">
            <summary>
            A file operation failed because the file was locked.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Modified">
            <summary>
            Reference value does not match expected.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Auth">
            <summary>
            Authentication error.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Certificate">
            <summary>
            Server certificate is invalid.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Applied">
            <summary>
            Patch/merge has already been applied.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Peel">
            <summary>
            The requested peel operation is not possible.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.EndOfFile">
            <summary>
            Unexpected EOF.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Invalid">
            <summary>
            Invalid operation or input.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Uncommitted">
            <summary>
            Uncommitted changes in index prevented operation.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Directory">
            <summary>
            The operation is not valid for a directory.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.MergeConflict">
            <summary>
            A merge conflict exists and cannot continue
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.PassThrough">
            <summary>
            Skip and passthrough the given ODB backend.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.IterOver">
            <summary>
            There are no more entries left to iterate.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Retry">
            <summary>
            Internal-only.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Mismatch">
            <summary>
            A retrieved object did not match its expected ID.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOid">
            <summary>
            Represents a unique id in git which is the sha1 hash of this id's content.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitOid.Size">
            <summary>
            Number of bytes in the Id.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitOid.Id">
            <summary>
            The raw binary 20 byte Id.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Core.GitOid.Empty">
            <summary>
            Static convenience property to return an id (all zeros).
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.NativeMethods.LibraryLifetimeObject">
            <summary>
            Internal hack to ensure that the call to git_threads_shutdown is called after all handle finalizers
            have run to completion ensuring that no dangling git-related finalizer runs after git_threads_shutdown.
            There should never be more than one instance of this object per AppDomain.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.LaxUtf8NoCleanupMarshaler">
             <summary>
             This marshaler is to be used for capturing a UTF-8 string owned by libgit2 and
             converting it to a managed String instance. The marshaler will not attempt to
             free the native pointer after conversion, because the memory is owned by libgit2.
            
             Use this marshaler for return values, for example:
             [return: MarshalAs(UnmanagedType.CustomMarshaler,
                                MarshalCookie = UniqueId.UniqueIdentifier,
                                MarshalTypeRef = typeof(LaxUtf8NoCleanupMarshaler))]
             </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.StrictUtf8Marshaler">
             <summary>
             This marshaler is to be used for sending managed String instances to libgit2.
             The marshaler will allocate a buffer in native memory to hold the UTF-8 string
             and perform the encoding conversion using that buffer as the target. The pointer
             received by libgit2 will be to this buffer. After the function call completes, the
             native buffer is freed.
            
             Use this marshaler for function parameters, for example:
             [DllImport(libgit2)]
             internal static extern int git_tag_delete(RepositorySafeHandle repo,
                 [MarshalAs(UnmanagedType.CustomMarshaler,
                            MarshalCookie = UniqueId.UniqueIdentifier,
                            MarshalTypeRef = typeof(StrictUtf8Marshaler))] String tagName);
             </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.LaxUtf8Marshaler">
            <summary>
            This marshaler is to be used for capturing a UTF-8 string allocated by libgit2 and
            converting it to a managed String instance. The marshaler will free the native pointer
            after conversion.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitObjectType">
            <summary>
            Underlying type of a <see cref="T:LibGit2Sharp.GitObject"/>
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitObjectType.Any">
            <summary>
            Object can be of any type.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitObjectType.Bad">
            <summary>
            Object is invalid.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitObjectType.Ext1">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitObjectType.Commit">
            <summary>
            A commit object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitObjectType.Tree">
            <summary>
            A tree (directory listing) object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitObjectType.Blob">
            <summary>
            A file revision object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitObjectType.Tag">
            <summary>
            An annotated tag object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitObjectType.Ext2">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitObjectType.OfsDelta">
            <summary>
            A delta, base is given by an offset.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitObjectType.RefDelta">
            <summary>
            A delta, base is given by object id.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitCertificateType">
            <summary>
            Git certificate types to present to the user
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitCertificateType.None">
            <summary>
            No information about the certificate is available.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitCertificateType.X509">
            <summary>
            The certificate is a x509 certificate
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitCertificateType.Hostkey">
            <summary>
            The "certificate" is in fact a hostkey identification for ssh.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitCertificateType.StrArray">
            <summary>
            The "certificate" is in fact a collection of `name:content` strings
            containing information about the certificate.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.git_certificate_x509.cert_type">
            <summary>
            Type of the certificate, in this case, GitCertificateType.X509
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.git_certificate_x509.data">
            <summary>
            Pointer to the X509 certificate data
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.git_certificate_x509.len">
            <summary>
             The size of the certificate data
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.git_certificate_ssh.HashMD5">
            <summary>
            The MD5 hash (if appropriate)
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.git_certificate_ssh.HashSHA1">
            <summary>
            The MD5 hash (if appropriate)
            </summary>
        </member>
        <member name="T:LibGit2Sharp.DescribeOptions">
            <summary>
            Options to define describe behaviour
            </summary>
        </member>
        <member name="M:LibGit2Sharp.DescribeOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.DescribeOptions"/> class.
            <para>
              By default:
               - Only annotated tags will be considered as reference points
               - The commit id won't be used as a fallback strategy
               - Only the 10 most recent tags will be considered as candidates to describe the commit
               - All ancestor lines will be followed upon seeing a merge commit
               - 7 hexacidemal digits will be used as a minimum commid abbreviated size
               - Long format will only be used when no direct match has been found
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.DescribeOptions.Strategy">
            <summary>
            The kind of references that will be eligible as reference points.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.DescribeOptions.UseCommitIdAsFallback">
            <summary>
            Rather than throwing, should <see cref="M:LibGit2Sharp.IRepository.Describe(LibGit2Sharp.Commit,LibGit2Sharp.DescribeOptions)"/> return
            the abbreviated commit id when the selected <see cref="P:LibGit2Sharp.DescribeOptions.Strategy"/>
            didn't identify a proper reference to describe the commit.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.DescribeOptions.MinimumCommitIdAbbreviatedSize">
            <summary>
            Number of minimum hexadecimal digits used to render a uniquely
            abbreviated commit id.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.DescribeOptions.AlwaysRenderLongFormat">
            <summary>
            Always output the long format (the tag, the number of commits
            and the abbreviated commit name) even when a direct match has been
            found.
            <para>
              This is useful when one wants to see parts of the commit object
              name in "describe" output, even when the commit in question happens
              to be a tagged version. Instead of just emitting the tag name, it
              will describe such a commit as v1.2-0-gdeadbee (0th commit since
              tag v1.2 that points at object deadbee...).
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.DescribeOptions.OnlyFollowFirstParent">
            <summary>
            Follow only the first parent commit upon seeing a merge commit.
            <para>
              This is useful when you wish to not match tags on branches merged in
              the history of the target commit.
            </para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.DescribeStrategy">
            <summary>
            Specify the kind of committish which will be considered
            when trying to identify the closest reference to the described commit.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DescribeStrategy.Default">
            <summary>
            Only consider annotated tags.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DescribeStrategy.Tags">
            <summary>
            Consider both annotated and lightweight tags.
            <para>
              This will match every reference under the <code>refs/tags/</code> namespace.
            </para>
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DescribeStrategy.All">
            <summary>
            Consider annotated and lightweight tags, local and remote tracking branches.
            <para>
              This will match every reference under the <code>refs/</code> namespace.
            </para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.DiffAlgorithm">
            <summary>
            Algorithm used when performing a Diff.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DiffAlgorithm.Myers">
            <summary>
            The basic greedy diff algorithm.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DiffAlgorithm.Minimal">
            <summary>
            Use "minimal diff" algorithm when generating patches.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DiffAlgorithm.Patience">
            <summary>
            Use "patience diff" algorithm when generating patches.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.EntryExistsException">
            <summary>
            The exception that is thrown attempting to create a resource that already exists.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.EntryExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.EntryExistsException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.EntryExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.EntryExistsException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.EntryExistsException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.EntryExistsException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.EntryExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.EntryExistsException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.EntryExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.EntryExistsException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.FetchOptionsBase">
            <summary>
            Base collection of parameters controlling Fetch behavior.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FetchOptionsBase.OnProgress">
            <summary>
            Handler for network transfer and indexing progress information.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FetchOptionsBase.OnUpdateTips">
            <summary>
            Handler for updates to remote tracking branches.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FetchOptionsBase.OnTransferProgress">
            <summary>
            Handler for data transfer progress.
            <para>
            Reports the client's state regarding the received and processed (bytes, objects) from the server.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FetchOptionsBase.CredentialsProvider">
            <summary>
            Handler to generate <see cref="T:LibGit2Sharp.Credentials"/> for authentication.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FetchOptionsBase.CertificateCheck">
            <summary>
            This hanlder will be called to let the user make a decision on whether to allow
            the connection to preoceed based on the certificate presented by the server.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FetchOptionsBase.RepositoryOperationStarting">
            <summary>
            Starting to operate on a new repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FetchOptionsBase.RepositoryOperationCompleted">
            <summary>
            Completed operating on the current repository.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.LogEntry">
            <summary>
            An entry in a file's commit history.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.LogEntry.Path">
            <summary>
            The file's path relative to the repository's root.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.LogEntry.Commit">
            <summary>
            The commit in which the file was created or changed.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.FollowFilter">
            <summary>
            Criteria used to order the commits of the repository when querying its history.
            <para>
            The commits will be enumerated from the current HEAD of the repository.
            </para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.FollowFilter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:LibGit2Sharp.FollowFilter" />.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FollowFilter.SortBy">
            <summary>
            The ordering strategy to use.
            <para>
            By default, the commits are shown in reverse chronological order.
            </para>
            <para>
            Only 'Topological', 'Time', or 'Topological | Time' are allowed.
            </para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.IBelongToARepository">
            <summary>
            Can be used to reference the <see cref="T:LibGit2Sharp.IRepository" /> from which
            an instance was created.
            <para>
            While convenient in some situations (e.g. Checkout branch bound to UI element),
            it is important to ensure instances created from an <see cref="T:LibGit2Sharp.IRepository" />
            are not used after it is disposed.
            </para>
            <para>
            It's generally better to create <see cref="T:LibGit2Sharp.IRepository" /> and dependant instances
            on demand, with a short lifespan.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IBelongToARepository.Repository">
            <summary>
            The <see cref="T:LibGit2Sharp.IRepository" /> from which this instance was created.
            <para>
            The returned value should not be disposed.
            </para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Identity">
            <summary>
            Represents the identity used when writing reflog entries.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Identity.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.Identity"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="email">The email.</param>
        </member>
        <member name="P:LibGit2Sharp.Identity.Email">
            <summary>
            Gets the email.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Identity.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IdentityHelpers.SafeBuildNowSignatureHandle(LibGit2Sharp.Identity)">
            <summary>
            Build the handle for the Indentity with the current time, or return a handle
            to an empty signature.
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="T:LibGit2Sharp.FilterAttributeEntry">
             <summary>
             The definition for a given filter found in the .gitattributes file.
             The filter definition will result as 'filter=filterName'
            
             In the .gitattributes file a filter will be matched to a pathspec like so
             '*.txt filter=filterName'
             </summary>
        </member>
        <member name="M:LibGit2Sharp.FilterAttributeEntry.#ctor">
            <summary>
            For testing purposes
            </summary>
        </member>
        <member name="M:LibGit2Sharp.FilterAttributeEntry.#ctor(System.String)">
            <summary>
            The name of the filter found in a .gitattributes file.
            </summary>
            <param name="filterName">The name of the filter as found in the .gitattributes file without the "filter=" prefix</param>
            <remarks>
            "filter=" will be prepended to the filterDefinition, therefore the "filter=" portion of the filter
            name shouldbe omitted on declaration. Inclusion of the "filter=" prefix will cause the FilterDefinition to
            fail to match the .gitattributes entry and thefore no be invoked correctly.
            </remarks>
        </member>
        <member name="P:LibGit2Sharp.FilterAttributeEntry.FilterDefinition">
            <summary>
            The filter name in the form of 'filter=filterName'
            </summary>
        </member>
        <member name="T:LibGit2Sharp.FilterMode">
            <summary>
            These values control which direction of change is with which which a filter is being applied.
            </summary>
            <remarks>
            These enum values must be identical to the values in Libgit2 filter_mode_t found in filter.h
            </remarks>
        </member>
        <member name="F:LibGit2Sharp.FilterMode.Smudge">
            <summary>
            Smudge occurs when exporting a file from the Git object database to the working directory.
            For example, a file would be smudged during a checkout operation.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FilterMode.Clean">
            <summary>
            Clean occurs when importing a file from the working directory to the Git object database.
            For example, a file would be cleaned when staging a file.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.FilterRegistration">
            <summary>
            An object representing the registration of a Filter type with libgit2
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FilterRegistration.FilterPriorityMax">
            <summary>
            Maximum priority value a filter can have. A value of 200 will be run last on checkout and first on checkin.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FilterRegistration.FilterPriorityMin">
            <summary>
            Minimum priority value a filter can have. A value of 0 will be run first on checkout and last on checkin.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.FilterRegistration.#ctor(LibGit2Sharp.Filter,System.Int32)">
             <summary>
            
             </summary>
             <param name="filter"></param>
             <param name="priority"></param>
        </member>
        <member name="M:LibGit2Sharp.FilterRegistration.Finalize">
            <summary>
            Finalizer called by the <see cref="T:System.GC"/>, deregisters and frees native memory associated with the registered filter in libgit2.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FilterRegistration.IsValid">
            <summary>
            Gets if the registration and underlying filter are valid.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FilterRegistration.Filter">
            <summary>
            The registerd filters
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FilterRegistration.Name">
            <summary>
            The name of the filter in the libgit2 registry
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FilterRegistration.Priority">
            <summary>
            The priority of the registered filter
            </summary>
        </member>
        <member name="T:LibGit2Sharp.FilterSource">
            <summary>
            A filter source - describes the direction of filtering and the file being filtered.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.FilterSource.#ctor">
            <summary>
            Needed for mocking purposes
            </summary>
        </member>
        <member name="M:LibGit2Sharp.FilterSource.FromNativePtr(System.IntPtr)">
            <summary>
            Take an unmanaged pointer and convert it to filter source callback paramater
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.FilterSource.FromNativePtr(LibGit2Sharp.Core.git_filter_source*)">
            <summary>
            Take an unmanaged pointer and convert it to filter source callback paramater
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="P:LibGit2Sharp.FilterSource.SourceMode">
            <summary>
            The filter mode for current file being filtered
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FilterSource.Path">
            <summary>
            The relative path to the file
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FilterSource.ObjectId">
            <summary>
            The blob id
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FilterSource.Root">
            <summary>
            The working directory
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Filter">
            <summary>
            A filter is a way to execute code against a file as it moves to and from the git
            repository and into the working directory.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Filter.#ctor(System.String,System.Collections.Generic.IEnumerable{LibGit2Sharp.FilterAttributeEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.Filter"/> class.
            And allocates the filter natively.
            <param name="name">The unique name with which this filtered is registered with</param>
            <param name="attributes">A list of attributes which this filter applies to</param>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Filter.Finalize">
            <summary>
            Finalizer called by the <see cref="T:System.GC"/>, deregisters and frees native memory associated with the registered filter in libgit2.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Filter.StreamState">
            <summary>
            State bag used to keep necessary reference from being
            garbage collected during filter processing.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Filter.Name">
            <summary>
            The name that this filter was registered with
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Filter.Attributes">
            <summary>
            The filter filterForAttributes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Filter.GitFilter">
            <summary>
            The marshalled filter
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Filter.Complete(System.String,System.String,System.IO.Stream)">
             <summary>
             Complete callback on filter
            
             This optional callback will be invoked when the upstream filter is
             closed. Gives the filter a chance to perform any final actions or
             necissary clean up.
             </summary>
             <param name="path">The path of the file being filtered</param>
             <param name="root">The path of the working directory for the owning repository</param>
             <param name="output">Output to the downstream filter or output writer</param>
        </member>
        <member name="M:LibGit2Sharp.Filter.Initialize">
             <summary>
             Initialize callback on filter
            
             Specified as `filter.initialize`, this is an optional callback invoked
             before a filter is first used.  It will be called once at most.
            
             If non-NULL, the filter's `initialize` callback will be invoked right
             before the first use of the filter, so you can defer expensive
             initialization operations (in case the library is being used in a way
             that doesn't need the filter.
             </summary>
        </member>
        <member name="M:LibGit2Sharp.Filter.Create(System.String,System.String,LibGit2Sharp.FilterMode)">
            <summary>
            Indicates that a filter is going to be applied for the given file for
            the given mode.
            </summary>
            <param name="path">The path of the file being filtered</param>
            <param name="root">The path of the working directory for the owning repository</param>
            <param name="mode">The filter mode</param>
        </member>
        <member name="M:LibGit2Sharp.Filter.Clean(System.String,System.String,System.IO.Stream,System.IO.Stream)">
            <summary>
            Clean the input stream and write to the output stream.
            </summary>
            <param name="path">The path of the file being filtered</param>
            <param name="root">The path of the working directory for the owning repository</param>
            <param name="input">Input from the upstream filter or input reader</param>
            <param name="output">Output to the downstream filter or output writer</param>
        </member>
        <member name="M:LibGit2Sharp.Filter.Smudge(System.String,System.String,System.IO.Stream,System.IO.Stream)">
            <summary>
            Smudge the input stream and write to the output stream.
            </summary>
            <param name="path">The path of the file being filtered</param>
            <param name="root">The path of the working directory for the owning repository</param>
            <param name="input">Input from the upstream filter or input reader</param>
            <param name="output">Output to the downstream filter or output writer</param>
        </member>
        <member name="M:LibGit2Sharp.Filter.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Filter"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.Filter"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Filter"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Filter.Equals(LibGit2Sharp.Filter)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.Filter"/> is equal to the current <see cref="T:LibGit2Sharp.Filter"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.Filter"/> to compare with the current <see cref="T:LibGit2Sharp.Filter"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.Filter"/> is equal to the current <see cref="T:LibGit2Sharp.Filter"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Filter.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.Filter.op_Equality(LibGit2Sharp.Filter,LibGit2Sharp.Filter)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.Filter"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Filter"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Filter"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.Filter.op_Inequality(LibGit2Sharp.Filter,LibGit2Sharp.Filter)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.Filter"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Filter"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Filter"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.Filter.InitializeCallback(System.IntPtr)">
             <summary>
             Initialize callback on filter
            
             Specified as `filter.initialize`, this is an optional callback invoked
             before a filter is first used.  It will be called once at most.
            
             If non-NULL, the filter's `initialize` callback will be invoked right
             before the first use of the filter, so you can defer expensive
             initialization operations (in case libgit2 is being used in a way that doesn't need the filter).
             </summary>
        </member>
        <member name="T:LibGit2Sharp.IndexNameEntryCollection">
            <summary>
            The collection of <see cref="T:LibGit2Sharp.IndexNameEntry"/>s in a
            <see cref="T:LibGit2Sharp.Repository"/> index that reflect the
            original paths of any rename conflicts that exist in the index.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IndexNameEntryCollection.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IndexNameEntryCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexNameEntryCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:LibGit2Sharp.ContentChangeStats">
            <summary>
            Holds a summary of a change to a single file.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ContentChangeStats.LinesAdded">
            <summary>
            The number of lines added in the diff.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ContentChangeStats.LinesDeleted">
            <summary>
            The number of lines deleted in the diff.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ContentChangeStats.#ctor">
            <summary>
            For mocking.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.BuiltInFeatures">
            <summary>
            Flags to identify libgit2 compiled features.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.BuiltInFeatures.None">
            <summary>
            No optional features are compiled into libgit2.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.BuiltInFeatures.Threads">
            <summary>
            Threading support is compiled into libgit2.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.BuiltInFeatures.Https">
            <summary>
            Support for remotes over the HTTPS protocol is compiled into
            libgit2.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.BuiltInFeatures.Ssh">
            <summary>
            Support for remotes over the SSH protocol is compiled into
            libgit2.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.DefaultCredentials">
            <summary>
            A credential object that will provide the "default" credentials
            (logged-in user information) via NTLM or SPNEGO authentication.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.DefaultCredentials.GitCredentialHandler(System.IntPtr@)">
            <summary>
            Callback to acquire a credential object.
            </summary>
            <param name="cred">The newly created credential object.</param>
            <returns>0 for success, &lt; 0 to indicate an error, &gt; 0 to indicate no credential was acquired.</returns>
        </member>
        <member name="T:LibGit2Sharp.EmptyCommitException">
            <summary>
            The exception that is thrown when a commit would create an "empty"
            commit that is treesame to its parent without an explicit override.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.EmptyCommitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.EmptyCommitException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.EmptyCommitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.EmptyCommitException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.EmptyCommitException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.EmptyCommitException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.EmptyCommitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.EmptyCommitException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.EmptyCommitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.EmptyCommitException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.FetchOptions">
            <summary>
            Collection of parameters controlling Fetch behavior.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FetchOptions.TagFetchMode">
            <summary>
            Specifies the tag-following behavior of the fetch operation.
            <para>
            If not set, the fetch operation will follow the default behavior for the <see cref="T:LibGit2Sharp.Remote"/>
            based on the remote's <see cref="P:LibGit2Sharp.Remote.TagFetchMode"/> configuration.
            </para>
            <para>If neither this property nor the remote `tagopt` configuration is set,
            this will default to <see cref="F:TagFetchMode.Auto"/> (i.e. tags that point to objects
            retrieved during this fetch will be retrieved as well).</para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FetchOptions.Prune">
            <summary>
            Specifies the pruning behaviour for the fetch operation
            <para>
            If not set, the configuration's setting will take effect. If true, the branches which no longer
            exist on the remote will be removed from the remote-tracking branches.
            </para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.GlobalSettings">
            <summary>
            Global settings for libgit2 and LibGit2Sharp.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.GlobalSettings.Version">
            <summary>
            Returns information related to the current LibGit2Sharp
            library.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.GlobalSettings.RegisterSmartSubtransport``1(System.String)">
             <summary>
             Registers a new <see cref="T:LibGit2Sharp.SmartSubtransport"/> as a custom
             smart-protocol transport with libgit2.  Any Git remote with
             the scheme registered will delegate to the given transport
             for all communication with the server.  use this transport to communicate
             with the server This is not commonly
             used: some callers may want to re-use an existing connection to
             perform fetch / push operations to a remote.
            
             Note that this configuration is global to an entire process
             and does not honor application domains.
             </summary>
             <typeparam name="T">The type of SmartSubtransport to register</typeparam>
             <param name="scheme">The scheme (eg "http" or "gopher") to register</param>
        </member>
        <member name="M:LibGit2Sharp.GlobalSettings.UnregisterSmartSubtransport``1(LibGit2Sharp.SmartSubtransportRegistration{``0})">
            <summary>
            Unregisters a previously registered <see cref="T:LibGit2Sharp.SmartSubtransport"/>
            as a custom smart-protocol transport with libgit2.
            </summary>
            <typeparam name="T">The type of SmartSubtransport to register</typeparam>
            <param name="registration">The previous registration</param>
        </member>
        <member name="P:LibGit2Sharp.GlobalSettings.LogConfiguration">
             <summary>
             Registers a new <see cref="P:LibGit2Sharp.GlobalSettings.LogConfiguration"/> to receive
             information logging information from libgit2 and LibGit2Sharp.
            
             Note that this configuration is global to an entire process
             and does not honor application domains.
             </summary>
        </member>
        <member name="P:LibGit2Sharp.GlobalSettings.NativeLibraryPath">
            <summary>
            Sets a hint path for searching for native binaries: when
            specified, native binaries will first be searched in a
            subdirectory of the given path corresponding to the operating
            system and architecture (eg, "x86" or "x64") before falling
            back to the default path ("lib\win32\x86" or "lib\win32\x64"
            next to the application).
            <para>
            This must be set before any other calls to the library,
            and is not available on Unix platforms: see your dynamic
            library loader's documentation for details.
            </para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.GlobalSettings.GetRegisteredFilters">
            <summary>
            Takes a snapshot of the currently registered filters.
            </summary>
            <returns>An array of <see cref="T:LibGit2Sharp.FilterRegistration"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.GlobalSettings.RegisterFilter(LibGit2Sharp.Filter)">
            <summary>
            Register a filter globally with a default priority of 200 allowing the custom filter
            to imitate a core Git filter driver. It will be run last on checkout and first on checkin.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.GlobalSettings.RegisterFilter(LibGit2Sharp.Filter,System.Int32)">
            <summary>
            Registers a <see cref="T:LibGit2Sharp.Filter"/> to be invoked when <see cref="P:LibGit2Sharp.Filter.Name"/> matches .gitattributes 'filter=name'
            </summary>
            <param name="filter">The filter to be invoked at run time.</param>
            <param name="priority">The priroty of the filter to invoked.
            A value of 0 (<see cref="F:LibGit2Sharp.FilterRegistration.FilterPriorityMin"/>) will be run first on checkout and last on checkin.
            A value of 200 (<see cref="F:LibGit2Sharp.FilterRegistration.FilterPriorityMax"/>) will be run last on checkout and first on checkin.
            </param>
            <returns>A <see cref="T:LibGit2Sharp.FilterRegistration"/> object used to manage the lifetime of the registration.</returns>
        </member>
        <member name="M:LibGit2Sharp.GlobalSettings.DeregisterFilter(LibGit2Sharp.FilterRegistration)">
            <summary>
            Unregisters the associated filter.
            </summary>
            <param name="registration">Registration object with an associated filter.</param>
        </member>
        <member name="M:LibGit2Sharp.GlobalSettings.GetConfigSearchPaths(LibGit2Sharp.ConfigurationLevel)">
            <summary>
            Get the paths under which libgit2 searches for the configuration file of a given level.
            </summary>
            <param name="level">The level (global/system/XDG) of the config.</param>
            <returns>The paths that are searched</returns>
        </member>
        <member name="M:LibGit2Sharp.GlobalSettings.SetConfigSearchPaths(LibGit2Sharp.ConfigurationLevel,System.String[])">
             <summary>
             Set the paths under which libgit2 searches for the configuration file of a given level.
            
             <seealso cref="T:LibGit2Sharp.RepositoryOptions"/>.
             </summary>
             <param name="level">The level (global/system/XDG) of the config.</param>
             <param name="paths">
                 The new search paths to set.
                 Pass null to reset to the default.
                 The special string "$PATH" will be substituted with the current search path.
             </param>
        </member>
        <member name="T:LibGit2Sharp.IndexReucEntry">
            <summary>
            A reference to a resolved <see cref="T:LibGit2Sharp.Conflict"/>,
            known by the <see cref="T:LibGit2Sharp.Index"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IndexReucEntry.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexReucEntry.Path">
            <summary>
            Gets the path of this conflict.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexReucEntry.AncestorId">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.ObjectId"/> that was the ancestor of this
            conflict.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexReucEntry.AncestorMode">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Mode"/> of the file that was the ancestor of
            conflict.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexReucEntry.OurId">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.ObjectId"/> that was "our" side of this
            conflict.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexReucEntry.OurMode">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Mode"/> of the file that was "our" side of
            the conflict.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexReucEntry.TheirId">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.ObjectId"/> that was "their" side of this
            conflict.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexReucEntry.TheirMode">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Mode"/> of the file that was "their" side of
            the conflict.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IndexReucEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.IndexReucEntry"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.IndexReucEntry"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.IndexReucEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexReucEntry.Equals(LibGit2Sharp.IndexReucEntry)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.IndexReucEntry"/> is equal to the current <see cref="T:LibGit2Sharp.IndexReucEntry"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.IndexReucEntry"/> to compare with the current <see cref="T:LibGit2Sharp.IndexReucEntry"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.IndexReucEntry"/> is equal to the current <see cref="T:LibGit2Sharp.IndexReucEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexReucEntry.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexReucEntry.op_Equality(LibGit2Sharp.IndexReucEntry,LibGit2Sharp.IndexReucEntry)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.IndexReucEntry"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.IndexReucEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.IndexReucEntry"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexReucEntry.op_Inequality(LibGit2Sharp.IndexReucEntry,LibGit2Sharp.IndexReucEntry)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.IndexReucEntry"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.IndexReucEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.IndexReucEntry"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.IndexReucEntryCollection">
            <summary>
            The collection of <see cref="T:LibGit2Sharp.IndexReucEntry"/>s in a
            <see cref="T:LibGit2Sharp.Repository"/> index that reflect the
            resolved conflicts.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IndexReucEntryCollection.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexReucEntryCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.IndexReucEntry"/> with the specified relative path.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IndexReucEntryCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexReucEntryCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:LibGit2Sharp.IndexNameEntry">
            <summary>
            A reference to the paths involved in a rename <see cref="T:LibGit2Sharp.Conflict"/>,
            known by the <see cref="T:LibGit2Sharp.Index"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IndexNameEntry.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexNameEntry.Ancestor">
            <summary>
            Gets the path of the ancestor side of the conflict.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexNameEntry.Ours">
            <summary>
            Gets the path of the "ours" side of the conflict.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexNameEntry.Theirs">
            <summary>
            Gets the path of the "theirs" side of the conflict.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IndexNameEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.IndexNameEntry"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.IndexNameEntry"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.IndexNameEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexNameEntry.Equals(LibGit2Sharp.IndexNameEntry)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.IndexNameEntry"/> is equal to the current <see cref="T:LibGit2Sharp.IndexNameEntry"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.IndexNameEntry"/> to compare with the current <see cref="T:LibGit2Sharp.IndexNameEntry"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.IndexNameEntry"/> is equal to the current <see cref="T:LibGit2Sharp.IndexNameEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexNameEntry.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexNameEntry.op_Equality(LibGit2Sharp.IndexNameEntry,LibGit2Sharp.IndexNameEntry)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.IndexNameEntry"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.IndexNameEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.IndexNameEntry"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexNameEntry.op_Inequality(LibGit2Sharp.IndexNameEntry,LibGit2Sharp.IndexNameEntry)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.IndexNameEntry"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.IndexNameEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.IndexNameEntry"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.MergeAndCheckoutOptionsBase">
            <summary>
            Options controlling the behavior of things that do a merge and then
            check out the merge results (eg: merge, revert, cherry-pick).
            </summary>
        </member>
        <member name="M:LibGit2Sharp.MergeAndCheckoutOptionsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.MergeOptions"/> class.
            <para>
              Default behavior:
                A fast-forward merge will be performed if possible, unless the merge.ff configuration option is set.
                A merge commit will be committed, if one was created.
                Merge will attempt to find renames.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeAndCheckoutOptionsBase.CheckoutNotifyFlags">
            <summary>
            The Flags specifying what conditions are
            reported through the OnCheckoutNotify delegate.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeAndCheckoutOptionsBase.CommitOnSuccess">
            <summary>
            Commit the merge if the merge is successful and this is a non-fast-forward merge.
            If this is a fast-forward merge, then there is no merge commit and this option
            will not affect the merge.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeAndCheckoutOptionsBase.FileConflictStrategy">
            <summary>
            How conflicting index entries should be written out during checkout.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeAndCheckoutOptionsBase.OnCheckoutProgress">
            <summary>
            Delegate that the checkout will report progress through.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeAndCheckoutOptionsBase.OnCheckoutNotify">
            <summary>
            Delegate that checkout will notify callers of
            certain conditions. The conditions that are reported is
            controlled with the CheckoutNotifyFlags property.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CheckoutConflictException">
            <summary>
            The exception that is thrown when a checkout cannot be performed
            because of a conflicting change staged in the index, or unstaged
            in the working directory.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CheckoutConflictException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.CheckoutConflictException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CheckoutConflictException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.CheckoutConflictException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.CheckoutConflictException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.CheckoutConflictException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.CheckoutConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.CheckoutConflictException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.CheckoutConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.CheckoutConflictException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.MergeOptions">
            <summary>
            Options controlling Merge behavior.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.MergeOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.MergeOptions"/> class.
            <para>
              Default behavior:
                A fast-forward merge will be performed if possible, unless the merge.ff configuration option is set.
                A merge commit will be committed, if one was created.
                Merge will attempt to find renames.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeOptions.FastForwardStrategy">
            <summary>
            The type of merge to perform.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.FastForwardStrategy">
            <summary>
            Strategy used for merging.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FastForwardStrategy.Default">
            <summary>
            Default fast-forward strategy.  If the merge.ff configuration option is set,
            it will be used.  If it is not set, this will perform a fast-forward merge if
            possible, otherwise a non-fast-forward merge that results in a merge commit.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FastForwardStrategy.NoFastForward">
            <summary>
            Do not fast-forward. Always creates a merge commit.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FastForwardStrategy.FastForwardOnly">
            <summary>
            Only perform fast-forward merges.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.MergeOptionsBase">
            <summary>
            Options controlling the behavior of actions that use merge (merge
            proper, cherry-pick, revert)
            </summary>
        </member>
        <member name="M:LibGit2Sharp.MergeOptionsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.MergeOptionsBase"/> class.
            The default behavior is to attempt to find renames.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeOptionsBase.FindRenames">
            <summary>
            Find renames. Default is true.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeOptionsBase.FailOnConflict">
            <summary>
            If set, do not create or return conflict entries, but stop and return
            an error result after finding the first conflict.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeOptionsBase.SkipReuc">
            <summary>
            Do not write the Resolve Undo Cache extension on the generated index. This can
            be useful when no merge resolution will be presented to the user (e.g. a server-side
            merge attempt).
            </summary>
        </member>
        <member name="F:LibGit2Sharp.MergeOptionsBase.RenameThreshold">
            <summary>
            Similarity to consider a file renamed.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.MergeOptionsBase.TargetLimit">
            <summary>
            Maximum similarity sources to examine (overrides
            'merge.renameLimit' config (default 200)
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeOptionsBase.MergeFileFavor">
            <summary>
            How to handle conflicts encountered during a merge.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.MergeFileFavor">
            <summary>
            Enum specifying how merge should deal with conflicting regions
            of the files.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.MergeFileFavor.Normal">
            <summary>
            When a region of a file is changed in both branches, a conflict
            will be recorded in the index so that the checkout operation can produce
            a merge file with conflict markers in the working directory.
            This is the default.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.MergeFileFavor.Ours">
            <summary>
            When a region of a file is changed in both branches, the file
            created in the index will contain the "ours" side of any conflicting
            region. The index will not record a conflict.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.MergeFileFavor.Theirs">
            <summary>
            When a region of a file is changed in both branches, the file
            created in the index will contain the "theirs" side of any conflicting
            region. The index will not record a conflict.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.MergeFileFavor.Union">
            <summary>
            When a region of a file is changed in both branches, the file
            created in the index will contain each unique line from each side,
            which has the result of combining both files. The index will not
            record a conflict.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.MergeResult">
            <summary>
            Class to report the result of a merge.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.MergeResult.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeResult.Status">
            <summary>
            The status of the merge.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeResult.Commit">
            <summary>
            The resulting commit of the merge. For fast-forward merges, this is the
            commit that merge was fast forwarded to.
            <para>This will return <code>null</code> if the merge has been unsuccessful due to conflicts.</para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.MergeStatus">
            <summary>
            The status of what happened as a result of a merge.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.MergeStatus.UpToDate">
            <summary>
            Merge was up-to-date.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.MergeStatus.FastForward">
            <summary>
            Fast-forward merge.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.MergeStatus.NonFastForward">
            <summary>
            Non-fast-forward merge.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.MergeStatus.Conflicts">
            <summary>
            Merge resulted in conflicts.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.MergeTreeOptions">
            <summary>
            Options controlling the behavior of two trees being merged.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.MergeTreeOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.MergeTreeOptions"/> class.
            <para>
              Default behavior:
                Merge will attempt to find renames.
            </para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.MergeTreeResult">
            <summary>
            The results of a merge of two trees.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.MergeTreeResult.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeTreeResult.Status">
            <summary>
            The status of the merge.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeTreeResult.Tree">
            <summary>
            The resulting tree of the merge.
            <para>This will return <code>null</code> if the merge has been unsuccessful due to conflicts.</para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeTreeResult.Conflicts">
            <summary>
            The resulting conflicts from the merge.
            <para>This will return <code>null</code> if the merge was successful and there were no conflicts.</para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.MergeTreeStatus">
            <summary>
            The status of what happened as a result of a merge.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.MergeTreeStatus.Succeeded">
            <summary>
            Merge succeeded.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.MergeTreeStatus.Conflicts">
            <summary>
            Merge resulted in conflicts.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.NotFoundException">
            <summary>
            The exception that is thrown attempting to reference a resource that does not exist.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.NotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NotFoundException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.NotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.NotFoundException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NotFoundException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.NotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.NotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NotFoundException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.GitObjectMetadata">
            <summary>
            Exposes low level Git object metadata
            </summary>
        </member>
        <member name="P:LibGit2Sharp.GitObjectMetadata.Size">
            <summary>
            Size of the Object
            </summary>
        </member>
        <member name="P:LibGit2Sharp.GitObjectMetadata.Type">
            <summary>
            Object Type
            </summary>
        </member>
        <member name="T:LibGit2Sharp.PackBuilder">
            <summary>
            Representation of a git PackBuilder.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PackBuilder.#ctor(LibGit2Sharp.Repository)">
            <summary>
            Constructs a PackBuilder for a <see cref="T:LibGit2Sharp.Repository"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PackBuilder.Add``1(``0)">
            <summary>
            Inserts a single <see cref="T:LibGit2Sharp.GitObject"/> to the PackBuilder.
            For an optimal pack it's mandatory to insert objects in recency order, commits followed by trees and blobs. (quoted from libgit2 API ref)
            </summary>
            <param name="gitObject">The object to be inserted.</param>
            <exception cref="T:System.ArgumentNullException">if the gitObject is null</exception>
        </member>
        <member name="M:LibGit2Sharp.PackBuilder.AddRecursively``1(``0)">
            <summary>
            Recursively inserts a <see cref="T:LibGit2Sharp.GitObject"/> and its referenced objects.
            Inserts the object as well as any object it references.
            </summary>
            <param name="gitObject">The object to be inserted recursively.</param>
            <exception cref="T:System.ArgumentNullException">if the gitObject is null</exception>
        </member>
        <member name="M:LibGit2Sharp.PackBuilder.Add(LibGit2Sharp.ObjectId)">
            <summary>
            Inserts a single object to the PackBuilder by its <see cref="T:LibGit2Sharp.ObjectId"/>.
            For an optimal pack it's mandatory to insert objects in recency order, commits followed by trees and blobs. (quoted from libgit2 API ref)
            </summary>
            <param name="id">The object ID to be inserted.</param>
            <exception cref="T:System.ArgumentNullException">if the id is null</exception>
        </member>
        <member name="M:LibGit2Sharp.PackBuilder.AddRecursively(LibGit2Sharp.ObjectId)">
            <summary>
            Recursively inserts an object and its referenced objects by its <see cref="T:LibGit2Sharp.ObjectId"/>.
            Inserts the object as well as any object it references.
            </summary>
            <param name="id">The object ID to be recursively inserted.</param>
            <exception cref="T:System.ArgumentNullException">if the id is null</exception>
        </member>
        <member name="M:LibGit2Sharp.PackBuilder.System#IDisposable#Dispose">
            <summary>
            Disposes the PackBuilder object.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PackBuilder.Write(System.String)">
            <summary>
            Writes the pack file and corresponding index file to path.
            </summary>
            <param name="path">The path that pack and index files will be written to it.</param>
        </member>
        <member name="M:LibGit2Sharp.PackBuilder.SetMaximumNumberOfThreads(System.Int32)">
            <summary>
            Sets number of threads to spawn.
            </summary>
            <returns> Returns the number of actual threads to be used.</returns>
            <param name="nThread">The Number of threads to spawn. An argument of 0 ensures using all available CPUs</param>
        </member>
        <member name="P:LibGit2Sharp.PackBuilder.ObjectsCount">
            <summary>
            Number of objects the PackBuilder will write out.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PackBuilder.WrittenObjectsCount">
            <summary>
            Number of objects the PackBuilder has already written out. 
            This is only correct after the pack file has been written.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.PackBuilderResults">
            <summary>
            The results of pack process of the <see cref="T:LibGit2Sharp.ObjectDatabase"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PackBuilderResults.WrittenObjectsCount">
            <summary>
            Number of objects the PackBuilder has already written out. 
            </summary>
        </member>
        <member name="T:LibGit2Sharp.PackBuilderOptions">
            <summary>
            Packing options of the <see cref="T:LibGit2Sharp.ObjectDatabase"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PackBuilderOptions.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="packDirectory">Directory path to write the pack and index files to it</param>
            The default value for maximum number of threads to spawn is 0 which ensures using all available CPUs.
            <exception cref="T:System.ArgumentNullException">if packDirectory is null or empty</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">if packDirectory doesn't exist</exception>
        </member>
        <member name="P:LibGit2Sharp.PackBuilderOptions.PackDirectoryPath">
            <summary>
            Directory path to write the pack and index files to it.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PackBuilderOptions.MaximumNumberOfThreads">
            <summary>
            Maximum number of threads to spawn.
            The default value is 0 which ensures using all available CPUs.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.PatchEntryChanges">
            <summary>
            Holds the changes between two versions of a file.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PatchEntryChanges.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PatchEntryChanges.Path">
            <summary>
            The new path.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PatchEntryChanges.Mode">
            <summary>
            The new <see cref="P:LibGit2Sharp.PatchEntryChanges.Mode"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PatchEntryChanges.Oid">
            <summary>
            The new content hash.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PatchEntryChanges.Status">
            <summary>
            The kind of change that has been done (added, deleted, modified ...).
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PatchEntryChanges.OldPath">
            <summary>
            The old path.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PatchEntryChanges.OldMode">
            <summary>
            The old <see cref="P:LibGit2Sharp.PatchEntryChanges.Mode"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PatchEntryChanges.OldOid">
            <summary>
            The old content hash.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.PatchStats">
            <summary>
            Holds summary information for a diff.
            <para>The individual patches for each file can be accessed through the indexer of this class.</para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PatchStats.#ctor">
            <summary>
            For mocking.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PatchStats.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.PatchStats.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:LibGit2Sharp.PatchStats.Item(System.String)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.ContentChangeStats"/> corresponding to the specified <paramref name="path"/>.
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:LibGit2Sharp.PatchStats.TotalLinesAdded">
            <summary>
            The total number of lines added in this diff.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PatchStats.TotalLinesDeleted">
            <summary>
            The total number of lines deleted in this diff.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PatchStats.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PatchStats.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:LibGit2Sharp.PeelException">
            <summary>
            The exception that is thrown when a tag cannot be peeled to the
            target type due to the object model.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PeelException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.PeelException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PeelException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.PeelException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.PeelException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.PeelException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.PeelException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.PeelException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.PeelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.PeelException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.PullOptions">
            <summary>
            Parameters controlling Pull behavior.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PullOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PullOptions.FetchOptions">
            <summary>
            Parameters controlling Fetch behavior.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PullOptions.MergeOptions">
            <summary>
            Parameters controlling Merge behavior.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.PushUpdate">
            <summary>
            Represents an update which will be performed on the remote during push
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PushUpdate.#ctor">
            <summary>
            Empty constructor to support test suites
            </summary>
        </member>
        <member name="F:LibGit2Sharp.PushUpdate.SourceRefName">
            <summary>
            The source name of the reference
            </summary>
        </member>
        <member name="F:LibGit2Sharp.PushUpdate.DestinationRefName">
            <summary>
            The name of the reference to update on the server
            </summary>
        </member>
        <member name="F:LibGit2Sharp.PushUpdate.SourceObjectId">
            <summary>
            The current target of the reference
            </summary>
        </member>
        <member name="F:LibGit2Sharp.PushUpdate.DestinationObjectId">
            <summary>
            The new target for the reference
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RecurseSubmodulesException">
            <summary>
            The exception that is thrown when an error is encountered while recursing
            through submodules. The inner exception contains the exception that was
            initially thrown while operating on the submodule.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RecurseSubmodulesException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.RecurseSubmodulesException"/> class.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RecurseSubmodulesException.InitialRepositoryPath">
            <summary>
            The path to the initial repository the operation was run on.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RecurseSubmodulesException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.RecurseSubmodulesException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
            <param name="initialRepositoryPath">The path to the initial repository the operation was performed on.</param>
        </member>
        <member name="M:LibGit2Sharp.RebaseOperationImpl.Run(LibGit2Sharp.Core.Handles.RebaseHandle,LibGit2Sharp.Repository,LibGit2Sharp.Identity,LibGit2Sharp.RebaseOptions)">
            <summary>
            Run a rebase to completion, a conflict, or a requested stop point.
            </summary>
            <param name="rebaseOperationHandle">Handle to the rebase operation.</param>
            <param name="repository">Repository in which rebase operation is being run.</param>
            <param name="committer">Committer Identity to use for the rebased commits.</param>
            <param name="options">Options controlling rebase behavior.</param>
            <returns>RebaseResult that describes the result of the rebase operation.</returns>
        </member>
        <member name="M:LibGit2Sharp.RebaseOperationImpl.RunRebaseStep(LibGit2Sharp.Core.Handles.RebaseHandle,LibGit2Sharp.Repository,LibGit2Sharp.Identity,LibGit2Sharp.RebaseOptions,System.Int64,System.Int64)">
            <summary>
            Run the current rebase step. This will handle reporting that we are about to run a rebase step,
            identifying and running the operation for the current step, and reporting the current step is completed.
            </summary>
            <param name="rebaseOperationHandle"></param>
            <param name="repository"></param>
            <param name="committer"></param>
            <param name="options"></param>
            <param name="stepToApplyIndex"></param>
            <param name="totalStepCount"/>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.RebaseOperationImpl.VerifyRebaseOp(LibGit2Sharp.Core.git_rebase_operation*,LibGit2Sharp.RebaseStepInfo)">
            <summary>
            Verify that the information in a GitRebaseOperation and a RebaseStepInfo agree
            </summary>
            <param name="rebaseOpReport"></param>
            <param name="stepInfo"></param>
        </member>
        <member name="M:LibGit2Sharp.RebaseOperationImpl.NextRebaseStep(LibGit2Sharp.Repository,LibGit2Sharp.Core.Handles.RebaseHandle)">
            <summary>
            Returns the next rebase step, or null if there are none,
            and the rebase operation needs to be finished.
            </summary>
            <param name="repository"></param>
            <param name="rebaseOperationHandle"></param>
            <returns></returns>
        </member>
        <member name="F:LibGit2Sharp.RebaseOperationImpl.RebaseStepResult.CommitId">
            <summary>
            The ID of the commit that was generated, if any
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RebaseOperationImpl.RebaseStepResult.ChangesAlreadyApplied">
            <summary>
            bool to indicate if the patch was already applied.
            If Patch was already applied, then CommitId will be empty (all zeros).
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RebaseOptions">
            <summary>
            Options controlling rebase behavior.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RebaseOptions.RebaseStepStarting">
            <summary>
            Delegate that is called before each rebase step.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RebaseOptions.RebaseStepCompleted">
            <summary>
            Delegate that is called after each rebase step is completed.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RebaseOptions.CheckoutNotifyFlags">
            <summary>
            The Flags specifying what conditions are
            reported through the OnCheckoutNotify delegate.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RebaseOptions.OnCheckoutProgress">
            <summary>
            Delegate that the checkout will report progress through.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RebaseOptions.OnCheckoutNotify">
            <summary>
            Delegate that checkout will notify callers of
            certain conditions. The conditions that are reported is
            controlled with the CheckoutNotifyFlags property.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RebaseOptions.FileConflictStrategy">
            <summary>
            How conflicting index entries should be written out during checkout.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RebaseStatus">
            <summary>
            The status of the rebase.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RebaseStatus.Complete">
            <summary>
            The rebase operation was run to completion
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RebaseStatus.Conflicts">
            <summary>
            The rebase operation hit a conflict and stopped.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RebaseStatus.Stop">
            <summary>
            The rebase operation has hit a user requested stop point
            (edit, reword, ect.)
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RebaseResult">
            <summary>
            Information on a rebase operation.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RebaseResult.#ctor">
            <summary>
            Needed for mocking.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RebaseResult.CurrentStepInfo">
            <summary>
            Information on the operation to be performed in the current step.
            If the overall Rebase operation has completed successfully, this will
            be null.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RebaseResult.Status">
            <summary>
            Did the rebase operation run until it should stop
            (completed the rebase, or the operation for the current step
            is one that sequencing should stop.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RebaseResult.CompletedStepCount">
            <summary>
            The number of completed steps.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RebaseResult.TotalStepCount">
            <summary>
            The total number of steps in the rebase.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RebaseStepOperation">
            <summary>
            The type of operation to be performed in a rebase step.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RebaseStepOperation.Pick">
            <summary>
            Commit is to be cherry-picked.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RebaseStepOperation.Reword">
            <summary>
            Cherry-pick the commit and edit the commit message.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RebaseStepOperation.Edit">
            <summary>
            Cherry-pick the commit but allow user to edit changes.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RebaseStepOperation.Squash">
            <summary>
            Commit is to be squashed into previous commit. The commit
            message will be merged with the previous message.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RebaseStepOperation.Fixup">
            <summary>
            Commit is to be squashed into previous commit. The commit
            message will be discarded.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Rebase">
            <summary>
            Encapsulates a rebase operation.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Rebase.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Rebase.Start(LibGit2Sharp.Branch,LibGit2Sharp.Branch,LibGit2Sharp.Branch,LibGit2Sharp.Identity,LibGit2Sharp.RebaseOptions)">
            <summary>
            Start a rebase operation.
            </summary>
            <param name="branch">The branch to rebase.</param>
            <param name="upstream">The starting commit to rebase.</param>
            <param name="onto">The branch to rebase onto.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Identity"/> of who added the change to the repository.</param>
            <param name="options">The <see cref="T:LibGit2Sharp.RebaseOptions"/> that specify the rebase behavior.</param>
            <returns>true if completed successfully, false if conflicts encountered.</returns>
        </member>
        <member name="M:LibGit2Sharp.Rebase.Continue(LibGit2Sharp.Identity,LibGit2Sharp.RebaseOptions)">
            <summary>
            Continue the current rebase.
            </summary>
            <param name="committer">The <see cref="T:LibGit2Sharp.Identity"/> of who added the change to the repository.</param>
            <param name="options">The <see cref="T:LibGit2Sharp.RebaseOptions"/> that specify the rebase behavior.</param>
        </member>
        <member name="M:LibGit2Sharp.Rebase.Abort">
            <summary>
            Abort the rebase operation.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Rebase.Abort(LibGit2Sharp.RebaseOptions)">
            <summary>
            Abort the rebase operation.
            </summary>
            <param name="options">The <see cref="T:LibGit2Sharp.RebaseOptions"/> that specify the rebase behavior.</param>
        </member>
        <member name="M:LibGit2Sharp.Rebase.GetCurrentStepInfo">
            <summary>
            The info on the current step.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Rebase.GetStepInfo(System.Int64)">
            <summary>
            Get info on the specified step
            </summary>
            <param name="stepIndex"></param>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.Rebase.GetCurrentStepIndex">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.Rebase.GetTotalStepCount">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="T:LibGit2Sharp.RebaseStepInfo">
            <summary>
            Information on a particular step of a rebase operation.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RebaseStepInfo.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RebaseStepInfo.Type">
            <summary>
            The rebase operation type.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RebaseStepInfo.Commit">
            <summary>
            The object ID the step is operating on.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RebaseStepInfo.Exec">
            <summary>
            Command to execute, if any.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RefSpec">
            <summary>
            A push or fetch reference specification
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RefSpec.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RefSpec.Specification">
            <summary>
            Gets the pattern describing the mapping between remote and local references
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RefSpec.Direction">
            <summary>
            Indicates whether this <see cref="T:LibGit2Sharp.RefSpec"/> is intended to be used during a Push or Fetch operation
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RefSpec.Source">
            <summary>
            The source reference specifier
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RefSpec.Destination">
            <summary>
            The target reference specifier
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RefSpec.ForceUpdate">
            <summary>
            Indicates whether the destination will be force-updated if fast-forwarding is not possible
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RefSpec.SourceMatches(System.String)">
            <summary>
            Check whether the given reference matches the source (lhs) part of
            this refspec.
            </summary>
            <param name="reference">The reference name to check</param>
        </member>
        <member name="M:LibGit2Sharp.RefSpec.DestinationMatches(System.String)">
            <summary>
            Check whether the given reference matches the target (rhs) part of
            this refspec.
            </summary>
            <param name="reference">The reference name to check</param>
        </member>
        <member name="M:LibGit2Sharp.RefSpec.Transform(System.String)">
            <summary>
            Perform the transformation described by this refspec on the given
            reference name (from source to destination).
            </summary>
            <param name="reference">The reference name to transform</param>
        </member>
        <member name="M:LibGit2Sharp.RefSpec.ReverseTransform(System.String)">
            <summary>
            Perform the reverse of the transformation described by this refspec
            on the given reference name (from destination to source).
            </summary>
            <param name="reference">The reference name to transform</param>
        </member>
        <member name="T:LibGit2Sharp.RefSpecCollection">
            <summary>
            The collection of <see cref="T:LibGit2Sharp.RefSpec"/>s in a <see cref="T:LibGit2Sharp.Remote"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RefSpecCollection.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RefSpecCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.RefSpecCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:LibGit2Sharp.HistoryDivergence">
            <summary>
            Holds information about the potential ancestor
            and distance from it and two specified <see cref="T:LibGit2Sharp.Commit"/>s.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.HistoryDivergence.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.HistoryDivergence.One">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Commit"/> being used as a reference.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.HistoryDivergence.Another">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Commit"/> being compared against <see cref="P:LibGit2Sharp.HistoryDivergence.One"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.HistoryDivergence.AheadBy">
            <summary>
            Gets the number of commits that are reachable from <see cref="P:LibGit2Sharp.HistoryDivergence.One"/>,
            but not from <see cref="P:LibGit2Sharp.HistoryDivergence.Another"/>.
            <para>
              This property will return <c>null</c> when <see cref="P:LibGit2Sharp.HistoryDivergence.One"/>
              and <see cref="P:LibGit2Sharp.HistoryDivergence.Another"/> do not share a common ancestor.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.HistoryDivergence.BehindBy">
            <summary>
            Gets the number of commits that are reachable from <see cref="P:LibGit2Sharp.HistoryDivergence.Another"/>,
            but not from <see cref="P:LibGit2Sharp.HistoryDivergence.One"/>.
            <para>
              This property will return <c>null</c> when <see cref="P:LibGit2Sharp.HistoryDivergence.One"/>
              and <see cref="P:LibGit2Sharp.HistoryDivergence.Another"/> do not share a common ancestor.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.HistoryDivergence.CommonAncestor">
            <summary>
            Returns the best possible common ancestor <see cref="T:LibGit2Sharp.Commit"/> of <see cref="P:LibGit2Sharp.HistoryDivergence.One"/>
            and <see cref="P:LibGit2Sharp.HistoryDivergence.Another"/> or null if none found.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.PushOptions">
            <summary>
            Collection of parameters controlling Push behavior.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PushOptions.CredentialsProvider">
            <summary>
            Handler to generate <see cref="T:LibGit2Sharp.Credentials"/> for authentication.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PushOptions.CertificateCheck">
            <summary>
            This hanlder will be called to let the user make a decision on whether to allow
            the connection to preoceed based on the certificate presented by the server.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PushOptions.PackbuilderDegreeOfParallelism">
            <summary>
            If the transport being used to push to the remote requires the creation
            of a pack file, this controls the number of worker threads used by
            the packbuilder when creating that pack file to be sent to the remote.
            The default is 0, which indicates that the packbuilder will auto-detect
            the number of threads to create.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PushOptions.OnPushStatusError">
            <summary>
            Delegate to report errors when updating references on the remote.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PushOptions.OnPushTransferProgress">
            <summary>
            Delegate that progress updates of the network transfer portion of push
            will be reported through. The frequency of progress updates will not
            be more than once every 0.5 seconds (in general).
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PushOptions.OnPackBuilderProgress">
            <summary>
            Delegate that progress updates of the pack building portion of push
            will be reported through. The frequency of progress updates will not
            be more than once every 0.5 seconds (in general).
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PushOptions.OnNegotiationCompletedBeforePush">
            <summary>
            Called once between the negotiation step and the upload. It provides
            information about what updates will be performed.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.FilteringOptions">
            <summary>
            Allows callers to specify how blob content filters will be applied.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.FilteringOptions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.FilteringOptions"/> class.
            </summary>
            <param name="hintPath">The path that a file would be checked out as</param>
        </member>
        <member name="P:LibGit2Sharp.FilteringOptions.HintPath">
            <summary>
            The path to "hint" to the filters will be used to apply
            attributes.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.MergeFetchHeadNotFoundException">
            <summary>
            The exception that is thrown when the ref to merge with was as part of a pull operation not fetched.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.MergeFetchHeadNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.MergeFetchHeadNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.MergeFetchHeadNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.MergeFetchHeadNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.MergeFetchHeadNotFoundException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.MergeFetchHeadNotFoundException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.MergeFetchHeadNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.MergeFetchHeadNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.MergeFetchHeadNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.MergeFetchHeadNotFoundException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.RepositoryOperationContext">
            <summary>
            Class to convey information about the repository that is being operated on
            for operations that can recurse into submodules.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RepositoryOperationContext.#ctor">
            <summary>
            Needed for mocking.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RepositoryOperationContext.#ctor(System.String,System.String)">
            <summary>
            Constructor suitable for use on the repository the main
            operation is being run on (i.e. the super project, not a submodule).
            </summary>
            <param name="repositoryPath">The path of the repository being operated on.</param>
            <param name="remoteUrl">The URL that this operation will download from.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryOperationContext.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructor suitable for use on the sub repositories.
            </summary>
            <param name="repositoryPath">The path of the repository being operated on.</param>
            <param name="remoteUrl">The URL that this operation will download from.</param>
            <param name="parentRepositoryPath">The path to the super repository.</param>
            <param name="submoduleName">The logical name of this submodule.</param>
            <param name="recursionDepth">The depth of this sub repository from the original super repository.</param>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOperationContext.ParentRepositoryPath">
            <summary>
            If this is a submodule repository, the full path to the parent
            repository. If this is not a submodule repository, then
            this is empty.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOperationContext.RecursionDepth">
            <summary>
            The recursion depth for the current repository being operated on
            with respect to the repository the original operation was run
            against. The initial repository has a recursion depth of 0,
            the 1st level of subrepositories has a recursion depth of 1.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOperationContext.RemoteUrl">
            <summary>
            The remote URL this operation will work against, if any.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOperationContext.RepositoryPath">
            <summary>
            Full path of the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOperationContext.SubmoduleName">
            <summary>
            The submodule's logical name in the parent repository, if this is a
            submodule repository. If this is not a submodule repository, then
            this is empty.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ResetMode">
            <summary>
            Specifies the kind of operation that <see cref="M:LibGit2Sharp.IRepository.Reset(LibGit2Sharp.ResetMode,LibGit2Sharp.Commit)"/> should perform.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ResetMode.Soft">
            <summary>
            Moves the branch pointed to by HEAD to the specified commit object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ResetMode.Mixed">
            <summary>
            Moves the branch pointed to by HEAD to the specified commit object and resets the index
            to the tree recorded by the commit.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ResetMode.Hard">
            <summary>
            Moves the branch pointed to by HEAD to the specified commit object, resets the index
            to the tree recorded by the commit and updates the working directory to match the content
            of the index.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RefSpecDirection">
            <summary>
            Indicates whether a refspec is a push refspec or a fetch refspec
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RefSpecDirection.Fetch">
            <summary>
            Indicates that the refspec is a fetch refspec
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RefSpecDirection.Push">
            <summary>
            Indicates that the refspec is a push refspec
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RenameDetails">
            <summary>
            Holds the rename details of a particular file.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RenameDetails.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RenameDetails.OldFilePath">
            <summary>
            Gets the relative filepath to the working directory of the old file (the rename source).
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RenameDetails.NewFilePath">
            <summary>
            Gets the relative filepath to the working directory of the new file (the rename target).
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RenameDetails.Similarity">
            <summary>
            Gets the similarity between the old file an the new file (0-100).
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RenameDetails.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.RenameDetails"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.RenameDetails"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.RenameDetails"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.RenameDetails.Equals(LibGit2Sharp.RenameDetails)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.RenameDetails"/> is equal to the current <see cref="T:LibGit2Sharp.RenameDetails"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.RenameDetails"/> to compare with the current <see cref="T:LibGit2Sharp.RenameDetails"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.RenameDetails"/> is equal to the current <see cref="T:LibGit2Sharp.RenameDetails"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.RenameDetails.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.RenameDetails.op_Equality(LibGit2Sharp.RenameDetails,LibGit2Sharp.RenameDetails)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.RenameDetails"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.RenameDetails"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.RenameDetails"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.RenameDetails.op_Inequality(LibGit2Sharp.RenameDetails,LibGit2Sharp.RenameDetails)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.RenameDetails"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.RenameDetails"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.RenameDetails"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.RevertResult">
            <summary>
            Class to report the result of a revert.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RevertResult.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RevertResult.Commit">
            <summary>
            The resulting commit of the revert.
            <para>
              This will return <code>null</code> if the revert was not committed.
                This can happen if:
                  1) The revert resulted in conflicts.
                  2) The option to not commit on success is set.
              </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RevertResult.Status">
            <summary>
            The status of the revert.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RevertStatus">
            <summary>
            The status of what happened as a result of a revert.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RevertStatus.Reverted">
            <summary>
            The commit was successfully reverted.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RevertStatus.Conflicts">
            <summary>
            The revert resulted in conflicts.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RevertStatus.NothingToRevert">
            <summary>
            Revert was run, but there were no changes to commit.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RevertOptions">
            <summary>
            Options controlling Revert behavior.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RevertOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.RevertOptions"/> class.
            By default the revert will be committed if there are no conflicts.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RevertOptions.Mainline">
            <summary>
            When reverting a merge commit, the parent number to consider as
            mainline, starting from offset 1.
            <para>
             As a merge commit has multiple parents, reverting a merge commit
             will reverse all the changes brought in by the merge except for
             one parent's line of commits. The parent to preserve is called the
             mainline, and must be specified by its number (i.e. offset).
            </para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.SecureUsernamePasswordCredentials">
            <summary>
            Class that uses <see cref="T:System.Security.SecureString"/> to hold username and password credentials for remote repository access.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SecureUsernamePasswordCredentials.GitCredentialHandler(System.IntPtr@)">
            <summary>
            Callback to acquire a credential object.
            </summary>
            <param name="cred">The newly created credential object.</param>
            <returns>0 for success, &lt; 0 to indicate an error, &gt; 0 to indicate no credential was acquired.</returns>
        </member>
        <member name="P:LibGit2Sharp.SecureUsernamePasswordCredentials.Username">
            <summary>
            Username for username/password authentication (as in HTTP basic auth).
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SecureUsernamePasswordCredentials.Password">
            <summary>
            Password for username/password authentication (as in HTTP basic auth).
            </summary>
        </member>
        <member name="T:LibGit2Sharp.StageOptions">
            <summary>
            Options to define file staging behavior.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StageOptions.IncludeIgnored">
            <summary>
            Stage ignored files. (Default = false)
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StageOptions.ExplicitPathsOptions">
            <summary>
            If set, the passed paths will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths
            should be handled. (Default = null)
            </summary>
        </member>
        <member name="T:LibGit2Sharp.StatusShowOption">
            <summary>
            Flags controlling what files are reported by status.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StatusShowOption.IndexAndWorkDir">
            <summary>
            Both the index and working directory are examined for changes
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StatusShowOption.IndexOnly">
            <summary>
            Only the index is examined for changes
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StatusShowOption.WorkDirOnly">
            <summary>
            Only the working directory is examined for changes
            </summary>
        </member>
        <member name="T:LibGit2Sharp.StatusOptions">
            <summary>
            Options controlling the status behavior.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.StatusOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.StatusOptions"/> class.
            By default, both the index and the working directory will be scanned
            for status, and renames will be detected from changes staged in the
            index only.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StatusOptions.Show">
            <summary>
            Which files should be scanned and returned
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StatusOptions.DetectRenamesInIndex">
            <summary>
            Examine the staged changes for renames.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StatusOptions.DetectRenamesInWorkDir">
            <summary>
            Examine unstaged changes in the working directory for renames.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StatusOptions.ExcludeSubmodules">
            <summary>
            Exclude submodules from being scanned for status
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StatusOptions.RecurseIgnoredDirs">
            <summary>
            Recurse into ignored directories
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StatusOptions.PathSpec">
            <summary>
            Limit the scope of paths to consider to the provided pathspecs
            </summary>
            <remarks>
            If a PathSpec is given, the results from rename detection may
            not be accurate.
            </remarks>
        </member>
        <member name="P:LibGit2Sharp.StatusOptions.DisablePathSpecMatch">
            <summary>
            When set to <c>true</c>, the PathSpec paths will be considered
            as explicit paths, and NOT as pathspecs containing globs.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StatusOptions.IncludeUnaltered">
            <summary>
            Include unaltered files when scanning for status
            </summary>
            <remarks>
            Unaltered meaning the file is identical in the working directory, the index and HEAD.
            </remarks>
        </member>
        <member name="P:LibGit2Sharp.StatusOptions.IncludeIgnored">
            <summary>
            Include ignored files when scanning for status
            </summary>
            <remarks>
            ignored meaning present in .gitignore. Defaults to true for back compat but may improve perf to not include if you have thousands of ignored files.
            </remarks>
        </member>
        <member name="T:LibGit2Sharp.WhitespaceMode">
            <summary>
            Represents a mode for handling whitespace while detecting renames and copies.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.WhitespaceMode.IgnoreLeadingWhitespace">
            <summary>
            Don't consider leading whitespace when comparing files
            </summary>
        </member>
        <member name="F:LibGit2Sharp.WhitespaceMode.IgnoreAllWhitespace">
            <summary>
            Don't consider any whitespace when comparing files
            </summary>
        </member>
        <member name="F:LibGit2Sharp.WhitespaceMode.DontIgnoreWhitespace">
            <summary>
            Include all whitespace when comparing files
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RenameDetectionMode">
            <summary>
            Represents a mode for detecting renames and copies.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RenameDetectionMode.Default">
            <summary>
            Obey the user's `diff.renames` configuration setting
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RenameDetectionMode.None">
            <summary>
            Attempt no rename or copy detection
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RenameDetectionMode.Exact">
            <summary>
            Detect exact renames and copies (compare SHA hashes only)
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RenameDetectionMode.Renames">
            <summary>
            Detect fuzzy renames (use similarity metric)
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RenameDetectionMode.Copies">
            <summary>
            Detect renames and copies
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RenameDetectionMode.CopiesHarder">
            <summary>
            Detect renames, and include unmodified files when looking for copies
            </summary>
        </member>
        <member name="T:LibGit2Sharp.SimilarityOptions">
            <summary>
            Options for handling file similarity
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SimilarityOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.SimilarityOptions"/> class.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SimilarityOptions.None">
            <summary>
            Get a <see cref="T:LibGit2Sharp.SimilarityOptions"/> instance that does no rename detection
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SimilarityOptions.Renames">
            <summary>
            Get a <see cref="T:LibGit2Sharp.SimilarityOptions"/> instance that detects renames
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SimilarityOptions.Exact">
            <summary>
            Get a <see cref="T:LibGit2Sharp.SimilarityOptions"/> instance that detects exact renames only
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SimilarityOptions.Copies">
            <summary>
            Get a <see cref="T:LibGit2Sharp.SimilarityOptions"/> instance that detects renames and copies
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SimilarityOptions.CopiesHarder">
            <summary>
            Get a <see cref="T:LibGit2Sharp.SimilarityOptions"/> instance that detects renames, and includes unmodified files when detecting copies
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SimilarityOptions.Default">
            <summary>
            Get a <see cref="T:LibGit2Sharp.SimilarityOptions"/> instance that obeys the user's `diff.renames` setting
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SimilarityOptions.RenameDetectionMode">
            <summary>
            The mode for detecting renames and copies
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SimilarityOptions.WhitespaceMode">
            <summary>
            The mode for handling whitespace when comparing files
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SimilarityOptions.RenameThreshold">
            <summary>
            Similarity in order to consider a rename
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SimilarityOptions.RenameFromRewriteThreshold">
            <summary>
            Similarity of a modified file in order to be eligible as a rename source
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SimilarityOptions.CopyThreshold">
            <summary>
            Similarity to consider a file a copy
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SimilarityOptions.BreakRewriteThreshold">
            <summary>
            Similarity to split modify into an add/delete pair
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SimilarityOptions.RenameLimit">
            <summary>
            Maximum similarity sources to examine for a file
            </summary>
        </member>
        <member name="T:LibGit2Sharp.LogConfiguration">
            <summary>
            Logging and tracing configuration for libgit2 and LibGit2Sharp.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.LogConfiguration.None">
            <summary>
            The default logging configuration, which performs no logging at all.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.LogConfiguration.#ctor(LibGit2Sharp.LogLevel,LibGit2Sharp.Handlers.LogHandler)">
            <summary>
            Creates a new logging configuration to call the given
            delegate when logging occurs at the given level.
            </summary>
            <param name="level">Level to log at</param>
            <param name="handler">Handler to call when logging occurs</param>
        </member>
        <member name="M:LibGit2Sharp.LogConfiguration.GitTraceHandler(LibGit2Sharp.LogLevel,System.IntPtr)">
            <summary>
            This private method will be called from LibGit2 (from C code via
            the GitTraceCallback delegate) to route LibGit2 log messages to
            the same LogHandler as LibGit2Sharp messages.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.LogLevel">
            <summary>
            Available logging levels.  When logging is enabled at a particular
            level, callers will be provided logging at the given level and all
            lower levels.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.LogLevel.None">
            <summary>
            No logging will be provided.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.LogLevel.Fatal">
            <summary>
            Severe errors that may impact the program's execution.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.LogLevel.Error">
            <summary>
            Errors that do not impact the program's execution.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.LogLevel.Warning">
            <summary>
            Warnings that suggest abnormal data.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.LogLevel.Info">
            <summary>
            Informational messages about program execution.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.LogLevel.Debug">
            <summary>
            Detailed data that allows for debugging.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.LogLevel.Trace">
            <summary>
            Tracing is exceptionally detailed debugging data.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.SubmoduleRecurse">
            <summary>
            Submodule recurse rule options.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleRecurse.Reset">
            <summary>
            Reset to the value in the config.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleRecurse.No">
            <summary>
            Do not recurse into submodules.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleRecurse.Yes">
            <summary>
            Recurse into submodules.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleRecurse.OnDemand">
            <summary>
            Recurse into submodules only when commit not already in local clone.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.SubmoduleUpdateOptions">
            <summary>
            Options controlling Submodule Update behavior and callbacks.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SubmoduleUpdateOptions.Init">
            <summary>
            Initialize the submodule if it is not already initialized.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SubmoduleUpdateOptions.OnCheckoutNotify">
            <summary>
            Delegate to be called during checkout for files that match
            desired filter specified with the NotifyFlags property.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SubmoduleUpdateOptions.OnCheckoutProgress">
            Delegate through which checkout will notify callers of
            certain conditions. The conditions that are reported is
            controlled with the CheckoutNotifyFlags property.
        </member>
        <member name="P:LibGit2Sharp.SubmoduleUpdateOptions.CheckoutNotifyFlags">
            <summary>
            The flags specifying what conditions are
            reported through the OnCheckoutNotify delegate.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.UnbornBranchException">
            <summary>
            The exception that is thrown when a operation requiring an existing
            branch is performed against an unborn branch.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.UnbornBranchException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnbornBranchException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.UnbornBranchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnbornBranchException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.UnbornBranchException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnbornBranchException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.UnbornBranchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnbornBranchException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.UnbornBranchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnbornBranchException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.LockedFileException">
            <summary>
            The exception that is thrown attempting to open a locked file.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.LockedFileException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.LockedFileException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.LockedFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.LockedFileException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.LockedFileException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.LockedFileException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.LockedFileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.LockedFileException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.LockedFileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.LockedFileException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.CommitRewriteInfo">
            <summary>
            Commit metadata when rewriting history
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CommitRewriteInfo.Author">
            <summary>
            The author to be used for the new commit
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CommitRewriteInfo.Committer">
            <summary>
            The committer to be used for the new commit
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CommitRewriteInfo.Message">
            <summary>
            The message to be used for the new commit
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CommitRewriteInfo.From(LibGit2Sharp.Commit)">
            <summary>
            Build a <see cref="T:LibGit2Sharp.CommitRewriteInfo"/> from the <see cref="T:LibGit2Sharp.Commit"/> passed in
            </summary>
            <param name="commit">The <see cref="T:LibGit2Sharp.Commit"/> whose information is to be copied</param>
            <returns>A new <see cref="T:LibGit2Sharp.CommitRewriteInfo"/> object that matches the info for the <paramref name="commit"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.CommitRewriteInfo.From(LibGit2Sharp.Commit,LibGit2Sharp.Signature)">
            <summary>
            Build a <see cref="T:LibGit2Sharp.CommitRewriteInfo"/> from the <see cref="T:LibGit2Sharp.Commit"/> passed in,
            optionally overriding some of its properties
            </summary>
            <param name="commit">The <see cref="T:LibGit2Sharp.Commit"/> whose information is to be copied</param>
            <param name="author">Optional override for the author</param>
            <returns>A new <see cref="T:LibGit2Sharp.CommitRewriteInfo"/> object that matches the info for the
            <paramref name="commit"/> with the optional parameters replaced..</returns>
        </member>
        <member name="M:LibGit2Sharp.CommitRewriteInfo.From(LibGit2Sharp.Commit,System.String)">
            <summary>
            Build a <see cref="T:LibGit2Sharp.CommitRewriteInfo"/> from the <see cref="T:LibGit2Sharp.Commit"/> passed in,
            optionally overriding some of its properties
            </summary>
            <param name="commit">The <see cref="T:LibGit2Sharp.Commit"/> whose information is to be copied</param>
            <param name="message">Optional override for the message</param>
            <returns>A new <see cref="T:LibGit2Sharp.CommitRewriteInfo"/> object that matches the info for the
            <paramref name="commit"/> with the optional parameters replaced..</returns>
        </member>
        <member name="M:LibGit2Sharp.CommitRewriteInfo.From(LibGit2Sharp.Commit,LibGit2Sharp.Signature,LibGit2Sharp.Signature)">
            <summary>
            Build a <see cref="T:LibGit2Sharp.CommitRewriteInfo"/> from the <see cref="T:LibGit2Sharp.Commit"/> passed in,
            optionally overriding some of its properties
            </summary>
            <param name="commit">The <see cref="T:LibGit2Sharp.Commit"/> whose information is to be copied</param>
            <param name="author">Optional override for the author</param>
            <param name="committer">Optional override for the committer</param>
            <returns>A new <see cref="T:LibGit2Sharp.CommitRewriteInfo"/> object that matches the info for the
            <paramref name="commit"/> with the optional parameters replaced..</returns>
        </member>
        <member name="M:LibGit2Sharp.CommitRewriteInfo.From(LibGit2Sharp.Commit,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.String)">
            <summary>
            Build a <see cref="T:LibGit2Sharp.CommitRewriteInfo"/> from the <see cref="T:LibGit2Sharp.Commit"/> passed in,
            optionally overriding some of its properties
            </summary>
            <param name="commit">The <see cref="T:LibGit2Sharp.Commit"/> whose information is to be copied</param>
            <param name="author">Optional override for the author</param>
            <param name="committer">Optional override for the committer</param>
            <param name="message">Optional override for the message</param>
            <returns>A new <see cref="T:LibGit2Sharp.CommitRewriteInfo"/> object that matches the info for the
            <paramref name="commit"/> with the optional parameters replaced..</returns>
        </member>
        <member name="T:LibGit2Sharp.DiffModifiers">
            <summary>
            Additional behaviors the diffing should take into account
            when performing the comparison.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DiffModifiers.None">
            <summary>
            No special behavior.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DiffModifiers.IncludeUntracked">
            <summary>
            Include untracked files among the files to be processed, when
            diffing against the working directory.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DiffModifiers.IncludeUnmodified">
            <summary>
            Include unmodified files among the files to be processed, when
            diffing against the working directory.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DiffModifiers.DisablePathspecMatch">
            <summary>
            Treats the passed pathspecs as explicit paths (no pathspec match).
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DiffModifiers.IncludeIgnored">
            <summary>
            Include ignored files among the files to be processed, when
            diffing against the working directory.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ObjectType">
            <summary>
            Underlying type of a <see cref="T:LibGit2Sharp.GitObject"/>
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ObjectType.Commit">
            <summary>
            A commit object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ObjectType.Tree">
            <summary>
            A tree (directory listing) object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ObjectType.Blob">
            <summary>
            A file revision object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ObjectType.Tag">
            <summary>
            An annotated tag object.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Patch">
            <summary>
            Holds the patch between two trees.
            <para>The individual patches for each file can be accessed through the indexer of this class.</para>
            <para>Building a patch is an expensive operation. If you only need to know which files have been added,
            deleted, modified, ..., then consider using a simpler <see cref="T:LibGit2Sharp.TreeChanges"/>.</para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Patch.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Patch.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.Patch.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:LibGit2Sharp.Patch.Item(System.String)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.ContentChanges"/> corresponding to the specified <paramref name="path"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Patch.LinesAdded">
            <summary>
            The total number of lines added in this diff.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Patch.LinesDeleted">
            <summary>
            The total number of lines deleted in this diff.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Patch.Content">
            <summary>
            The full patch file of this diff.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Patch.op_Implicit(LibGit2Sharp.Patch)~System.String">
            <summary>
            Implicit operator for string conversion.
            </summary>
            <param name="patch"><see cref="T:LibGit2Sharp.Patch"/>.</param>
            <returns>The patch content as string.</returns>
        </member>
        <member name="M:LibGit2Sharp.Patch.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Patch.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:LibGit2Sharp.ReferenceExtensions">
            <summary>
            Provides helpers to a <see cref="T:LibGit2Sharp.Reference"/>.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Conflict">
             <summary>
              Represents a group of index entries that describe a merge conflict
              in the index.  This is typically a set of ancestor, ours and theirs
              entries for a given path.
            
             Any side may be missing to reflect additions or deletions in the
             branches being merged.
             </summary>
        </member>
        <member name="M:LibGit2Sharp.Conflict.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Conflict.Ancestor">
            <summary>
             The index entry of the ancestor side of the conflict (the stage
             1 index entry.)
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Conflict.Ours">
            <summary>
             The index entry of the "ours" (ORIG_HEAD or merge target) side
             of the conflict (the stage 2 index entry.)
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Conflict.Theirs">
            <summary>
             The index entry of the "theirs" (merge source) side of the
             conflict (the stage 3 index entry.)
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Conflict.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is
            equal to the current <see cref="T:LibGit2Sharp.Conflict"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with
            the current <see cref="T:LibGit2Sharp.Conflict"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal
            to the current <see cref="T:LibGit2Sharp.Conflict"/>; otherwise,
            false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Conflict.Equals(LibGit2Sharp.Conflict)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.Conflict"/>
            is equal to the current <see cref="T:LibGit2Sharp.Conflict"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.Conflict"/> to compare
            with the current <see cref="T:LibGit2Sharp.Conflict"/>.</param>
            <returns>true if the specified <see cref="T:LibGit2Sharp.Conflict"/> is equal
            to the current <see cref="T:LibGit2Sharp.Conflict"/>; otherwise,
            false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Conflict.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.Conflict.op_Equality(LibGit2Sharp.Conflict,LibGit2Sharp.Conflict)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.Conflict"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Conflict"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Conflict"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.Conflict.op_Inequality(LibGit2Sharp.Conflict,LibGit2Sharp.Conflict)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.Conflict"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Conflict"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Conflict"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.ConflictCollection">
            <summary>
             The collection of <see cref="T:LibGit2Sharp.Conflict"/>s in a
             <see cref="T:LibGit2Sharp.Repository"/> index due to a
             previously performed merge operation.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ConflictCollection.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ConflictCollection.Item(System.String)">
            <summary>
             Gets the <see cref="T:LibGit2Sharp.Conflict"/> for the
             specified relative path.
            </summary>
            <param name="path">The relative path to query</param>
            <returns>A <see cref="T:LibGit2Sharp.Conflict"/> that represents the conflict for this file.</returns>
        </member>
        <member name="P:LibGit2Sharp.ConflictCollection.ResolvedConflicts">
            <summary>
            Get the <see cref="T:LibGit2Sharp.IndexReucEntryCollection"/> that contains
            the list of conflicts that have been resolved.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ConflictCollection.Names">
            <summary>
            Get the <see cref="T:LibGit2Sharp.IndexNameEntryCollection"/> that contains
            the list of paths involved in rename conflicts.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ConflictCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.ConflictCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:LibGit2Sharp.RemoteUpdater">
            <summary>
            Exposes properties of a remote that can be updated.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RemoteUpdater.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RemoteUpdater.TagFetchMode">
            <summary>
            Set the default TagFetchMode value for the remote.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RemoteUpdater.Url">
            <summary>
            Sets the url defined for this <see cref="T:LibGit2Sharp.Remote"/>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RemoteUpdater.PushUrl">
            <summary>
            Sets the push url defined for this <see cref="T:LibGit2Sharp.Remote"/>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RemoteUpdater.FetchRefSpecs">
            <summary>
            Sets the list of <see cref="T:LibGit2Sharp.RefSpec"/>s defined for this <see cref="T:LibGit2Sharp.Remote"/> that are intended to
            be used during a Fetch operation
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RemoteUpdater.PushRefSpecs">
            <summary>
            Sets or gets the list of <see cref="T:LibGit2Sharp.RefSpec"/>s defined for this <see cref="T:LibGit2Sharp.Remote"/> that are intended to
            be used during a Push operation
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RemoveFromIndexException">
            <summary>
            The exception that is thrown when a file cannot be removed from the index.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RemoveFromIndexException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnmatchedPathException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RemoveFromIndexException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnmatchedPathException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.RemoveFromIndexException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.RemoveFromIndexException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.RemoveFromIndexException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnmatchedPathException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.RemoveFromIndexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnmatchedPathException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.GitLink">
            <summary>
            Represents a gitlink (a reference to a commit in another Git repository)
            </summary>
        </member>
        <member name="M:LibGit2Sharp.GitLink.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RewriteHistoryOptions">
            <summary>
            Options for a RewriteHistory operation.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RewriteHistoryOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.RewriteHistoryOptions"/> class.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RewriteHistoryOptions.BackupRefsNamespace">
            <summary>
            Namespace where rewritten references should be stored.
            (required; default: "refs/original/")
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RewriteHistoryOptions.CommitHeaderRewriter">
            <summary>
            Rewriter for commit metadata.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RewriteHistoryOptions.CommitParentsRewriter">
            <summary>
            Rewriter for mangling parent links.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RewriteHistoryOptions.CommitTreeRewriter">
            <summary>
            Rewriter for commit trees.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RewriteHistoryOptions.TagNameRewriter">
            <summary>
            Rewriter for tag names. This is called with
            (OldTag.Name, OldTag.IsAnnotated, OldTarget.Identifier).
            OldTarget.Identifier is either the SHA of a direct reference,
            or the canonical name of a symbolic reference.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RewriteHistoryOptions.PruneEmptyCommits">
            <summary>
            Empty commits should be removed while rewriting.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RewriteHistoryOptions.OnSucceeding">
            <summary>
            Action to exectute after rewrite succeeds,
            but before it is finalized.
            <para>
            An exception thrown here will rollback the operation.
            This is useful to inspect the new state of the repository
            and throw if you need to adjust and try again.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RewriteHistoryOptions.OnError">
            <summary>
            Action to execute if an error occurred during rewrite,
            before rollback of rewrite progress.
            Does not fire for exceptions thrown in <see cref="P:LibGit2Sharp.RewriteHistoryOptions.OnSucceeding" />.
            <para>
            This is useful to inspect the state of the repository
            at the time of the exception for troubleshooting.
            It is not meant to be used for general error handling;
            for that use <code>try</code>/<code>catch</code>.
            </para>
            <para>
            An exception thrown here will replace the original exception.
            You may want to pass the callback exception as an <code>innerException</code>.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RewriteHistoryOptions.PrettifyMessages">
            <summary>
            Specifies Commit message prettifying behavior during rewrite.
            NOTE: Prettifying may result in losing one or multiple lines in the commit message.
            As such it is recommended to leave this set to false.
            </summary>
            <value><c>true</c> if Commit messages are prettified; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:LibGit2Sharp.StashModifiers">
            <summary>
             Options controlling Stash behavior.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashModifiers.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashModifiers.KeepIndex">
            <summary>
            All changes already added to the index
            are left intact in the working directory
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashModifiers.IncludeUntracked">
            <summary>
            All untracked files are also stashed and then
            cleaned up from the working directory
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashModifiers.IncludeIgnored">
            <summary>
            All ignored files are also stashed and then
            cleaned up from the working directory
            </summary>
        </member>
        <member name="T:LibGit2Sharp.TreeEntryTargetType">
            <summary>
            Underlying type of the target a <see cref="T:LibGit2Sharp.TreeEntry"/>
            </summary>
        </member>
        <member name="F:LibGit2Sharp.TreeEntryTargetType.Blob">
            <summary>
            A file revision object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.TreeEntryTargetType.Tree">
            <summary>
            A tree object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.TreeEntryTargetType.GitLink">
            <summary>
            A pointer to a commit object in another repository.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.UnmatchedPathException">
            <summary>
            The exception that is thrown when an explicit path or a list of explicit paths could not be matched.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.UnmatchedPathException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnmatchedPathException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.UnmatchedPathException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnmatchedPathException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.UnmatchedPathException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnmatchedPathException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.UnmatchedPathException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnmatchedPathException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.UnmatchedPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnmatchedPathException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.ReflogCollection">
            <summary>
            The <see cref="T:LibGit2Sharp.ReflogCollection"/> is the reflog of a given <see cref="T:LibGit2Sharp.Reference"/>, as a enumerable of <see cref="T:LibGit2Sharp.ReflogEntry"/>.
            Reflog is a mechanism to record when the tip of a <see cref="T:LibGit2Sharp.Branch"/> is updated.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReflogCollection.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReflogCollection.#ctor(LibGit2Sharp.Repository,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.ReflogCollection"/> class.
            </summary>
            <param name="repo">The repo.</param>
            <param name="canonicalName">the canonical name of the <see cref="T:LibGit2Sharp.Reference"/> to retrieve reflog entries on.</param>
        </member>
        <member name="M:LibGit2Sharp.ReflogCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            <para>
              The enumerator returns the <see cref="T:LibGit2Sharp.ReflogEntry"/> by descending order (last reflog entry is returned first).
            </para>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReflogCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.MatchedPathsAggregator.OnGitDiffNotify(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            The delegate with a signature that matches the native diff git_diff_notify_cb function's signature.
            </summary>
            <param name="diffListSoFar">The diff list so far, before the delta is inserted.</param>
            <param name="deltaToAdd">The delta that is being diffed</param>
            <param name="matchedPathspec">The pathsec that matched the path of the diffed files.</param>
            <param name="payload">Payload object.</param>
        </member>
        <member name="T:LibGit2Sharp.Network">
            <summary>
            Provides access to network functionality for a repository.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Network.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Network.Remotes">
            <summary>
            Lookup and manage remotes in the repository.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Network.ListReferences(LibGit2Sharp.Remote)">
            <summary>
            List references in a <see cref="T:LibGit2Sharp.Remote"/> repository.
            <para>
            When the remote tips are ahead of the local ones, the retrieved
            <see cref="T:LibGit2Sharp.DirectReference"/>s may point to non existing
            <see cref="T:LibGit2Sharp.GitObject"/>s in the local repository. In that
            case, <see cref="P:LibGit2Sharp.DirectReference.Target"/> will return <c>null</c>.
            </para>
            </summary>
            <param name="remote">The <see cref="T:LibGit2Sharp.Remote"/> to list from.</param>
            <returns>The references in the <see cref="T:LibGit2Sharp.Remote"/> repository.</returns>
        </member>
        <member name="M:LibGit2Sharp.Network.ListReferences(LibGit2Sharp.Remote,LibGit2Sharp.Handlers.CredentialsHandler)">
            <summary>
            List references in a <see cref="T:LibGit2Sharp.Remote"/> repository.
            <para>
            When the remote tips are ahead of the local ones, the retrieved
            <see cref="T:LibGit2Sharp.DirectReference"/>s may point to non existing
            <see cref="T:LibGit2Sharp.GitObject"/>s in the local repository. In that
            case, <see cref="P:LibGit2Sharp.DirectReference.Target"/> will return <c>null</c>.
            </para>
            </summary>
            <param name="remote">The <see cref="T:LibGit2Sharp.Remote"/> to list from.</param>
            <param name="credentialsProvider">The <see cref="T:System.Func`1"/> used to connect to remote repository.</param>
            <returns>The references in the <see cref="T:LibGit2Sharp.Remote"/> repository.</returns>
        </member>
        <member name="M:LibGit2Sharp.Network.ListReferences(System.String)">
            <summary>
            List references in a remote repository.
            <para>
            When the remote tips are ahead of the local ones, the retrieved
            <see cref="T:LibGit2Sharp.DirectReference"/>s may point to non existing
            <see cref="T:LibGit2Sharp.GitObject"/>s in the local repository. In that
            case, <see cref="P:LibGit2Sharp.DirectReference.Target"/> will return <c>null</c>.
            </para>
            </summary>
            <param name="url">The url to list from.</param>
            <returns>The references in the remote repository.</returns>
        </member>
        <member name="M:LibGit2Sharp.Network.ListReferences(System.String,LibGit2Sharp.Handlers.CredentialsHandler)">
            <summary>
            List references in a remote repository.
            <para>
            When the remote tips are ahead of the local ones, the retrieved
            <see cref="T:LibGit2Sharp.DirectReference"/>s may point to non existing
            <see cref="T:LibGit2Sharp.GitObject"/>s in the local repository. In that
            case, <see cref="P:LibGit2Sharp.DirectReference.Target"/> will return <c>null</c>.
            </para>
            </summary>
            <param name="url">The url to list from.</param>
            <param name="credentialsProvider">The <see cref="T:System.Func`1"/> used to connect to remote repository.</param>
            <returns>The references in the remote repository.</returns>
        </member>
        <member name="M:LibGit2Sharp.Network.Fetch(LibGit2Sharp.Remote)">
            <summary>
            Fetch from the <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="remote">The remote to fetch</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Fetch(LibGit2Sharp.Remote,LibGit2Sharp.FetchOptions)">
            <summary>
            Fetch from the <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="remote">The remote to fetch</param>
            <param name="options"><see cref="T:LibGit2Sharp.FetchOptions"/> controlling fetch behavior</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Fetch(LibGit2Sharp.Remote,System.String)">
            <summary>
            Fetch from the <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="remote">The remote to fetch</param>
            <param name="logMessage">Message to use when updating the reflog.</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Fetch(LibGit2Sharp.Remote,LibGit2Sharp.FetchOptions,System.String)">
            <summary>
            Fetch from the <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="remote">The remote to fetch</param>
            <param name="options"><see cref="T:LibGit2Sharp.FetchOptions"/> controlling fetch behavior</param>
            <param name="logMessage">Message to use when updating the reflog.</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Fetch(LibGit2Sharp.Remote,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Fetch from the <see cref="T:LibGit2Sharp.Remote"/>, using custom refspecs.
            </summary>
            <param name="remote">The remote to fetch</param>
            <param name="refspecs">Refspecs to use, replacing the remote's fetch refspecs</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Fetch(LibGit2Sharp.Remote,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.FetchOptions)">
            <summary>
            Fetch from the <see cref="T:LibGit2Sharp.Remote"/>, using custom refspecs.
            </summary>
            <param name="remote">The remote to fetch</param>
            <param name="refspecs">Refspecs to use, replacing the remote's fetch refspecs</param>
            <param name="options"><see cref="T:LibGit2Sharp.FetchOptions"/> controlling fetch behavior</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Fetch(LibGit2Sharp.Remote,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Fetch from the <see cref="T:LibGit2Sharp.Remote"/>, using custom refspecs.
            </summary>
            <param name="remote">The remote to fetch</param>
            <param name="refspecs">Refspecs to use, replacing the remote's fetch refspecs</param>
            <param name="logMessage">Message to use when updating the reflog.</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Fetch(LibGit2Sharp.Remote,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.FetchOptions,System.String)">
            <summary>
            Fetch from the <see cref="T:LibGit2Sharp.Remote"/>, using custom refspecs.
            </summary>
            <param name="remote">The remote to fetch</param>
            <param name="refspecs">Refspecs to use, replacing the remote's fetch refspecs</param>
            <param name="options"><see cref="T:LibGit2Sharp.FetchOptions"/> controlling fetch behavior</param>
            <param name="logMessage">Message to use when updating the reflog.</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Fetch(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Fetch from a url with a set of fetch refspecs
            </summary>
            <param name="url">The url to fetch from</param>
            <param name="refspecs">The list of resfpecs to use</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Fetch(System.String,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.FetchOptions)">
            <summary>
            Fetch from a url with a set of fetch refspecs
            </summary>
            <param name="url">The url to fetch from</param>
            <param name="refspecs">The list of resfpecs to use</param>
            <param name="options"><see cref="T:LibGit2Sharp.FetchOptions"/> controlling fetch behavior</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Fetch(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Fetch from a url with a set of fetch refspecs
            </summary>
            <param name="url">The url to fetch from</param>
            <param name="refspecs">The list of resfpecs to use</param>
            <param name="logMessage">Message to use when updating the reflog.</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Fetch(System.String,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.FetchOptions,System.String)">
            <summary>
            Fetch from a url with a set of fetch refspecs
            </summary>
            <param name="url">The url to fetch from</param>
            <param name="refspecs">The list of resfpecs to use</param>
            <param name="options"><see cref="T:LibGit2Sharp.FetchOptions"/> controlling fetch behavior</param>
            <param name="logMessage">Message to use when updating the reflog.</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Push(LibGit2Sharp.Branch)">
            <summary>
            Push the specified branch to its tracked branch on the remote.
            </summary>
            <param name="branch">The branch to push.</param>
            <exception cref="T:LibGit2Sharp.LibGit2SharpException">Throws if either the Remote or the UpstreamBranchCanonicalName is not set.</exception>
        </member>
        <member name="M:LibGit2Sharp.Network.Push(LibGit2Sharp.Branch,LibGit2Sharp.PushOptions)">
            <summary>
            Push the specified branch to its tracked branch on the remote.
            </summary>
            <param name="branch">The branch to push.</param>
            <param name="pushOptions"><see cref="T:LibGit2Sharp.PushOptions"/> controlling push behavior</param>
            <exception cref="T:LibGit2Sharp.LibGit2SharpException">Throws if either the Remote or the UpstreamBranchCanonicalName is not set.</exception>
        </member>
        <member name="M:LibGit2Sharp.Network.Push(System.Collections.Generic.IEnumerable{LibGit2Sharp.Branch})">
            <summary>
            Push the specified branches to their tracked branches on the remote.
            </summary>
            <param name="branches">The branches to push.</param>
            <exception cref="T:LibGit2Sharp.LibGit2SharpException">Throws if either the Remote or the UpstreamBranchCanonicalName is not set.</exception>
        </member>
        <member name="M:LibGit2Sharp.Network.Push(System.Collections.Generic.IEnumerable{LibGit2Sharp.Branch},LibGit2Sharp.PushOptions)">
            <summary>
            Push the specified branches to their tracked branches on the remote.
            </summary>
            <param name="branches">The branches to push.</param>
            <param name="pushOptions"><see cref="T:LibGit2Sharp.PushOptions"/> controlling push behavior</param>
            <exception cref="T:LibGit2Sharp.LibGit2SharpException">Throws if either the Remote or the UpstreamBranchCanonicalName is not set.</exception>
        </member>
        <member name="M:LibGit2Sharp.Network.Push(LibGit2Sharp.Remote,System.String,System.String)">
            <summary>
            Push the objectish to the destination reference on the <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="remote">The <see cref="T:LibGit2Sharp.Remote"/> to push to.</param>
            <param name="objectish">The source objectish to push.</param>
            <param name="destinationSpec">The reference to update on the remote.</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Push(LibGit2Sharp.Remote,System.String,System.String,LibGit2Sharp.PushOptions)">
            <summary>
            Push the objectish to the destination reference on the <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="remote">The <see cref="T:LibGit2Sharp.Remote"/> to push to.</param>
            <param name="objectish">The source objectish to push.</param>
            <param name="destinationSpec">The reference to update on the remote.</param>
            <param name="pushOptions"><see cref="T:LibGit2Sharp.PushOptions"/> controlling push behavior</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Push(LibGit2Sharp.Remote,System.String)">
            <summary>
            Push specified reference to the <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="remote">The <see cref="T:LibGit2Sharp.Remote"/> to push to.</param>
            <param name="pushRefSpec">The pushRefSpec to push.</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Push(LibGit2Sharp.Remote,System.String,LibGit2Sharp.PushOptions)">
            <summary>
            Push specified reference to the <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="remote">The <see cref="T:LibGit2Sharp.Remote"/> to push to.</param>
            <param name="pushRefSpec">The pushRefSpec to push.</param>
            <param name="pushOptions"><see cref="T:LibGit2Sharp.PushOptions"/> controlling push behavior</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Push(LibGit2Sharp.Remote,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Push specified references to the <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="remote">The <see cref="T:LibGit2Sharp.Remote"/> to push to.</param>
            <param name="pushRefSpecs">The pushRefSpecs to push.</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Push(LibGit2Sharp.Remote,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.PushOptions)">
            <summary>
            Push specified references to the <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="remote">The <see cref="T:LibGit2Sharp.Remote"/> to push to.</param>
            <param name="pushRefSpecs">The pushRefSpecs to push.</param>
            <param name="pushOptions"><see cref="T:LibGit2Sharp.PushOptions"/> controlling push behavior</param>
        </member>
        <member name="M:LibGit2Sharp.Network.Pull(LibGit2Sharp.Signature,LibGit2Sharp.PullOptions)">
            <summary>
            Pull changes from the configured upstream remote and branch into the branch pointed at by HEAD.
            </summary>
            <param name="merger">If the merge is a non-fast forward merge that generates a merge commit, the <see cref="T:LibGit2Sharp.Signature"/> of who made the merge.</param>
            <param name="options">Specifies optional parameters controlling merge behavior of pull; if null, the defaults are used.</param>
        </member>
        <member name="P:LibGit2Sharp.Network.FetchHeads">
            <summary>
            The heads that have been updated during the last fetch.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ReflogEntry">
            <summary>
            As single entry of a <see cref="T:LibGit2Sharp.ReflogCollection"/>
            a <see cref="T:LibGit2Sharp.ReflogEntry"/> describes one single update on a particular reference
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReflogEntry.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReflogEntry.#ctor(LibGit2Sharp.Core.git_reflog_entry*)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.ReflogEntry"/> class.
            </summary>
            <param name="entryHandle">a <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to the reflog entry</param>
        </member>
        <member name="P:LibGit2Sharp.ReflogEntry.From">
            <summary>
            <see cref="T:LibGit2Sharp.ObjectId"/> targeted before the reference update described by this <see cref="T:LibGit2Sharp.ReflogEntry"/>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ReflogEntry.To">
            <summary>
            <see cref="T:LibGit2Sharp.ObjectId"/> targeted after the reference update described by this <see cref="T:LibGit2Sharp.ReflogEntry"/>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ReflogEntry.Committer">
            <summary>
            <see cref="T:LibGit2Sharp.Signature"/> of the committer of this reference update
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ReflogEntry.Message">
            <summary>
            the message assiocated to this reference update
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Stash">
            <summary>
             A Stash
             <para>A stash is a snapshot of the dirty state of the working directory (i.e. the modified tracked files and staged changes)</para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Stash.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Stash.WorkTree">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Commit"/> that contains to the captured content of the worktree when the
            stash was created.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Stash.Base">
            <summary>
            Gets the base <see cref="T:LibGit2Sharp.Commit"/> (i.e. the HEAD when the stash was
            created).
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Stash.Index">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Commit"/> that contains the captured content of the index when the stash was
            created.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Stash.Untracked">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Commit"/> that contains the list of either the untracked files, the ignored files, or both,
            depending on the <see cref="T:LibGit2Sharp.StashModifiers"/> options passed when the stash was created.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Stash.Message">
            <summary>
            Gets the message associated to this <see cref="T:LibGit2Sharp.Stash"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Stash.Shorten">
            <summary>
            Returns "stash@{i}", where i is the index of this <see cref="T:LibGit2Sharp.Stash"/>.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.StashCollection">
            <summary>
            The collection of <see cref="T:LibGit2Sharp.Stash"/>es in a <see cref="T:LibGit2Sharp.Repository"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.StashCollection.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.StashCollection.#ctor(LibGit2Sharp.Repository)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.StashCollection"/> class.
            </summary>
            <param name="repo">The repo.</param>
        </member>
        <member name="M:LibGit2Sharp.StashCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            <para>
              The enumerator returns the stashes by descending order (last stash is returned first).
            </para>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.StashCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:LibGit2Sharp.StashCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Stash"/> corresponding to the specified index (0 being the most recent one).
            </summary>
        </member>
        <member name="M:LibGit2Sharp.StashCollection.Add(LibGit2Sharp.Signature)">
            <summary>
            Creates a stash with the specified message.
            </summary>
            <param name="stasher">The <see cref="T:LibGit2Sharp.Signature"/> of the user who stashes </param>
            <returns>the newly created <see cref="T:LibGit2Sharp.Stash"/></returns>
        </member>
        <member name="M:LibGit2Sharp.StashCollection.Add(LibGit2Sharp.Signature,LibGit2Sharp.StashModifiers)">
            <summary>
            Creates a stash with the specified message.
            </summary>
            <param name="stasher">The <see cref="T:LibGit2Sharp.Signature"/> of the user who stashes </param>
            <param name="options">A combination of <see cref="T:LibGit2Sharp.StashModifiers"/> flags</param>
            <returns>the newly created <see cref="T:LibGit2Sharp.Stash"/></returns>
        </member>
        <member name="M:LibGit2Sharp.StashCollection.Add(LibGit2Sharp.Signature,System.String)">
            <summary>
            Creates a stash with the specified message.
            </summary>
            <param name="stasher">The <see cref="T:LibGit2Sharp.Signature"/> of the user who stashes </param>
            <param name="message">The message of the stash.</param>
            <returns>the newly created <see cref="T:LibGit2Sharp.Stash"/></returns>
        </member>
        <member name="M:LibGit2Sharp.StashCollection.Add(LibGit2Sharp.Signature,System.String,LibGit2Sharp.StashModifiers)">
            <summary>
            Creates a stash with the specified message.
            </summary>
            <param name="stasher">The <see cref="T:LibGit2Sharp.Signature"/> of the user who stashes </param>
            <param name="message">The message of the stash.</param>
            <param name="options">A combination of <see cref="T:LibGit2Sharp.StashModifiers"/> flags</param>
            <returns>the newly created <see cref="T:LibGit2Sharp.Stash"/></returns>
        </member>
        <member name="M:LibGit2Sharp.StashCollection.Apply(System.Int32,LibGit2Sharp.StashApplyOptions)">
            <summary>
            Applies a single stashed state from the stash list
            </summary>
            <param name="index">the index of the stash to remove (0 being the most recent one).</param>
            <param name="options">the options to use for checking out the stash.</param>
        </member>
        <member name="M:LibGit2Sharp.StashCollection.Apply(System.Int32)">
            <summary>
            Applies a single stashed state from the stash list using the default options.
            </summary>
            <param name="index">the index of the stash to remove (0 being the most recent one).</param>
        </member>
        <member name="M:LibGit2Sharp.StashCollection.Pop(System.Int32,LibGit2Sharp.StashApplyOptions)">
            <summary>
            Pops a single stashed state from the stash list
            </summary>
            <param name="index">the index of the stash to remove (0 being the most recent one).</param>
            <param name="options">the options to use for checking out the stash.</param>
        </member>
        <member name="M:LibGit2Sharp.StashCollection.Pop(System.Int32)">
            <summary>
            Pops a single stashed state from the stash list using the default options.
            </summary>
            <param name="index">the index of the stash to remove (0 being the most recent one).</param>
        </member>
        <member name="M:LibGit2Sharp.StashCollection.Remove(System.Int32)">
            <summary>
            Remove a single stashed state from the stash list.
            </summary>
            <param name="index">The index of the stash to remove (0 being the most recent one).</param>
        </member>
        <member name="T:LibGit2Sharp.ExplicitPathsOptions">
            <summary>
            Allows callers to specify how unmatched paths should be handled
            by operations such as Reset(), Compare(), Unstage(), ...
            <para>
              By passing these options, the passed paths will be treated as
              explicit paths, and NOT pathspecs containing globs.
            </para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ExplicitPathsOptions.#ctor">
            <summary>
            Associated paths will be treated as explicit paths.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ExplicitPathsOptions.ShouldFailOnUnmatchedPath">
            <summary>
            When set to true, the called operation will throw a <see cref="T:LibGit2Sharp.UnmatchedPathException"/> when an unmatched
            path is encountered.
            <para>
              Set to true by default.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ExplicitPathsOptions.OnUnmatchedPath">
            <summary>
            Sets a callback that will be called once for each unmatched path.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Submodule">
            <summary>
            A Submodule.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Submodule.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Submodule.Name">
            <summary>
            The name of the submodule.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Submodule.Path">
            <summary>
            The path of the submodule.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Submodule.Url">
            <summary>
            The URL of the submodule.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Submodule.HeadCommitId">
            <summary>
            The commit ID for this submodule in the current HEAD tree.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Submodule.IndexCommitId">
            <summary>
            The commit ID for this submodule in the index.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Submodule.WorkDirCommitId">
            <summary>
            The commit ID for this submodule in the current working directory.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Submodule.FetchRecurseSubmodulesRule">
             <summary>
             The fetchRecurseSubmodules rule for the submodule.
            
             Note that at this time, LibGit2Sharp does not honor this setting and the
             fetch functionality current ignores submodules.
             </summary>
        </member>
        <member name="P:LibGit2Sharp.Submodule.IgnoreRule">
            <summary>
            The ignore rule of the submodule.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Submodule.UpdateRule">
            <summary>
            The update rule of the submodule.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Submodule.RetrieveStatus">
            <summary>
            Retrieves the state of this submodule in the working directory compared to the staging area and the latest commit.
            </summary>
            <returns>The <see cref="T:LibGit2Sharp.SubmoduleStatus"/> of this submodule.</returns>
        </member>
        <member name="M:LibGit2Sharp.Submodule.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Submodule"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.Submodule"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Submodule"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Submodule.Equals(LibGit2Sharp.Submodule)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.Submodule"/> is equal to the current <see cref="T:LibGit2Sharp.Submodule"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.Submodule"/> to compare with the current <see cref="T:LibGit2Sharp.Submodule"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.Submodule"/> is equal to the current <see cref="T:LibGit2Sharp.Submodule"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Submodule.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.Submodule.ToString">
            <summary>
            Returns the <see cref="P:LibGit2Sharp.Submodule.Name"/>, a <see cref="T:System.String"/> representation of the current <see cref="T:LibGit2Sharp.Submodule"/>.
            </summary>
            <returns>The <see cref="P:LibGit2Sharp.Submodule.Name"/> that represents the current <see cref="T:LibGit2Sharp.Submodule"/>.</returns>
        </member>
        <member name="T:LibGit2Sharp.SubmoduleCollection">
            <summary>
            The collection of submodules in a <see cref="T:LibGit2Sharp.Repository"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SubmoduleCollection.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SubmoduleCollection.#ctor(LibGit2Sharp.Repository)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.SubmoduleCollection"/> class.
            </summary>
            <param name="repo">The repo.</param>
        </member>
        <member name="P:LibGit2Sharp.SubmoduleCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Submodule"/> with the specified name.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SubmoduleCollection.Init(System.String,System.Boolean)">
            <summary>
            Initialize specified submodule.
            <para>
            Existing entries in the config file for this submodule are not be
            modified unless <paramref name="overwrite"/> is true.
            </para>
            </summary>
            <param name="name">The name of the submodule to update.</param>
            <param name="overwrite">Overwrite existing entries.</param>
        </member>
        <member name="M:LibGit2Sharp.SubmoduleCollection.Update(System.String,LibGit2Sharp.SubmoduleUpdateOptions)">
            <summary>
            Update specified submodule.
            <para>
              This will:
              1) Optionally initialize the if it not already initialzed,
              2) clone the sub repository if it has not already been cloned, and
              3) checkout the commit ID for the submodule in the sub repository.
            </para>
            </summary>
            <param name="name">The name of the submodule to update.</param>
            <param name="options">Options controlling submodule udpate behavior and callbacks.</param>
        </member>
        <member name="M:LibGit2Sharp.SubmoduleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.SubmoduleCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:LibGit2Sharp.SubmoduleExtensions">
            <summary>
            Extensions related to submodules
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SubmoduleExtensions.IsUnmodified(LibGit2Sharp.SubmoduleStatus)">
            <summary>
            The submodule is unmodified.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SubmoduleExtensions.IsWorkingDirectoryDirty(LibGit2Sharp.SubmoduleStatus)">
            <summary>
            The submodule working directory is dirty.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.SubmoduleIgnore">
            <summary>
            Values that could be specified for how closely to examine the
            working directory when getting submodule status.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleIgnore.Reset">
            <summary>
            Reset to the last saved ignore rule.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleIgnore.None">
            <summary>
            Any change or untracked == dirty
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleIgnore.Untracked">
            <summary>
            Dirty if tracked files change
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleIgnore.Dirty">
            <summary>
            Only dirty if HEAD moved
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleIgnore.All">
            <summary>
            Never dirty
            </summary>
        </member>
        <member name="T:LibGit2Sharp.SubmoduleStatus">
            <summary>
            Calculated status of a submodule in the working directory considering the current <see cref="P:LibGit2Sharp.Repository.Index"/> and the <see cref="P:LibGit2Sharp.Repository.Head"/>.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.Unmodified">
            <summary>
            No submodule changes detected.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.InHead">
            <summary>
            Superproject head contains submodule.
            </summary>
            <remarks>Can be returned even if ignore is set to "ALL".</remarks>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.InIndex">
            <summary>
            Superproject index contains submodule.
            </summary>
            <remarks>Can be returned even if ignore is set to "ALL".</remarks>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.InConfig">
            <summary>
            Superproject gitmodules has submodule.
            </summary>
            <remarks>Can be returned even if ignore is set to "ALL".</remarks>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.InWorkDir">
            <summary>
            Superproject working directory has submodule.
            </summary>
            <remarks>Can be returned even if ignore is set to "ALL".</remarks>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.IndexAdded">
            <summary>
            Submodule is in index, but not in head.
            </summary>
            <remarks>Can be returned unless ignore is set to "ALL".</remarks>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.IndexDeleted">
            <summary>
            Submodule is in head, but not in index.
            </summary>
            <remarks>Can be returned unless ignore is set to "ALL".</remarks>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.IndexModified">
            <summary>
            Submodule in index and head don't match.
            </summary>
            <remarks>Can be returned unless ignore is set to "ALL".</remarks>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.WorkDirUninitialized">
            <summary>
            Submodule in working directory is not initialized.
            </summary>
            <remarks>Can be returned unless ignore is set to "ALL".</remarks>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.WorkDirAdded">
            <summary>
            Submodule is in working directory, but not index.
            </summary>
            <remarks>Can be returned unless ignore is set to "ALL".</remarks>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.WorkDirDeleted">
            <summary>
            Submodule is in index, but not working directory.
            </summary>
            <remarks>Can be returned unless ignore is set to "ALL".</remarks>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.WorkDirModified">
            <summary>
            Submodule in index and working directory head don't match.
            </summary>
            <remarks>Can be returned unless ignore is set to "ALL".</remarks>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.WorkDirFilesIndexDirty">
            <summary>
            Submodule working directory index is dirty.
            </summary>
            <remarks>Can only be returned if ignore is "NONE" or "UNTRACKED".</remarks>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.WorkDirFilesModified">
            <summary>
            Submodule working directory has modified files.
            </summary>
            <remarks>Can only be returned if ignore is "NONE" or "UNTRACKED".</remarks>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleStatus.WorkDirFilesUntracked">
            <summary>
            Working directory contains untracked files.
            </summary>
            <remarks>Can only be returned if ignore is "NONE".</remarks>
        </member>
        <member name="T:LibGit2Sharp.SubmoduleUpdate">
            <summary>
            Submodule update rule options.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleUpdate.Reset">
            <summary>
            Reset to the last saved update rule.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleUpdate.Unspecified">
            <summary>
            Only used when you don't want to specify any particular update
            rule.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleUpdate.Checkout">
            <summary>
            This is the default - checkout the commit recorded in the superproject.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleUpdate.Rebase">
            <summary>
            Rebase the current branch of the submodule onto the commit recorded in the superproject.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleUpdate.Merge">
            <summary>
            Merge the commit recorded in the superproject into the current branch of the submodule.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SubmoduleUpdate.None">
            <summary>
            Do not update the submodule.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.UnmergedIndexEntriesException">
            <summary>
            The exception that is thrown when an operation that requires a fully merged index
            is performed against an index with unmerged entries
            </summary>
        </member>
        <member name="M:LibGit2Sharp.UnmergedIndexEntriesException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnmergedIndexEntriesException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.UnmergedIndexEntriesException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnmergedIndexEntriesException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.UnmergedIndexEntriesException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnmergedIndexEntriesException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.UnmergedIndexEntriesException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnmergedIndexEntriesException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.UnmergedIndexEntriesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UnmergedIndexEntriesException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.Commit">
            <summary>
            A Commit
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Commit.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.Item(System.String)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.TreeEntry"/> pointed at by the <paramref name="relativePath"/> in the <see cref="P:LibGit2Sharp.Commit.Tree"/>.
            </summary>
            <param name="relativePath">Path to the <see cref="T:LibGit2Sharp.TreeEntry"/> from the tree in this <see cref="T:LibGit2Sharp.Commit"/></param>
            <returns><c>null</c> if nothing has been found, the <see cref="T:LibGit2Sharp.TreeEntry"/> otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.Commit.Message">
            <summary>
            Gets the commit message.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.MessageShort">
            <summary>
            Gets the short commit message which is usually the first line of the commit.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.Encoding">
            <summary>
            Gets the encoding of the message.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.Author">
            <summary>
            Gets the author of this commit.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.Committer">
            <summary>
            Gets the committer.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.Tree">
            <summary>
            Gets the Tree associated to this commit.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.Parents">
            <summary>
            Gets the parents of this commit. This property is lazy loaded and can throw an exception if the commit no longer exists in the repo.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.Notes">
            <summary>
            Gets the notes of this commit.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Commit.PrettifyMessage(System.String,System.Char)">
            <summary>
            Prettify a commit message
            <para>
            Remove comment lines and trailing lines
            </para>
            </summary>
            <returns>The prettified message</returns>
            <param name="message">The message to prettify.</param>
            <param name="commentChar">Comment character. Lines starting with it will be removed</param>
        </member>
        <member name="M:LibGit2Sharp.Commit.ExtractSignature(LibGit2Sharp.Repository,LibGit2Sharp.ObjectId,System.String)">
            <summary>
            Extract the signature data from this commit
            </summary>
            <returns>The signature and the signed data</returns>
            <param name="repo">The repository in which the object lives</param>
            <param name="id">The commit to extract the signature from</param>
            <param name="field">The header field which contains the signature; use null for the default of "gpgsig"</param>
        </member>
        <member name="M:LibGit2Sharp.Commit.ExtractSignature(LibGit2Sharp.Repository,LibGit2Sharp.ObjectId)">
            <summary>
            Extract the signature data from this commit
            <para>
            The overload uses the default header field "gpgsig"
            </para>
            </summary>
            <returns>The signature and the signed data</returns>
            <param name="repo">The repository in which the object lives</param>
            <param name="id">The commit to extract the signature from</param>
        </member>
        <member name="M:LibGit2Sharp.Commit.CreateBuffer(LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.String,LibGit2Sharp.Tree,System.Collections.Generic.IEnumerable{LibGit2Sharp.Commit},System.Boolean,System.Nullable{System.Char})">
            <summary>
            Create a commit in-memory
            <para>
            Prettifing the message includes:
            * Removing empty lines from the beginning and end.
            * Removing trailing spaces from every line.
            * Turning multiple consecutive empty lines between paragraphs into just one empty line.
            * Ensuring the commit message ends with a newline.
            * Removing every line starting with the <paramref name="commentChar"/>.
            </para>
            </summary>
            <param name="author">The <see cref="T:LibGit2Sharp.Signature"/> of who made the change.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Signature"/> of who added the change to the repository.</param>
            <param name="message">The description of why a change was made to the repository.</param>
            <param name="tree">The <see cref="P:LibGit2Sharp.Commit.Tree"/> of the <see cref="T:LibGit2Sharp.Commit"/> to be created.</param>
            <param name="parents">The parents of the <see cref="T:LibGit2Sharp.Commit"/> to be created.</param>
            <param name="prettifyMessage">True to prettify the message, or false to leave it as is.</param>
            <param name="commentChar">When non null, lines starting with this character will be stripped if prettifyMessage is true.</param>
            <returns>The contents of the commit object.</returns>
        </member>
        <member name="T:LibGit2Sharp.CommitLog">
            <summary>
            A log of commits in a <see cref="T:LibGit2Sharp.Repository"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.#ctor(LibGit2Sharp.Repository)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.CommitLog"/> class.
            The commits will be enumerated according in reverse chronological order.
            </summary>
            <param name="repo">The repository.</param>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.#ctor(LibGit2Sharp.Repository,LibGit2Sharp.CommitFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.CommitLog"/> class.
            </summary>
            <param name="repo">The repository.</param>
            <param name="queryFilter">The filter to use in querying commits</param>
        </member>
        <member name="P:LibGit2Sharp.CommitLog.SortedBy">
            <summary>
            Gets the current sorting strategy applied when enumerating the log
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the log.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the log.</returns>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the log.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the log.</returns>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.QueryBy(LibGit2Sharp.CommitFilter)">
            <summary>
            Returns the list of commits of the repository matching the specified <paramref name="filter"/>.
            </summary>
            <param name="filter">The options used to control which commits will be returned.</param>
            <returns>A list of commits, ready to be enumerated.</returns>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.QueryBy(System.String)">
            <summary>
            Returns the list of commits of the repository representing the history of a file beyond renames.
            </summary>
            <param name="path">The file's path.</param>
            <returns>A list of file history entries, ready to be enumerated.</returns>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.QueryBy(System.String,LibGit2Sharp.FollowFilter)">
            <summary>
            Returns the list of commits of the repository representing the history of a file beyond renames.
            </summary>
            <param name="path">The file's path.</param>
            <param name="filter">The options used to control which commits will be returned.</param>
            <returns>A list of file history entries, ready to be enumerated.</returns>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.QueryBy(System.String,LibGit2Sharp.CommitFilter)">
            <summary>
            Returns the list of commits of the repository representing the history of a file beyond renames.
            </summary>
            <param name="path">The file's path.</param>
            <param name="filter">The options used to control which commits will be returned.</param>
            <returns>A list of file history entries, ready to be enumerated.</returns>
        </member>
        <member name="T:LibGit2Sharp.MergeBaseFindingStrategy">
            <summary>
            Determines the finding strategy of merge base.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.MergeBaseFindingStrategy.Standard">
            <summary>
            Compute the best common ancestor between some commits to use in a three-way merge.
            <para>
            When more than two commits are provided, the computation is performed between the first commit and a hypothetical merge commit across all the remaining commits.
            </para>
            </summary>
        </member>
        <member name="F:LibGit2Sharp.MergeBaseFindingStrategy.Octopus">
            <summary>
            Compute the best common ancestor of all supplied commits, in preparation for an n-way merge.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Configuration">
            <summary>
            Provides access to configuration variables for a repository.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Configuration.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Configuration.BuildFrom(System.String)">
            <summary>
            Access configuration values without a repository.
            <para>
              Generally you want to access configuration via an instance of <see cref="T:LibGit2Sharp.Repository"/> instead.
            </para>
            <para>
              <paramref name="repositoryConfigurationFileLocation"/> can either contains a path to a file or a directory. In the latter case,
              this can be the working directory, the .git directory or the directory containing a bare repository.
            </para>
            </summary>
            <param name="repositoryConfigurationFileLocation">Path to an existing Repository configuration file.</param>
            <returns>An instance of <see cref="T:LibGit2Sharp.Configuration"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.BuildFrom(System.String,System.String)">
            <summary>
            Access configuration values without a repository.
            <para>
              Generally you want to access configuration via an instance of <see cref="T:LibGit2Sharp.Repository"/> instead.
            </para>
            <para>
              <paramref name="repositoryConfigurationFileLocation"/> can either contains a path to a file or a directory. In the latter case,
              this can be the working directory, the .git directory or the directory containing a bare repository.
            </para>
            </summary>
            <param name="repositoryConfigurationFileLocation">Path to an existing Repository configuration file.</param>
            <param name="globalConfigurationFileLocation">Path to a Global configuration file. If null, the default path for a Global configuration file will be probed.</param>
            <returns>An instance of <see cref="T:LibGit2Sharp.Configuration"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.BuildFrom(System.String,System.String,System.String)">
            <summary>
            Access configuration values without a repository.
            <para>
              Generally you want to access configuration via an instance of <see cref="T:LibGit2Sharp.Repository"/> instead.
            </para>
            <para>
              <paramref name="repositoryConfigurationFileLocation"/> can either contains a path to a file or a directory. In the latter case,
              this can be the working directory, the .git directory or the directory containing a bare repository.
            </para>
            </summary>
            <param name="repositoryConfigurationFileLocation">Path to an existing Repository configuration file.</param>
            <param name="globalConfigurationFileLocation">Path to a Global configuration file. If null, the default path for a Global configuration file will be probed.</param>
            <param name="xdgConfigurationFileLocation">Path to a XDG configuration file. If null, the default path for a XDG configuration file will be probed.</param>
            <returns>An instance of <see cref="T:LibGit2Sharp.Configuration"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.BuildFrom(System.String,System.String,System.String,System.String)">
            <summary>
            Access configuration values without a repository.
            <para>
              Generally you want to access configuration via an instance of <see cref="T:LibGit2Sharp.Repository"/> instead.
            </para>
            <para>
              <paramref name="repositoryConfigurationFileLocation"/> can either contains a path to a file or a directory. In the latter case,
              this can be the working directory, the .git directory or the directory containing a bare repository.
            </para>
            </summary>
            <param name="repositoryConfigurationFileLocation">Path to an existing Repository configuration file.</param>
            <param name="globalConfigurationFileLocation">Path to a Global configuration file. If null, the default path for a Global configuration file will be probed.</param>
            <param name="xdgConfigurationFileLocation">Path to a XDG configuration file. If null, the default path for a XDG configuration file will be probed.</param>
            <param name="systemConfigurationFileLocation">Path to a System configuration file. If null, the default path for a System configuration file will be probed.</param>
            <returns>An instance of <see cref="T:LibGit2Sharp.Configuration"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.HasConfig(LibGit2Sharp.ConfigurationLevel)">
            <summary>
            Determines which configuration file has been found.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            Saves any open configuration files.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Unset(System.String)">
            <summary>
            Unset a configuration variable (key and value) in the local configuration.
            </summary>
            <param name="key">The key to unset.</param>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Unset(System.String,LibGit2Sharp.ConfigurationLevel)">
            <summary>
            Unset a configuration variable (key and value).
            </summary>
            <param name="key">The key to unset.</param>
            <param name="level">The configuration file which should be considered as the target of this operation</param>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Get``1(System.String[])">
             <summary>
             Get a configuration value for the given key parts.
             <para>
               For example in order to get the value for this in a .git\config file:
            
               <code>
               [core]
               bare = true
               </code>
            
               You would call:
            
               <code>
               bool isBare = repo.Config.Get&lt;bool&gt;(new []{ "core", "bare" }).Value;
               </code>
             </para>
             </summary>
             <typeparam name="T">The configuration value type</typeparam>
             <param name="keyParts">The key parts</param>
             <returns>The <see cref="T:LibGit2Sharp.ConfigurationEntry`1"/>, or null if not set</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Get``1(System.String,System.String,System.String)">
             <summary>
             Get a configuration value for the given key parts.
             <para>
               For example in order to get the value for this in a .git\config file:
            
               <code>
               [difftool "kdiff3"]
                 path = c:/Program Files/KDiff3/kdiff3.exe
               </code>
            
               You would call:
            
               <code>
               string where = repo.Config.Get&lt;string&gt;("difftool", "kdiff3", "path").Value;
               </code>
             </para>
             </summary>
             <typeparam name="T">The configuration value type</typeparam>
             <param name="firstKeyPart">The first key part</param>
             <param name="secondKeyPart">The second key part</param>
             <param name="thirdKeyPart">The third key part</param>
             <returns>The <see cref="T:LibGit2Sharp.ConfigurationEntry`1"/>, or null if not set</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Get``1(System.String)">
             <summary>
             Get a configuration value for a key. Keys are in the form 'section.name'.
             <para>
                The same escalation logic than in git.git will be used when looking for the key in the config files:
                   - local: the Git file in the current repository
                   - global: the Git file specific to the current interactive user (usually in `$HOME/.gitconfig`)
                   - xdg: another Git file specific to the current interactive user (usually in `$HOME/.config/git/config`)
                   - system: the system-wide Git file
            
               The first occurence of the key will be returned.
             </para>
             <para>
               For example in order to get the value for this in a .git\config file:
            
               <code>
               [core]
               bare = true
               </code>
            
               You would call:
            
               <code>
               bool isBare = repo.Config.Get&lt;bool&gt;("core.bare").Value;
               </code>
             </para>
             </summary>
             <typeparam name="T">The configuration value type</typeparam>
             <param name="key">The key</param>
             <returns>The <see cref="T:LibGit2Sharp.ConfigurationEntry`1"/>, or null if not set</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Get``1(System.String,LibGit2Sharp.ConfigurationLevel)">
             <summary>
             Get a configuration value for a key. Keys are in the form 'section.name'.
             <para>
               For example in order to get the value for this in a .git\config file:
            
               <code>
               [core]
               bare = true
               </code>
            
               You would call:
            
               <code>
               bool isBare = repo.Config.Get&lt;bool&gt;("core.bare").Value;
               </code>
             </para>
             </summary>
             <typeparam name="T">The configuration value type</typeparam>
             <param name="key">The key</param>
             <param name="level">The configuration file into which the key should be searched for</param>
             <returns>The <see cref="T:LibGit2Sharp.ConfigurationEntry`1"/>, or null if not set</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.GetValueOrDefault``1(System.String)">
            <summary>
            Get a configuration value for the given key.
            </summary>
            <typeparam name="T">The configuration value type.</typeparam>
            <param name="key">The key</param>
            <returns>The configuration value, or the default value for the selected <see typeparamref="T"/>if not found</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.GetValueOrDefault``1(System.String,``0)">
            <summary>
            Get a configuration value for the given key,
            or <paramref name="defaultValue" /> if the key is not set.
            </summary>
            <typeparam name="T">The configuration value type.</typeparam>
            <param name="key">The key</param>
            <param name="defaultValue">The default value if the key is not set.</param>
            <returns>The configuration value, or the default value</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.GetValueOrDefault``1(System.String,LibGit2Sharp.ConfigurationLevel)">
            <summary>
            Get a configuration value for the given key
            </summary>
            <typeparam name="T">The configuration value type.</typeparam>
            <param name="key">The key.</param>
            <param name="level">The configuration file into which the key should be searched for.</param>
            <returns>The configuration value, or the default value for <see typeparamref="T"/> if not found</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.GetValueOrDefault``1(System.String,LibGit2Sharp.ConfigurationLevel,``0)">
            <summary>
            Get a configuration value for the given key,
            or <paramref name="defaultValue" /> if the key is not set.
            </summary>
            <typeparam name="T">The configuration value type.</typeparam>
            <param name="key">The key.</param>
            <param name="level">The configuration file into which the key should be searched for.</param>
            <param name="defaultValue">The selector used to generate a default value if the key is not set.</param>
            <returns>The configuration value, or the default value.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.GetValueOrDefault``1(System.String[])">
            <summary>
            Get a configuration value for the given key parts
            </summary>
            <typeparam name="T">The configuration value type.</typeparam>
            <param name="keyParts">The key parts.</param>
            <returns>The configuration value, or the default value for<see typeparamref="T"/> if not found</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.GetValueOrDefault``1(System.String[],``0)">
            <summary>
            Get a configuration value for the given key parts,
            or <paramref name="defaultValue" /> if the key is not set.
            </summary>
            <typeparam name="T">The configuration value type.</typeparam>
            <param name="keyParts">The key parts.</param>
            <param name="defaultValue">The default value if the key is not set.</param>
            <returns>The configuration value, or the default value.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.GetValueOrDefault``1(System.String,System.String,System.String)">
            <summary>
            Get a configuration value for the given key parts.
            </summary>
            <typeparam name="T">The configuration value type.</typeparam>
            <param name="firstKeyPart">The first key part.</param>
            <param name="secondKeyPart">The second key part.</param>
            <param name="thirdKeyPart">The third key part.</param>
            <returns>The configuration value, or the default value for the selected <see typeparamref="T"/> if not found</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.GetValueOrDefault``1(System.String,System.String,System.String,``0)">
            <summary>
            Get a configuration value for the given key parts,
            or <paramref name="defaultValue" /> if the key is not set.
            </summary>
            <typeparam name="T">The configuration value type.</typeparam>
            <param name="firstKeyPart">The first key part.</param>
            <param name="secondKeyPart">The second key part.</param>
            <param name="thirdKeyPart">The third key part.</param>
            <param name="defaultValue">The default value if the key is not set.</param>
            <returns>The configuration value, or the default.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.GetValueOrDefault``1(System.String,System.Func{``0})">
            <summary>
            Get a configuration value for the given key,
            or a value generated by <paramref name="defaultValueSelector" />
            if the key is not set.
            </summary>
            <typeparam name="T">The configuration value type.</typeparam>
            <param name="key">The key</param>
            <param name="defaultValueSelector">The selector used to generate a default value if the key is not set.</param>
            <returns>The configuration value, or a generated default.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.GetValueOrDefault``1(System.String,LibGit2Sharp.ConfigurationLevel,System.Func{``0})">
            <summary>
            Get a configuration value for the given key,
            or a value generated by <paramref name="defaultValueSelector" />
            if the key is not set.
            </summary>
            <typeparam name="T">The configuration value type.</typeparam>
            <param name="key">The key.</param>
            <param name="level">The configuration file into which the key should be searched for.</param>
            <param name="defaultValueSelector">The selector used to generate a default value if the key is not set.</param>
            <returns>The configuration value, or a generated default.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.GetValueOrDefault``1(System.String[],System.Func{``0})">
            <summary>
            Get a configuration value for the given key parts,
            or a value generated by <paramref name="defaultValueSelector" />
            if the key is not set.
            </summary>
            <typeparam name="T">The configuration value type.</typeparam>
            <param name="keyParts">The key parts.</param>
            <param name="defaultValueSelector">The selector used to generate a default value if the key is not set.</param>
            <returns>The configuration value, or a generated default.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.GetValueOrDefault``1(System.String,System.String,System.String,System.Func{``0})">
            <summary>
            Get a configuration value for the given key parts,
            or a value generated by <paramref name="defaultValueSelector" />
            if the key is not set.
            </summary>
            <typeparam name="T">The configuration value type.</typeparam>
            <param name="firstKeyPart">The first key part.</param>
            <param name="secondKeyPart">The second key part.</param>
            <param name="thirdKeyPart">The third key part.</param>
            <param name="defaultValueSelector">The selector used to generate a default value if the key is not set.</param>
            <returns>The configuration value, or a generated default.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Set``1(System.String,``0)">
             <summary>
             Set a configuration value for a key in the local configuration. Keys are in the form 'section.name'.
             <para>
               For example in order to set the value for this in a .git\config file:
            
               [test]
               boolsetting = true
            
               You would call:
            
               repo.Config.Set("test.boolsetting", true);
             </para>
             </summary>
             <typeparam name="T">The configuration value type</typeparam>
             <param name="key">The key parts</param>
             <param name="value">The value</param>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Set``1(System.String,``0,LibGit2Sharp.ConfigurationLevel)">
             <summary>
             Set a configuration value for a key. Keys are in the form 'section.name'.
             <para>
               For example in order to set the value for this in a .git\config file:
            
               [test]
               boolsetting = true
            
               You would call:
            
               repo.Config.Set("test.boolsetting", true);
             </para>
             </summary>
             <typeparam name="T">The configuration value type</typeparam>
             <param name="key">The key parts</param>
             <param name="value">The value</param>
             <param name="level">The configuration file which should be considered as the target of this operation</param>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Find(System.String)">
            <summary>
            Find configuration entries matching <paramref name="regexp"/>.
            </summary>
            <param name="regexp">A regular expression.</param>
            <returns>Matching entries.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Find(System.String,LibGit2Sharp.ConfigurationLevel)">
            <summary>
            Find configuration entries matching <paramref name="regexp"/>.
            </summary>
            <param name="regexp">A regular expression.</param>
            <param name="level">The configuration file into which the key should be searched for.</param>
            <returns>Matching entries.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the configuration entries.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the configuration entries.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.BuildSignature(System.DateTimeOffset)">
            <summary>
            Builds a <see cref="T:LibGit2Sharp.Signature"/> based on current configuration. If it is not found or
            some configuration is missing, <code>null</code> is returned.
            <para>
               The same escalation logic than in git.git will be used when looking for the key in the config files:
                  - local: the Git file in the current repository
                  - global: the Git file specific to the current interactive user (usually in `$HOME/.gitconfig`)
                  - xdg: another Git file specific to the current interactive user (usually in `$HOME/.config/git/config`)
                  - system: the system-wide Git file
            </para>
            </summary>
            <param name="now">The timestamp to use for the <see cref="T:LibGit2Sharp.Signature"/>.</param>
            <returns>The signature or null if no user identity can be found in the configuration.</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.WithinTransaction(System.Action)">
             <summary>
             Perform a series of actions within a transaction.
            
             The configuration will be locked during this function and the changes will be committed at the end. These
             changes will not be visible in the configuration until the end of this method.
            
             If the action throws an exception, the changes will be rolled back.
             </summary>
             <param name="action">The code to run under the transaction</param>
        </member>
        <member name="T:LibGit2Sharp.ConfigurationEntry`1">
            <summary>
            The full representation of a config option.
            </summary>
            <typeparam name="T">The configuration value type</typeparam>
        </member>
        <member name="P:LibGit2Sharp.ConfigurationEntry`1.Key">
            <summary>
            The fully-qualified option name.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ConfigurationEntry`1.Value">
            <summary>
            The option value.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ConfigurationEntry`1.Level">
            <summary>
            The origin store.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ConfigurationEntry`1.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ConfigurationEntry`1.#ctor(System.String,`0,LibGit2Sharp.ConfigurationLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.ConfigurationEntry`1"/> class with a given key and value
            </summary>
            <param name="key">The option name</param>
            <param name="value">The option value</param>
            <param name="level">The origin store</param>
        </member>
        <member name="T:LibGit2Sharp.ContentChanges">
            <summary>
            Holds the changes between two <see cref="T:LibGit2Sharp.Blob"/>s.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ContentChanges.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ContentChanges.LinesAdded">
            <summary>
            The number of lines added.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ContentChanges.LinesDeleted">
            <summary>
            The number of lines deleted.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ContentChanges.Patch">
            <summary>
            The patch corresponding to these changes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ContentChanges.IsBinaryComparison">
            <summary>
            Determines if at least one side of the comparison holds binary content.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.InvalidSpecificationException">
            <summary>
            The exception that is thrown when a provided specification is bad. This
            can happen if the provided specification is syntactically incorrect, or
            if the spec refers to an object of an incorrect type (e.g. asking to
            create a branch from a blob, or peeling a blob to a commit).
            </summary>
        </member>
        <member name="M:LibGit2Sharp.InvalidSpecificationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.InvalidSpecificationException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.InvalidSpecificationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.InvalidSpecificationException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.InvalidSpecificationException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.InvalidSpecificationException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.InvalidSpecificationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.InvalidSpecificationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.InvalidSpecificationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.InvalidSpecificationException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.Credentials">
            <summary>
            Class that holds credentials for remote repository access.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Credentials.GitCredentialHandler(System.IntPtr@)">
            <summary>
            Callback to acquire a credential object.
            </summary>
            <param name="cred">The newly created credential object.</param>
            <returns>0 for success, &lt; 0 to indicate an error, &gt; 0 to indicate no credential was acquired.</returns>
        </member>
        <member name="T:LibGit2Sharp.DiffTargets">
            <summary>
            The targets of a Tree based diff comparison.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DiffTargets.Index">
            <summary>
            The repository index.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DiffTargets.WorkingDirectory">
            <summary>
            The working directory.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.FetchHead">
            <summary>
            Represents a local reference data from a remote repository which
            has been retreived through a Fetch process.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.FetchHead.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.FetchHead.Shorten">
            <summary>
            Returns "FETCH_HEAD[i]", where i is the index of this fetch head.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FetchHead.RemoteCanonicalName">
            <summary>
            Gets the canonical name of the reference this <see cref="T:LibGit2Sharp.FetchHead"/>
            points to in the remote repository it's been fetched from.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FetchHead.Target">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.GitObject"/> that this fetch head points to.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FetchHead.Url">
            <summary>
            The URL of the remote repository this <see cref="T:LibGit2Sharp.FetchHead"/>
            has been built from.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.FetchHead.ForMerge">
            <summary>
            Determines if this fetch head entry has been explicitly fetched.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Handlers.ProgressHandler">
            <summary>
            Delegate definition to handle Progress callback.
            Returns the text as reported by the server. The text
            in the serverProgressOutput parameter is not delivered
            in any particular units (i.e. not necessarily delivered
            as whole lines) and is likely to be chunked as partial lines.
            </summary>
            <param name="serverProgressOutput">text reported by the server.
            Text can be chunked at arbitrary increments (i.e. can be composed
            of a partial line of text).</param>
            <returns>True to continue, false to cancel.</returns>
        </member>
        <member name="T:LibGit2Sharp.Handlers.UpdateTipsHandler">
            <summary>
            Delegate definition to handle UpdateTips callback.
            </summary>
            <param name="referenceName">Name of the updated reference.</param>
            <param name="oldId">Old ID of the reference.</param>
            <param name="newId">New ID of the reference.</param>
            <returns>True to continue, false to cancel.</returns>
        </member>
        <member name="T:LibGit2Sharp.Handlers.CredentialsHandler">
            <summary>
            Delegate definition for the credentials retrieval callback
            </summary>
            <param name="url">The url</param>
            <param name="usernameFromUrl">Username which was extracted from the url, if any</param>
            <param name="types">Credential types which the server accepts</param>
        </member>
        <member name="T:LibGit2Sharp.Handlers.CertificateCheckHandler">
            <summary>
            Delegate definition for the certificate validation
            </summary>
            <param name="certificate">The certificate which the server sent</param>
            <param name="host">The hostname which we tried to connect to</param>
            <param name="valid">Whether libgit2 thinks this certificate is valid</param>
            <returns>True to continue, false to cancel</returns>
        </member>
        <member name="T:LibGit2Sharp.Handlers.TransferProgressHandler">
            <summary>
            Delegate definition for transfer progress callback.
            </summary>
            <param name="progress">The <see cref="T:LibGit2Sharp.TransferProgress"/> object containing progress information.</param>
            <returns>True to continue, false to cancel.</returns>
        </member>
        <member name="T:LibGit2Sharp.Handlers.RepositoryOperationStarting">
            <summary>
            Delegate definition to indicate that a repository is about to be operated on.
            (In the context of a recursive operation).
            </summary>
            <param name="context">Context on the repository that is being operated on.</param>
            <returns>true to continue, false to cancel.</returns>
        </member>
        <member name="T:LibGit2Sharp.Handlers.RepositoryOperationCompleted">
            <summary>
            Delegate definition to indicate that an operation is done in a repository.
            (In the context of a recursive operation).
            </summary>
            <param name="context">Context on the repository that is being operated on.</param>
        </member>
        <member name="T:LibGit2Sharp.Handlers.PushTransferProgressHandler">
            <summary>
            Delegate definition for callback reporting push network progress.
            </summary>
            <param name="current">The current number of objects sent to server.</param>
            <param name="total">The total number of objects to send to the server.</param>
            <param name="bytes">The number of bytes sent to the server.</param>
            <returns>True to continue, false to cancel.</returns>
        </member>
        <member name="T:LibGit2Sharp.Handlers.PackBuilderProgressHandler">
            <summary>
            Delegate definition for callback reporting pack builder progress.
            </summary>
            <param name="stage">The current stage progress is being reported for.</param>
            <param name="current">The current number of objects processed in this this stage.</param>
            <param name="total">The total number of objects to process for the current stage.</param>
            <returns>True to continue, false to cancel.</returns>
        </member>
        <member name="T:LibGit2Sharp.Handlers.PrePushHandler">
            <summary>
            Provides information about what updates will be performed before a push occurs
            </summary>
            <param name="updates">List of updates about to be performed via push</param>
            <returns>True to continue, false to cancel.</returns>
        </member>
        <member name="T:LibGit2Sharp.Handlers.PushStatusErrorHandler">
            <summary>
            Delegate definition to handle reporting errors when updating references on the remote.
            </summary>
            <param name="pushStatusErrors">The reference name and error from the server.</param>
        </member>
        <member name="T:LibGit2Sharp.Handlers.CheckoutProgressHandler">
            <summary>
            Delegate definition for checkout progress callback.
            </summary>
            <param name="path">Path of the updated file.</param>
            <param name="completedSteps">Number of completed steps.</param>
            <param name="totalSteps">Total number of steps.</param>
        </member>
        <member name="T:LibGit2Sharp.Handlers.CheckoutNotifyHandler">
            <summary>
            Delegate definition for checkout notification callback.
            </summary>
            <param name="path">The path the callback corresponds to.</param>
            <param name="notifyFlags">The checkout notification type.</param>
            <returns>True to continue checkout operation; false to cancel checkout operation.</returns>
        </member>
        <member name="T:LibGit2Sharp.Handlers.UnmatchedPathHandler">
            <summary>
            Delegate definition for unmatched path callback.
            <para>
              This callback will be called to notify the caller of unmatched path.
            </para>
            </summary>
            <param name="unmatchedPath">The unmatched path.</param>
        </member>
        <member name="T:LibGit2Sharp.Handlers.RemoteRenameFailureHandler">
            <summary>
            Delegate definition for remote rename failure callback.
            <para>
              This callback will be called to notify the caller of fetch refspecs
              that haven't been automatically updated and need potential manual tweaking.
            </para>
            </summary>
            <param name="problematicRefspec">The refspec which didn't match the default.</param>
        </member>
        <member name="T:LibGit2Sharp.Handlers.StashApplyProgressHandler">
            <summary>
            Delegate definition for stash application callback.
            </summary>
            <param name="progress">The current step of the stash application.</param>
            <returns>True to continue checkout operation; false to cancel checkout operation.</returns>
        </member>
        <member name="T:LibGit2Sharp.Handlers.RebaseStepStartingHandler">
            <summary>
            Delegate to report information on a rebase step that is about to be performed.
            </summary>
            <param name="beforeRebaseStep"></param>
        </member>
        <member name="T:LibGit2Sharp.Handlers.RebaseStepCompletedHandler">
            <summary>
            Delegate to report information on the rebase step that was just completed.
            </summary>
            <param name="afterRebaseStepInfo"></param>
        </member>
        <member name="T:LibGit2Sharp.Handlers.PackBuilderStage">
            <summary>
            The stages of pack building.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Handlers.PackBuilderStage.Counting">
            <summary>
            Counting stage.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Handlers.PackBuilderStage.Deltafying">
            <summary>
            Deltafying stage.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Handlers.LogHandler">
            <summary>
            Delegate definition for logging.  This callback will be used to
            write logging messages in libgit2 and LibGit2Sharp.
            </summary>
            <param name="level">The level of the log message.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="T:LibGit2Sharp.Ignore">
            <summary>
            Provides methods to manage the rules ensuring that some specific
            untracked files are ignored.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Ignore.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Ignore.AddTemporaryRules(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a custom .gitignore rule that will be applied to futher operations to the Index. This is in addition
            to the standard .gitignore rules that would apply as a result of the system/user/repo .gitignore
            </summary>
            <param name="rules">The content of a .gitignore file that will be applied.</param>
        </member>
        <member name="M:LibGit2Sharp.Ignore.ResetAllTemporaryRules">
            <summary>
            Resets all custom rules that were applied via calls to
            <see cref="M:LibGit2Sharp.Ignore.AddTemporaryRules(System.Collections.Generic.IEnumerable{System.String})"/> - note that this will not affect
            the application of the user/repo .gitignores.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Ignore.IsPathIgnored(System.String)">
            <summary>
             Given a relative path, this method determines whether a path should be ignored, checking
             both the custom ignore rules as well as the "normal" .gitignores.
            </summary>
            <param name="relativePath">A path relative to the repository</param>
            <returns>true if the path should be ignored.</returns>
        </member>
        <member name="T:LibGit2Sharp.MergeHead">
            <summary>
            A merge head is a parent for the next commit.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.MergeHead.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.MergeHead.Tip">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Commit"/> that this merge head points to.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.MergeHead.Shorten">
            <summary>
            Returns "MERGE_HEAD[i]", where i is the index of this merge head.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.NameConflictException">
            <summary>
            The exception that is thrown when a reference, a remote, a submodule... with the same name already exists in the repository
            </summary>
        </member>
        <member name="M:LibGit2Sharp.NameConflictException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NameConflictException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.NameConflictException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NameConflictException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.NameConflictException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NameConflictException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.NameConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NameConflictException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.NameConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NameConflictException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.NonFastForwardException">
            <summary>
            The exception that is thrown when push cannot be performed
            against the remote without losing commits.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.NonFastForwardException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NonFastForwardException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.NonFastForwardException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NonFastForwardException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.NonFastForwardException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NonFastForwardException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.NonFastForwardException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NonFastForwardException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.NonFastForwardException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.NonFastForwardException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.PushResult">
            <summary>
            Contains the results of a push operation.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PushResult.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PushResult.FailedPushUpdates">
            <summary>
            <see cref="T:LibGit2Sharp.PushStatusError"/>s that failed to update.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PushResult.HasErrors">
            <summary>
            Flag indicating if there were errors reported
            when updating references on the remote.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.PushStatusError">
            <summary>
            Information on an error updating reference on remote during a push.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.PushStatusError.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PushStatusError.Reference">
            <summary>
            The reference this status refers to.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.PushStatusError.Message">
            <summary>
            The message regarding the update of this reference.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RemoteCallbacks">
            <summary>
            Class to translate libgit2 callbacks into delegates exposed by LibGit2Sharp.
            Handles generating libgit2 git_remote_callbacks datastructure given a set
            of LibGit2Sharp delegates and handles propagating libgit2 callbacks into
            corresponding LibGit2Sharp exposed delegates.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCallbacks.Progress">
            <summary>
            Progress callback. Corresponds to libgit2 progress callback.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCallbacks.UpdateTips">
            <summary>
            UpdateTips callback. Corresponds to libgit2 update_tips callback.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCallbacks.PushStatusError">
            <summary>
            PushStatusError callback. It will be called when the libgit2 push_update_reference returns a non null status message,
            which means that the update was rejected by the remote server.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCallbacks.DownloadTransferProgress">
            <summary>
            Managed delegate to be called in response to a git_transfer_progress_callback callback from libgit2.
            This will in turn call the user provided delegate.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCallbacks.PushTransferProgress">
            <summary>
            Push transfer progress callback.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCallbacks.PackBuilderProgress">
            <summary>
            Pack builder creation progress callback.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCallbacks.PrePushCallback">
            <summary>
            Called during remote push operation after negotiation, before upload
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCallbacks.CredentialsProvider">
            <summary>
            The credentials to use for authentication.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCallbacks.CertificateCheck">
            <summary>
            Callback to perform validation on the certificate
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RemoteCallbacks.GitProgressHandler(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Handler for libgit2 Progress callback. Converts values
            received from libgit2 callback to more suitable types
            and calls delegate provided by LibGit2Sharp consumer.
            </summary>
            <param name="str">IntPtr to string from libgit2</param>
            <param name="len">length of string</param>
            <param name="data">IntPtr to optional payload passed back to the callback.</param>
            <returns>0 on success; a negative value to abort the process.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCallbacks.GitUpdateTipsHandler(System.IntPtr,LibGit2Sharp.Core.GitOid@,LibGit2Sharp.Core.GitOid@,System.IntPtr)">
            <summary>
            Handler for libgit2 update_tips callback. Converts values
            received from libgit2 callback to more suitable types
            and calls delegate provided by LibGit2Sharp consumer.
            </summary>
            <param name="str">IntPtr to string</param>
            <param name="oldId">Old reference ID</param>
            <param name="newId">New referene ID</param>
            <param name="data">IntPtr to optional payload passed back to the callback.</param>
            <returns>0 on success; a negative value to abort the process.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCallbacks.GitPushUpdateReference(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            The delegate with the signature that matches the native push_update_reference function's signature
            </summary>
            <param name="str">IntPtr to string, the name of the reference</param>
            <param name="status">IntPtr to string, the update status message</param>
            <param name="data">IntPtr to optional payload passed back to the callback.</param>
            <returns>0 on success; a negative value to abort the process.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCallbacks.GitDownloadTransferProgressHandler(LibGit2Sharp.Core.GitTransferProgress@,System.IntPtr)">
            <summary>
            The delegate with the signature that matches the native git_transfer_progress_callback function's signature.
            </summary>
            <param name="progress"><see cref="T:LibGit2Sharp.Core.GitTransferProgress"/> structure containing progress information.</param>
            <param name="payload">Payload data.</param>
            <returns>the result of the wrapped <see cref="T:LibGit2Sharp.Handlers.TransferProgressHandler"/></returns>
        </member>
        <member name="T:LibGit2Sharp.RemoteCompletionType">
            <summary>
            git_remote_completion types.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCompletionType.Download">
            <summary>
            Download.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCompletionType.Indexing">
            <summary>
            Indexing.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCompletionType.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CurrentOperation">
            <summary>
            Determines the pending operation of a git repository - ie, whether
            an operation (merge, cherry-pick, etc) is in progress.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CurrentOperation.None">
            <summary>
            No operation is in progress.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CurrentOperation.Merge">
            <summary>
            A merge is in progress.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CurrentOperation.Revert">
            <summary>
            A revert is in progress.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CurrentOperation.RevertSequence">
            <summary>
            A sequencer revert is in progress.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CurrentOperation.CherryPick">
            <summary>
            A cherry-pick is in progress.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CurrentOperation.CherryPickSequence">
            <summary>
            A sequencer cherry-pick is in progress.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CurrentOperation.Bisect">
            <summary>
            A bisect is in progress.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CurrentOperation.Rebase">
            <summary>
            A rebase is in progress.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CurrentOperation.RebaseInteractive">
            <summary>
            A rebase --interactive is in progress.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CurrentOperation.RebaseMerge">
            <summary>
            A rebase --merge is in progress.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CurrentOperation.ApplyMailbox">
            <summary>
            A mailbox application (am) is in progress.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CurrentOperation.ApplyMailboxOrRebase">
            <summary>
            A mailbox application (am) or rebase is in progress.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.StageLevel">
            <summary>
            Disambiguates the different versions of an index entry during a merge.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StageLevel.Staged">
            <summary>
            The standard fully merged state for an index entry.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StageLevel.Ancestor">
            <summary>
            Version of the entry as it was in the common base merge commit.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StageLevel.Ours">
            <summary>
            Version of the entry as it is in the commit of the Head.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StageLevel.Theirs">
            <summary>
            Version of the entry as it is in the commit being merged.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.GitSmartSubtransportAction">
            <summary>
            An enumeration of the type of connections which a "smart" subtransport
            may be asked to create on behalf of libgit2.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitSmartSubtransportAction.UploadPackList">
            <summary>
            For HTTP, this indicates a GET to /info/refs?service=git-upload-pack
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitSmartSubtransportAction.UploadPack">
            <summary>
            For HTTP, this indicates a POST to /git-upload-pack
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitSmartSubtransportAction.ReceivePackList">
            <summary>
            For HTTP, this indicates a GET to /info/refs?service=git-receive-pack
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitSmartSubtransportAction.ReceivePack">
            <summary>
            For HTTP, this indicates a POST to /git-receive-pack
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RpcSmartSubtransport">
            <summary>
            Base class for custom RPC-based subtransports that use the standard
            "smart" git protocol.  RPC-based subtransports perform work over
            multiple requests, like the http transport.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.SmartSubtransport">
            <summary>
            Base class for typical custom subtransports for the "smart"
            transport that work over a single connection, like the git and ssh
            transports.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SmartSubtransport.CertificateCheck(LibGit2Sharp.Certificate,System.Boolean,System.String)">
            <summary>
            Call the certificate check callback
            </summary>
            <param name="cert">The certificate to send</param>
            <param name="valid">Whether we consider the certificate to be valid</param>
            <param name="hostname">The hostname we connected to</param>
        </member>
        <member name="M:LibGit2Sharp.SmartSubtransport.Action(System.String,LibGit2Sharp.GitSmartSubtransportAction)">
            <summary>
            Invoked by libgit2 to create a connection using this subtransport.
            </summary>
            <param name="url">The endpoint to connect to</param>
            <param name="action">The type of connection to create</param>
            <returns>A SmartSubtransportStream representing the connection</returns>
        </member>
        <member name="M:LibGit2Sharp.SmartSubtransport.Close">
            <summary>
            Invoked by libgit2 when this subtransport is no longer needed, but may be re-used in the future.
            Override this method to add additional cleanup steps to your subclass. Be sure to call base.Close().
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SmartSubtransport.Dispose">
            <summary>
            Invoked by libgit2 when this subtransport is being freed. Override this method to add additional
            cleanup steps to your subclass. Be sure to call base.Dispose().
            </summary>
        </member>
        <member name="T:LibGit2Sharp.SmartSubtransportRegistration`1">
            <summary>
            An object representing the registration of a SmartSubtransport type with libgit2
            under a particular scheme (eg "http").
            </summary>
            <typeparam name="T">The type of SmartSubtransport to register</typeparam>
        </member>
        <member name="M:LibGit2Sharp.SmartSubtransportRegistration`1.#ctor(System.String)">
            <summary>
            Creates a new native registration for a smart protocol transport
            in libgit2.
            </summary>
            <param name="scheme">The URL scheme (eg "http") to register</param>
        </member>
        <member name="P:LibGit2Sharp.SmartSubtransportRegistration`1.Scheme">
            <summary>
            The URI scheme (eg "http") for this transport.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.SmartSubtransportStream">
            <summary>
            A stream that represents a two-way connection (socket) for a SmartSubtransport.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SmartSubtransportStream.#ctor">
            <summary>
            This is to quiet the MetaFixture.TypesInLibGit2SharpMustBeExtensibleInATestingContext test.
            Do not use this constructor.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SmartSubtransportStream.#ctor(LibGit2Sharp.SmartSubtransport)">
            <summary>
            Base constructor for SmartTransportStream. Make sure that your derived class calls this base constructor.
            </summary>
            <param name="subtransport">The subtransport that this stream represents a connection over.</param>
        </member>
        <member name="M:LibGit2Sharp.SmartSubtransportStream.Free">
            <summary>
            Invoked by libgit2 when this stream is no longer needed.
            Override this method to add additional cleanup steps to your subclass. Be sure
            to call base.Free().
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SmartSubtransportStream.Read(System.IO.Stream,System.Int64,System.Int64@)">
            <summary>
            Requests that the stream write the next length bytes of the stream to the provided Stream object.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SmartSubtransportStream.Write(System.IO.Stream,System.Int64)">
            <summary>
            Requests that the stream write the first length bytes of the provided Stream object to the stream.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SmartSubtransportStream.SmartTransport">
            <summary>
            The smart transport that this stream represents a connection over.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ConfigurationLevel">
            <summary>
            Specifies the level of configuration to use.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ConfigurationLevel.Local">
            <summary>
            The local .git/config of the current repository.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ConfigurationLevel.Global">
            <summary>
            The global ~/.gitconfig of the current user.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ConfigurationLevel.Xdg">
            <summary>
            The global ~/.config/git/config of the current user.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ConfigurationLevel.System">
            <summary>
            The system wide .gitconfig.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ConfigurationLevel.ProgramData">
            <summary>
            Another system-wide configuration on Windows.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ChangeKind">
            <summary>
            The kind of changes that a Diff can report.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Unmodified">
            <summary>
            No changes detected.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Added">
            <summary>
            The file was added.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Deleted">
            <summary>
            The file was deleted.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Modified">
            <summary>
            The file content was modified.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Renamed">
            <summary>
            The file was renamed.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Copied">
            <summary>
            The file was copied.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Ignored">
            <summary>
            The file is ignored in the workdir.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Untracked">
            <summary>
            The file is untracked in the workdir.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.TypeChanged">
            <summary>
            The type (i.e. regular file, symlink, submodule, ...)
            of the file was changed.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Unreadable">
            <summary>
            Entry is unreadable.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Conflicted">
            <summary>
            Entry is currently in conflict.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.DetachedHead.TrackedBranch">
            <summary>
            Gets the remote branch which is connected to this local one, or null if there is none.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Diff">
            <summary>
            Show changes between the working tree and the index or a tree, changes between the index and a tree, changes between two trees, or changes between two files on disk.
            <para>
              Copied and renamed files currently cannot be detected, as the feature is not supported by libgit2 yet.
              These files will be shown as a pair of Deleted/Added files.</para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Diff.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare(LibGit2Sharp.Blob,LibGit2Sharp.Blob)">
            <summary>
            Show changes between two <see cref="T:LibGit2Sharp.Blob"/>s.
            </summary>
            <param name="oldBlob">The <see cref="T:LibGit2Sharp.Blob"/> you want to compare from.</param>
            <param name="newBlob">The <see cref="T:LibGit2Sharp.Blob"/> you want to compare to.</param>
            <returns>A <see cref="T:LibGit2Sharp.ContentChanges"/> containing the changes between the <paramref name="oldBlob"/> and the <paramref name="newBlob"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare(LibGit2Sharp.Blob,LibGit2Sharp.Blob,LibGit2Sharp.CompareOptions)">
            <summary>
            Show changes between two <see cref="T:LibGit2Sharp.Blob"/>s.
            </summary>
            <param name="oldBlob">The <see cref="T:LibGit2Sharp.Blob"/> you want to compare from.</param>
            <param name="newBlob">The <see cref="T:LibGit2Sharp.Blob"/> you want to compare to.</param>
            <param name="compareOptions">Additional options to define comparison behavior.</param>
            <returns>A <see cref="T:LibGit2Sharp.ContentChanges"/> containing the changes between the <paramref name="oldBlob"/> and the <paramref name="newBlob"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1(LibGit2Sharp.Tree,LibGit2Sharp.Tree)">
            <summary>
            Show changes between two <see cref="T:LibGit2Sharp.Tree"/>s.
            </summary>
            <param name="oldTree">The <see cref="T:LibGit2Sharp.Tree"/> you want to compare from.</param>
            <param name="newTree">The <see cref="T:LibGit2Sharp.Tree"/> you want to compare to.</param>
            <returns>A <see cref="T:LibGit2Sharp.TreeChanges"/> containing the changes between the <paramref name="oldTree"/> and the <paramref name="newTree"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1(LibGit2Sharp.Tree,LibGit2Sharp.Tree,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Show changes between two <see cref="T:LibGit2Sharp.Tree"/>s.
            </summary>
            <param name="oldTree">The <see cref="T:LibGit2Sharp.Tree"/> you want to compare from.</param>
            <param name="newTree">The <see cref="T:LibGit2Sharp.Tree"/> you want to compare to.</param>
            <param name="paths">The list of paths (either files or directories) that should be compared.</param>
            <returns>A <see cref="T:LibGit2Sharp.TreeChanges"/> containing the changes between the <paramref name="oldTree"/> and the <paramref name="newTree"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1(LibGit2Sharp.Tree,LibGit2Sharp.Tree,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Show changes between two <see cref="T:LibGit2Sharp.Tree"/>s.
            </summary>
            <param name="oldTree">The <see cref="T:LibGit2Sharp.Tree"/> you want to compare from.</param>
            <param name="newTree">The <see cref="T:LibGit2Sharp.Tree"/> you want to compare to.</param>
            <param name="paths">The list of paths (either files or directories) that should be compared.</param>
            <param name="explicitPathsOptions">
            If set, the passed <paramref name="paths"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
            <returns>A <see cref="T:LibGit2Sharp.TreeChanges"/> containing the changes between the <paramref name="oldTree"/> and the <paramref name="newTree"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1(LibGit2Sharp.Tree,LibGit2Sharp.Tree,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.CompareOptions)">
            <summary>
            Show changes between two <see cref="T:LibGit2Sharp.Tree"/>s.
            </summary>
            <param name="oldTree">The <see cref="T:LibGit2Sharp.Tree"/> you want to compare from.</param>
            <param name="newTree">The <see cref="T:LibGit2Sharp.Tree"/> you want to compare to.</param>
            <param name="paths">The list of paths (either files or directories) that should be compared.</param>
            <param name="compareOptions">Additional options to define patch generation behavior.</param>
            <returns>A <see cref="T:LibGit2Sharp.TreeChanges"/> containing the changes between the <paramref name="oldTree"/> and the <paramref name="newTree"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1(LibGit2Sharp.Tree,LibGit2Sharp.Tree,LibGit2Sharp.CompareOptions)">
            <summary>
            Show changes between two <see cref="T:LibGit2Sharp.Tree"/>s.
            </summary>
            <param name="oldTree">The <see cref="T:LibGit2Sharp.Tree"/> you want to compare from.</param>
            <param name="newTree">The <see cref="T:LibGit2Sharp.Tree"/> you want to compare to.</param>
            <param name="compareOptions">Additional options to define patch generation behavior.</param>
            <returns>A <see cref="T:LibGit2Sharp.TreeChanges"/> containing the changes between the <paramref name="oldTree"/> and the <paramref name="newTree"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1(LibGit2Sharp.Tree,LibGit2Sharp.Tree,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.ExplicitPathsOptions,LibGit2Sharp.CompareOptions)">
            <summary>
            Show changes between two <see cref="T:LibGit2Sharp.Tree"/>s.
            </summary>
            <param name="oldTree">The <see cref="T:LibGit2Sharp.Tree"/> you want to compare from.</param>
            <param name="newTree">The <see cref="T:LibGit2Sharp.Tree"/> you want to compare to.</param>
            <param name="paths">The list of paths (either files or directories) that should be compared.</param>
            <param name="explicitPathsOptions">
            If set, the passed <paramref name="paths"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
            <param name="compareOptions">Additional options to define patch generation behavior.</param>
            <returns>A <see cref="T:LibGit2Sharp.TreeChanges"/> containing the changes between the <paramref name="oldTree"/> and the <paramref name="newTree"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1(LibGit2Sharp.Tree,LibGit2Sharp.DiffTargets)">
            <summary>
            Show changes between a <see cref="T:LibGit2Sharp.Tree"/> and the Index, the Working Directory, or both.
            <para>
            The level of diff performed can be specified by passing either a <see cref="T:LibGit2Sharp.TreeChanges"/>
            or <see cref="T:LibGit2Sharp.Patch"/> type as the generic parameter.
            </para>
            </summary>
            <param name="oldTree">The <see cref="T:LibGit2Sharp.Tree"/> to compare from.</param>
            <param name="diffTargets">The targets to compare to.</param>
            <typeparam name="T">Can be either a <see cref="T:LibGit2Sharp.TreeChanges"/> if you are only interested in the list of files modified, added, ..., or
            a <see cref="T:LibGit2Sharp.Patch"/> if you want the actual patch content for the whole diff and for individual files.</typeparam>
            <returns>A <typeparamref name="T"/> containing the changes between the <see cref="T:LibGit2Sharp.Tree"/> and the selected target.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1(LibGit2Sharp.Tree,LibGit2Sharp.DiffTargets,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Show changes between a <see cref="T:LibGit2Sharp.Tree"/> and the Index, the Working Directory, or both.
            <para>
            The level of diff performed can be specified by passing either a <see cref="T:LibGit2Sharp.TreeChanges"/>
            or <see cref="T:LibGit2Sharp.Patch"/> type as the generic parameter.
            </para>
            </summary>
            <param name="oldTree">The <see cref="T:LibGit2Sharp.Tree"/> to compare from.</param>
            <param name="diffTargets">The targets to compare to.</param>
            <param name="paths">The list of paths (either files or directories) that should be compared.</param>
            <typeparam name="T">Can be either a <see cref="T:LibGit2Sharp.TreeChanges"/> if you are only interested in the list of files modified, added, ..., or
            a <see cref="T:LibGit2Sharp.Patch"/> if you want the actual patch content for the whole diff and for individual files.</typeparam>
            <returns>A <typeparamref name="T"/> containing the changes between the <see cref="T:LibGit2Sharp.Tree"/> and the selected target.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1(LibGit2Sharp.Tree,LibGit2Sharp.DiffTargets,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Show changes between a <see cref="T:LibGit2Sharp.Tree"/> and the Index, the Working Directory, or both.
            <para>
            The level of diff performed can be specified by passing either a <see cref="T:LibGit2Sharp.TreeChanges"/>
            or <see cref="T:LibGit2Sharp.Patch"/> type as the generic parameter.
            </para>
            </summary>
            <param name="oldTree">The <see cref="T:LibGit2Sharp.Tree"/> to compare from.</param>
            <param name="diffTargets">The targets to compare to.</param>
            <param name="paths">The list of paths (either files or directories) that should be compared.</param>
            <param name="explicitPathsOptions">
            If set, the passed <paramref name="paths"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
            <typeparam name="T">Can be either a <see cref="T:LibGit2Sharp.TreeChanges"/> if you are only interested in the list of files modified, added, ..., or
            a <see cref="T:LibGit2Sharp.Patch"/> if you want the actual patch content for the whole diff and for individual files.</typeparam>
            <returns>A <typeparamref name="T"/> containing the changes between the <see cref="T:LibGit2Sharp.Tree"/> and the selected target.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1(LibGit2Sharp.Tree,LibGit2Sharp.DiffTargets,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.ExplicitPathsOptions,LibGit2Sharp.CompareOptions)">
            <summary>
            Show changes between a <see cref="T:LibGit2Sharp.Tree"/> and the Index, the Working Directory, or both.
            <para>
            The level of diff performed can be specified by passing either a <see cref="T:LibGit2Sharp.TreeChanges"/>
            or <see cref="T:LibGit2Sharp.Patch"/> type as the generic parameter.
            </para>
            </summary>
            <param name="oldTree">The <see cref="T:LibGit2Sharp.Tree"/> to compare from.</param>
            <param name="diffTargets">The targets to compare to.</param>
            <param name="paths">The list of paths (either files or directories) that should be compared.</param>
            <param name="explicitPathsOptions">
            If set, the passed <paramref name="paths"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
            <param name="compareOptions">Additional options to define patch generation behavior.</param>
            <typeparam name="T">Can be either a <see cref="T:LibGit2Sharp.TreeChanges"/> if you are only interested in the list of files modified, added, ..., or
            a <see cref="T:LibGit2Sharp.Patch"/> if you want the actual patch content for the whole diff and for individual files.</typeparam>
            <returns>A <typeparamref name="T"/> containing the changes between the <see cref="T:LibGit2Sharp.Tree"/> and the selected target.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1">
            <summary>
            Show changes between the working directory and the index.
            <para>
            The level of diff performed can be specified by passing either a <see cref="T:LibGit2Sharp.TreeChanges"/>
            or <see cref="T:LibGit2Sharp.Patch"/> type as the generic parameter.
            </para>
            </summary>
            <typeparam name="T">Can be either a <see cref="T:LibGit2Sharp.TreeChanges"/> if you are only interested in the list of files modified, added, ..., or
            a <see cref="T:LibGit2Sharp.Patch"/> if you want the actual patch content for the whole diff and for individual files.</typeparam>
            <returns>A <typeparamref name="T"/> containing the changes between the working directory and the index.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Show changes between the working directory and the index.
            <para>
            The level of diff performed can be specified by passing either a <see cref="T:LibGit2Sharp.TreeChanges"/>
            or <see cref="T:LibGit2Sharp.Patch"/> type as the generic parameter.
            </para>
            </summary>
            <param name="paths">The list of paths (either files or directories) that should be compared.</param>
            <typeparam name="T">Can be either a <see cref="T:LibGit2Sharp.TreeChanges"/> if you are only interested in the list of files modified, added, ..., or
            a <see cref="T:LibGit2Sharp.Patch"/> if you want the actual patch content for the whole diff and for individual files.</typeparam>
            <returns>A <typeparamref name="T"/> containing the changes between the working directory and the index.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Show changes between the working directory and the index.
            <para>
            The level of diff performed can be specified by passing either a <see cref="T:LibGit2Sharp.TreeChanges"/>
            or <see cref="T:LibGit2Sharp.Patch"/> type as the generic parameter.
            </para>
            </summary>
            <param name="paths">The list of paths (either files or directories) that should be compared.</param>
            <param name="includeUntracked">If true, include untracked files from the working dir as additions. Otherwise ignore them.</param>
            <typeparam name="T">Can be either a <see cref="T:LibGit2Sharp.TreeChanges"/> if you are only interested in the list of files modified, added, ..., or
            a <see cref="T:LibGit2Sharp.Patch"/> if you want the actual patch content for the whole diff and for individual files.</typeparam>
            <returns>A <typeparamref name="T"/> containing the changes between the working directory and the index.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1(System.Collections.Generic.IEnumerable{System.String},System.Boolean,LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Show changes between the working directory and the index.
            <para>
            The level of diff performed can be specified by passing either a <see cref="T:LibGit2Sharp.TreeChanges"/>
            or <see cref="T:LibGit2Sharp.Patch"/> type as the generic parameter.
            </para>
            </summary>
            <param name="paths">The list of paths (either files or directories) that should be compared.</param>
            <param name="includeUntracked">If true, include untracked files from the working dir as additions. Otherwise ignore them.</param>
            <param name="explicitPathsOptions">
            If set, the passed <paramref name="paths"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
            <typeparam name="T">Can be either a <see cref="T:LibGit2Sharp.TreeChanges"/> if you are only interested in the list of files modified, added, ..., or
            a <see cref="T:LibGit2Sharp.Patch"/> if you want the actual patch content for the whole diff and for individual files.</typeparam>
            <returns>A <typeparamref name="T"/> containing the changes between the working directory and the index.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare``1(System.Collections.Generic.IEnumerable{System.String},System.Boolean,LibGit2Sharp.ExplicitPathsOptions,LibGit2Sharp.CompareOptions)">
            <summary>
            Show changes between the working directory and the index.
            <para>
            The level of diff performed can be specified by passing either a <see cref="T:LibGit2Sharp.TreeChanges"/>
            or <see cref="T:LibGit2Sharp.Patch"/> type as the generic parameter.
            </para>
            </summary>
            <param name="paths">The list of paths (either files or directories) that should be compared.</param>
            <param name="includeUntracked">If true, include untracked files from the working dir as additions. Otherwise ignore them.</param>
            <param name="explicitPathsOptions">
            If set, the passed <paramref name="paths"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
            <param name="compareOptions">Additional options to define patch generation behavior.</param>
            <typeparam name="T">Can be either a <see cref="T:LibGit2Sharp.TreeChanges"/> if you are only interested in the list of files modified, added, ..., or
            a <see cref="T:LibGit2Sharp.Patch"/> if you want the actual patch content for the whole diff and for individual files.</typeparam>
            <returns>A <typeparamref name="T"/> containing the changes between the working directory and the index.</returns>
        </member>
        <member name="T:LibGit2Sharp.IRepository">
            <summary>
            A Repository is the primary interface into a git repository
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Head">
            <summary>
            Shortcut to return the branch pointed to by HEAD
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Config">
            <summary>
            Provides access to the configuration settings for this repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Index">
            <summary>
            Gets the index.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Refs">
            <summary>
            Lookup and enumerate references in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Commits">
            <summary>
            Lookup and enumerate commits in the repository.
            Iterating this collection directly starts walking from the HEAD.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Branches">
            <summary>
            Lookup and enumerate branches in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Tags">
            <summary>
            Lookup and enumerate tags in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Info">
            <summary>
            Provides high level information about this repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Diff">
            <summary>
            Provides access to diffing functionalities to show changes between the working tree and the index or a tree, changes between the index and a tree, changes between two trees, or changes between two files on disk.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.ObjectDatabase">
            <summary>
            Gets the database.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Notes">
            <summary>
            Lookup notes in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Submodules">
            <summary>
            Submodules in the repository.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Checkout(LibGit2Sharp.Branch,LibGit2Sharp.CheckoutOptions)">
            <summary>
            Checkout the commit pointed at by the tip of the specified <see cref="T:LibGit2Sharp.Branch"/>.
            <para>
              If this commit is the current tip of the branch as it exists in the repository, the HEAD
              will point to this branch. Otherwise, the HEAD will be detached, pointing at the commit sha.
            </para>
            </summary>
            <param name="branch">The <see cref="T:LibGit2Sharp.Branch"/> to check out.</param>
            <param name="options"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Checkout(System.String,LibGit2Sharp.CheckoutOptions)">
            <summary>
            Checkout the specified branch, reference or SHA.
            <para>
              If the committishOrBranchSpec parameter resolves to a branch name, then the checked out HEAD will
              will point to the branch. Otherwise, the HEAD will be detached, pointing at the commit sha.
            </para>
            </summary>
            <param name="committishOrBranchSpec">A revparse spec for the commit or branch to checkout.</param>
            <param name="options"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Checkout(LibGit2Sharp.Commit,LibGit2Sharp.CheckoutOptions)">
            <summary>
            Checkout the specified <see cref="T:LibGit2Sharp.Commit"/>.
            <para>
              Will detach the HEAD and make it point to this commit sha.
            </para>
            </summary>
            <param name="commit">The <see cref="T:LibGit2Sharp.Commit"/> to check out.</param>
            <param name="options"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Checkout(LibGit2Sharp.Tree,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.CheckoutOptions)">
            <summary>
            Checkout the specified tree.
            </summary>
            <param name="tree">The <see cref="T:LibGit2Sharp.Tree"/> to checkout.</param>
            <param name="paths">The paths to checkout.</param>
            <param name="opts">Collection of parameters controlling checkout behavior.</param>
        </member>
        <member name="M:LibGit2Sharp.IRepository.CheckoutPaths(System.String,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.CheckoutOptions)">
            <summary>
            Updates specifed paths in the index and working directory with the versions from the specified branch, reference, or SHA.
            <para>
            This method does not switch branches or update the current repository HEAD.
            </para>
            </summary>
            <param name = "committishOrBranchSpec">A revparse spec for the commit or branch to checkout paths from.</param>
            <param name="paths">The paths to checkout.</param>
            <param name="checkoutOptions">Collection of parameters controlling checkout behavior.</param>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Lookup(LibGit2Sharp.ObjectId)">
            <summary>
            Try to lookup an object by its <see cref="T:LibGit2Sharp.ObjectId"/>. If no matching object is found, null will be returned.
            </summary>
            <param name="id">The id to lookup.</param>
            <returns>The <see cref="T:LibGit2Sharp.GitObject"/> or null if it was not found.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Lookup(System.String)">
            <summary>
            Try to lookup an object by its sha or a reference canonical name. If no matching object is found, null will be returned.
            </summary>
            <param name="objectish">A revparse spec for the object to lookup.</param>
            <returns>The <see cref="T:LibGit2Sharp.GitObject"/> or null if it was not found.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Lookup(LibGit2Sharp.ObjectId,LibGit2Sharp.ObjectType)">
            <summary>
            Try to lookup an object by its <see cref="T:LibGit2Sharp.ObjectId"/> and <see cref="T:LibGit2Sharp.ObjectType"/>. If no matching object is found, null will be returned.
            </summary>
            <param name="id">The id to lookup.</param>
            <param name="type">The kind of GitObject being looked up</param>
            <returns>The <see cref="T:LibGit2Sharp.GitObject"/> or null if it was not found.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Lookup(System.String,LibGit2Sharp.ObjectType)">
            <summary>
            Try to lookup an object by its sha or a reference canonical name and <see cref="T:LibGit2Sharp.ObjectType"/>. If no matching object is found, null will be returned.
            </summary>
            <param name="objectish">A revparse spec for the object to lookup.</param>
            <param name="type">The kind of <see cref="T:LibGit2Sharp.GitObject"/> being looked up</param>
            <returns>The <see cref="T:LibGit2Sharp.GitObject"/> or null if it was not found.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Commit(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,LibGit2Sharp.CommitOptions)">
            <summary>
            Stores the content of the <see cref="P:LibGit2Sharp.Repository.Index"/> as a new <see cref="T:LibGit2Sharp.Commit"/> into the repository.
            The tip of the <see cref="P:LibGit2Sharp.Repository.Head"/> will be used as the parent of this new Commit.
            Once the commit is created, the <see cref="P:LibGit2Sharp.Repository.Head"/> will move forward to point at it.
            </summary>
            <param name="message">The description of why a change was made to the repository.</param>
            <param name="author">The <see cref="T:LibGit2Sharp.Signature"/> of who made the change.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Signature"/> of who added the change to the repository.</param>
            <param name="options">The <see cref="T:LibGit2Sharp.CommitOptions"/> that specify the commit behavior.</param>
            <returns>The generated <see cref="T:LibGit2Sharp.Commit"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Reset(LibGit2Sharp.ResetMode,LibGit2Sharp.Commit)">
            <summary>
            Sets the current <see cref="P:LibGit2Sharp.IRepository.Head"/> to the specified commit and optionally resets the <see cref="P:LibGit2Sharp.IRepository.Index"/> and
            the content of the working tree to match.
            </summary>
            <param name="resetMode">Flavor of reset operation to perform.</param>
            <param name="commit">The target commit object.</param>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Reset(LibGit2Sharp.ResetMode,LibGit2Sharp.Commit,LibGit2Sharp.CheckoutOptions)">
            <summary>
            Sets <see cref="P:LibGit2Sharp.IRepository.Head"/> to the specified commit and optionally resets the <see cref="P:LibGit2Sharp.IRepository.Index"/> and
            the content of the working tree to match.
            </summary>
            <param name="resetMode">Flavor of reset operation to perform.</param>
            <param name="commit">The target commit object.</param>
            <param name="options">Collection of parameters controlling checkout behavior.</param>
        </member>
        <member name="M:LibGit2Sharp.IRepository.RemoveUntrackedFiles">
            <summary>
            Clean the working tree by removing files that are not under version control.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Revert(LibGit2Sharp.Commit,LibGit2Sharp.Signature,LibGit2Sharp.RevertOptions)">
            <summary>
            Revert the specified commit.
            </summary>
            <param name="commit">The <see cref="M:LibGit2Sharp.IRepository.Commit(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,LibGit2Sharp.CommitOptions)"/> to revert.</param>
            <param name="reverter">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the reverte.</param>
            <param name="options"><see cref="T:LibGit2Sharp.RevertOptions"/> controlling revert behavior.</param>
            <returns>The result of the revert.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Merge(LibGit2Sharp.Commit,LibGit2Sharp.Signature,LibGit2Sharp.MergeOptions)">
            <summary>
            Merge changes from commit into the branch pointed at by HEAD..
            </summary>
            <param name="commit">The commit to merge into the branch pointed at by HEAD.</param>
            <param name="merger">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the merge.</param>
            <param name="options">Specifies optional parameters controlling merge behavior; if null, the defaults are used.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Merge(LibGit2Sharp.Branch,LibGit2Sharp.Signature,LibGit2Sharp.MergeOptions)">
            <summary>
            Merges changes from branch into the branch pointed at by HEAD..
            </summary>
            <param name="branch">The branch to merge into the branch pointed at by HEAD.</param>
            <param name="merger">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the merge.</param>
            <param name="options">Specifies optional parameters controlling merge behavior; if null, the defaults are used.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Merge(System.String,LibGit2Sharp.Signature,LibGit2Sharp.MergeOptions)">
            <summary>
            Merges changes from the commit into the branch pointed at by HEAD.
            </summary>
            <param name="committish">The commit to merge into branch pointed at by HEAD.</param>
            <param name="merger">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the merge.</param>
            <param name="options">Specifies optional parameters controlling merge behavior; if null, the defaults are used.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Rebase">
            <summary>
            Access to Rebase functionality.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IRepository.MergeFetchedRefs(LibGit2Sharp.Signature,LibGit2Sharp.MergeOptions)">
            <summary>
            Merge the reference that was recently fetched. This will merge
            the branch on the fetched remote that corresponded to the
            current local branch when we did the fetch. This is the
            second step in performing a pull operation (after having
            performed said fetch).
            </summary>
            <param name="merger">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the merge.</param>
            <param name="options">Specifies optional parameters controlling merge behavior; if null, the defaults are used.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.CherryPick(LibGit2Sharp.Commit,LibGit2Sharp.Signature,LibGit2Sharp.CherryPickOptions)">
            <summary>
            Cherry picks changes from the commit into the branch pointed at by HEAD.
            </summary>
            <param name="commit">The commit to cherry pick into branch pointed at by HEAD.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the cherry pick.</param>
            <param name="options">Specifies optional parameters controlling cherry pick behavior; if null, the defaults are used.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Ignore">
            <summary>
            Manipulate the currently ignored files.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Network">
            <summary>
            Provides access to network functionality for a repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Stashes">
            <summary>
             Lookup and enumerate stashes in the repository.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Blame(System.String,LibGit2Sharp.BlameOptions)">
            <summary>
            Find where each line of a file originated.
            </summary>
            <param name="path">Path of the file to blame.</param>
            <param name="options">Specifies optional parameters; if null, the defaults are used.</param>
            <returns>The blame for the file.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Stage(System.String,LibGit2Sharp.StageOptions)">
             <summary>
             Promotes to the staging area the latest modifications of a file in the working directory (addition, updation or removal).
            
             If this path is ignored by configuration then it will not be staged unless <see cref="P:LibGit2Sharp.StageOptions.IncludeIgnored"/> is unset.
             </summary>
             <param name="path">The path of the file within the working directory.</param>
             <param name="stageOptions">Determines how paths will be staged.</param>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Stage(System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.StageOptions)">
             <summary>
             Promotes to the staging area the latest modifications of a collection of files in the working directory (addition, updation or removal).
            
             Any paths (even those listed explicitly) that are ignored by configuration will not be staged unless <see cref="P:LibGit2Sharp.StageOptions.IncludeIgnored"/> is unset.
             </summary>
             <param name="paths">The collection of paths of the files within the working directory.</param>
             <param name="stageOptions">Determines how paths will be staged.</param>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Unstage(System.String,LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Removes from the staging area all the modifications of a file since the latest commit (addition, updation or removal).
            </summary>
            <param name="path">The path of the file within the working directory.</param>
            <param name="explicitPathsOptions">
            The passed <paramref name="path"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Unstage(System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Removes from the staging area all the modifications of a collection of file since the latest commit (addition, updation or removal).
            </summary>
            <param name="paths">The collection of paths of the files within the working directory.</param>
            <param name="explicitPathsOptions">
            The passed <paramref name="paths"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Move(System.String,System.String)">
            <summary>
            Moves and/or renames a file in the working directory and promotes the change to the staging area.
            </summary>
            <param name="sourcePath">The path of the file within the working directory which has to be moved/renamed.</param>
            <param name="destinationPath">The target path of the file within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Move(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Moves and/or renames a collection of files in the working directory and promotes the changes to the staging area.
            </summary>
            <param name="sourcePaths">The paths of the files within the working directory which have to be moved/renamed.</param>
            <param name="destinationPaths">The target paths of the files within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Remove(System.String,System.Boolean,LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Removes a file from the staging area, and optionally removes it from the working directory as well.
            <para>
              If the file has already been deleted from the working directory, this method will only deal
              with promoting the removal to the staging area.
            </para>
            <para>
              The default behavior is to remove the file from the working directory as well.
            </para>
            <para>
              When not passing a <paramref name="explicitPathsOptions"/>, the passed path will be treated as
              a pathspec. You can for example use it to pass the relative path to a folder inside the working directory,
              so that all files beneath this folders, and the folder itself, will be removed.
            </para>
            </summary>
            <param name="path">The path of the file within the working directory.</param>
            <param name="removeFromWorkingDirectory">True to remove the file from the working directory, False otherwise.</param>
            <param name="explicitPathsOptions">
            The passed <paramref name="path"/> will be treated as an explicit path.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Remove(System.Collections.Generic.IEnumerable{System.String},System.Boolean,LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Removes a collection of fileS from the staging, and optionally removes them from the working directory as well.
            <para>
              If a file has already been deleted from the working directory, this method will only deal
              with promoting the removal to the staging area.
            </para>
            <para>
              The default behavior is to remove the files from the working directory as well.
            </para>
            <para>
              When not passing a <paramref name="explicitPathsOptions"/>, the passed paths will be treated as
              a pathspec. You can for example use it to pass the relative paths to folders inside the working directory,
              so that all files beneath these folders, and the folders themselves, will be removed.
            </para>
            </summary>
            <param name="paths">The collection of paths of the files within the working directory.</param>
            <param name="removeFromWorkingDirectory">True to remove the files from the working directory, False otherwise.</param>
            <param name="explicitPathsOptions">
            The passed <paramref name="paths"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
        </member>
        <member name="M:LibGit2Sharp.IRepository.RetrieveStatus(System.String)">
            <summary>
            Retrieves the state of a file in the working directory, comparing it against the staging area and the latest commit.
            </summary>
            <param name="filePath">The relative path within the working directory to the file.</param>
            <returns>A <see cref="T:LibGit2Sharp.FileStatus"/> representing the state of the <paramref name="filePath"/> parameter.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.RetrieveStatus(LibGit2Sharp.StatusOptions)">
            <summary>
            Retrieves the state of all files in the working directory, comparing them against the staging area and the latest commit.
            </summary>
            <param name="options">If set, the options that control the status investigation.</param>
            <returns>A <see cref="T:LibGit2Sharp.RepositoryStatus"/> holding the state of all the files.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Describe(LibGit2Sharp.Commit,LibGit2Sharp.DescribeOptions)">
            <summary>
            Finds the most recent annotated tag that is reachable from a commit.
            <para>
              If the tag points to the commit, then only the tag is shown. Otherwise,
              it suffixes the tag name with the number of additional commits on top
              of the tagged object and the abbreviated object name of the most recent commit.
            </para>
            <para>
              Optionally, the <paramref name="options"/> parameter allow to tweak the
              search strategy (considering lightweith tags, or even branches as reference points)
              and the formatting of the returned identifier.
            </para>
            </summary>
            <param name="commit">The commit to be described.</param>
            <param name="options">Determines how the commit will be described.</param>
            <returns>A descriptive identifier for the commit based on the nearest annotated tag.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.RevParse(System.String,LibGit2Sharp.Reference@,LibGit2Sharp.GitObject@)">
            <summary>
            Parse an extended SHA-1 expression and retrieve the object and the reference
            mentioned in the revision (if any).
            </summary>
            <param name="revision">An extended SHA-1 expression for the object to look up</param>
            <param name="reference">The reference mentioned in the revision (if any)</param>
            <param name="obj">The object which the revision resolves to</param>
        </member>
        <member name="T:LibGit2Sharp.NoteCollection">
            <summary>
            A collection of <see cref="T:LibGit2Sharp.Note"/> exposed in the <see cref="T:LibGit2Sharp.Repository"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.NoteCollection.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.NoteCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.NoteCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:LibGit2Sharp.NoteCollection.DefaultNamespace">
            <summary>
            The default namespace for notes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.NoteCollection.Namespaces">
            <summary>
            The list of canonicalized namespaces related to notes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.NoteCollection.Item(LibGit2Sharp.ObjectId)">
            <summary>
            Gets the collection of <see cref="T:LibGit2Sharp.Note"/> associated with the specified <see cref="T:LibGit2Sharp.ObjectId"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.NoteCollection.Item(System.String)">
            <summary>
            Gets the collection of <see cref="T:LibGit2Sharp.Note"/> associated with the specified namespace.
            <para>This is similar to the 'get notes list' command.</para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.NoteCollection.Item(System.String,LibGit2Sharp.ObjectId)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Note"/> associated with the specified objectId and the specified namespace.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.NoteCollection.Add(LibGit2Sharp.ObjectId,System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.String)">
            <summary>
            Creates or updates a <see cref="T:LibGit2Sharp.Note"/> on the specified object, and for the given namespace.
            </summary>
            <param name="targetId">The target <see cref="T:LibGit2Sharp.ObjectId"/>, for which the note will be created.</param>
            <param name="message">The note message.</param>
            <param name="author">The author.</param>
            <param name="committer">The committer.</param>
            <param name="namespace">The namespace on which the note will be created. It can be either a canonical namespace or an abbreviated namespace ('refs/notes/myNamespace' or just 'myNamespace').</param>
            <returns>The note which was just saved.</returns>
        </member>
        <member name="M:LibGit2Sharp.NoteCollection.Remove(LibGit2Sharp.ObjectId,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.String)">
            <summary>
            Deletes the note on the specified object, and for the given namespace.
            </summary>
            <param name="targetId">The target <see cref="T:LibGit2Sharp.ObjectId"/>, for which the note will be created.</param>
            <param name="author">The author.</param>
            <param name="committer">The committer.</param>
            <param name="namespace">The namespace on which the note will be removed. It can be either a canonical namespace or an abbreviated namespace ('refs/notes/myNamespace' or just 'myNamespace').</param>
        </member>
        <member name="T:LibGit2Sharp.Note">
            <summary>
            A note, attached to a given <see cref="T:LibGit2Sharp.GitObject"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Note.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Note.BlobId">
            <summary>
            The <see cref="T:LibGit2Sharp.ObjectId"/> of the blob containing the note message.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Note.Message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Note.Namespace">
            <summary>
            The namespace with which this note is associated.
            <para>This is the abbreviated namespace (e.g.: commits), and not the canonical namespace (e.g.: refs/notes/commits).</para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Note.TargetObjectId">
            <summary>
            The <see cref="T:LibGit2Sharp.ObjectId"/> of the target object.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Note.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Note"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.Note"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Note"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Note.Equals(LibGit2Sharp.Note)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.Note"/> is equal to the current <see cref="T:LibGit2Sharp.Note"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.Note"/> to compare with the current <see cref="T:LibGit2Sharp.Note"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.Note"/> is equal to the current <see cref="T:LibGit2Sharp.Note"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Note.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.Note.op_Equality(LibGit2Sharp.Note,LibGit2Sharp.Note)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.Note"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Note"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Note"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.Note.op_Inequality(LibGit2Sharp.Note,LibGit2Sharp.Note)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.Note"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Note"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Note"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.RepositoryNotFoundException">
            <summary>
            The exception that is thrown when a <see cref="T:LibGit2Sharp.Repository"/> is being built with
            a path that doesn't point at a valid Git repository or workdir.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RepositoryNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.RepositoryNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RepositoryNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.RepositoryNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryNotFoundException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.RepositoryNotFoundException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.RepositoryNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.RepositoryNotFoundException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.TagFetchMode">
            <summary>
            Describe the expected tag retrieval behavior
            when a fetch operation is being performed.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.TagFetchMode.FromConfigurationOrDefault">
            <summary>
            Use the setting from the configuration
            or, when there isn't any, fallback to default behavior.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.TagFetchMode.Auto">
            <summary>
            Will automatically retrieve tags that
            point to objects retrieved during this fetch.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.TagFetchMode.None">
            <summary>
            No tag will be retrieved.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.TagFetchMode.All">
            <summary>
            All tags will be downloaded, but _only_ tags, along with
            all the objects these tags are pointing to.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.TarArchiver">
            <summary>
            Logic for tar archiving (not the actual tar format, but the overal logic related to tar+git) is taken
            from https://github.com/git/git/blob/master/archive-tar.c.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.TransferProgress">
            <summary>
            Expose progress values from a fetch operation.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TransferProgress.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TransferProgress.#ctor(LibGit2Sharp.Core.GitTransferProgress)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TransferProgress.TotalObjects">
            <summary>
            Total number of objects.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TransferProgress.IndexedObjects">
            <summary>
            Number of objects indexed.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TransferProgress.ReceivedObjects">
            <summary>
            Number of objects received.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TransferProgress.ReceivedBytes">
            <summary>
            Number of bytes received.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.TreeChanges">
            <summary>
            Holds the result of a diff between two trees.
            <para>Changes at the granularity of the file can be obtained through the different sub-collections <see cref="P:LibGit2Sharp.TreeChanges.Added"/>, <see cref="P:LibGit2Sharp.TreeChanges.Deleted"/> and <see cref="P:LibGit2Sharp.TreeChanges.Modified"/>.</para>
            <para>To obtain the actual patch of the diff, use the <see cref="T:LibGit2Sharp.Patch"/> class when calling Compare.</para>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeChanges.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeChanges.GetChangesOfKind(LibGit2Sharp.ChangeKind)">
            <summary>
            Enumerates the diff and yields deltas with the specified change kind.
            </summary>
            <param name="changeKind">Change type to filter on.</param>
        </member>
        <member name="M:LibGit2Sharp.TreeChanges.TryGetEntryWithChangeTypeAt(System.Int32,LibGit2Sharp.ChangeKind,LibGit2Sharp.TreeEntryChanges@)">
            <summary>
            This is method exists to work around .net not allowing unsafe code
            in iterators.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeChanges.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeChanges.GetEntryAt(System.Int32)">
            <summary>
            This is method exists to work around .net not allowing unsafe code
            in iterators.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeChanges.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.Added">
            <summary>
            List of <see cref="T:LibGit2Sharp.TreeEntryChanges"/> that have been been added.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.Deleted">
            <summary>
            List of <see cref="T:LibGit2Sharp.TreeEntryChanges"/> that have been deleted.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.Modified">
            <summary>
            List of <see cref="T:LibGit2Sharp.TreeEntryChanges"/> that have been modified.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.TypeChanged">
            <summary>
            List of <see cref="T:LibGit2Sharp.TreeEntryChanges"/> which type have been changed.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.Renamed">
            <summary>
            List of <see cref="T:LibGit2Sharp.TreeEntryChanges"/> which have been renamed
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.Copied">
            <summary>
            List of <see cref="T:LibGit2Sharp.TreeEntryChanges"/> which have been copied
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.Unmodified">
            <summary>
            List of <see cref="T:LibGit2Sharp.TreeEntryChanges"/> which are unmodified
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.Conflicted">
            <summary>
            List of <see cref="T:LibGit2Sharp.TreeEntryChanges"/> which are conflicted
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.Count">
            <summary>
            Gets the number of <see cref="T:LibGit2Sharp.TreeEntryChanges"/> in this comparison.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeChanges.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeChanges.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:LibGit2Sharp.TreeEntryChanges">
            <summary>
            Holds the changes between two versions of a tree entry.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeEntryChanges.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.Path">
            <summary>
            The new path.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.Mode">
            <summary>
            The new <see cref="P:LibGit2Sharp.TreeEntryChanges.Mode"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.Oid">
            <summary>
            The new content hash.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.Exists">
            <summary>
            The file exists in the new side of the diff.
            This is useful in determining if you have content in
            the ours or theirs side of a conflict.  This will
            be false during a conflict that deletes both the
            "ours" and "theirs" sides, or when the diff is a
            delete and the status is
            <see cref="F:LibGit2Sharp.ChangeKind.Deleted"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.Status">
            <summary>
            The kind of change that has been done (added, deleted, modified ...).
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.OldPath">
            <summary>
            The old path.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.OldMode">
            <summary>
            The old <see cref="P:LibGit2Sharp.TreeEntryChanges.Mode"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.OldOid">
            <summary>
            The old content hash.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.OldExists">
            <summary>
            The file exists in the old side of the diff.
            This is useful in determining if you have an ancestor
            side to a conflict.  This will be false during a
            conflict that involves both the "ours" and "theirs"
            side being added, or when the diff is an add and the
            status is <see cref="F:LibGit2Sharp.ChangeKind.Added"/>.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.LibGit2SharpException">
            <summary>
            The exception that is thrown when an error occurs during application execution.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.LibGit2SharpException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.LibGit2SharpException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.LibGit2SharpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.LibGit2SharpException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.LibGit2SharpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.LibGit2SharpException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.LibGit2SharpException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.LibGit2SharpException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.LibGit2SharpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.LibGit2SharpException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.FileStatus">
            <summary>
            Calculated status of a filepath in the working directory considering the current <see cref="P:LibGit2Sharp.Repository.Index"/> and the <see cref="P:LibGit2Sharp.Repository.Head"/>.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Nonexistent">
            <summary>
            The file doesn't exist.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Unaltered">
            <summary>
            The file hasn't been modified.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.NewInIndex">
            <summary>
            New file has been added to the Index. It's unknown from the Head.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.ModifiedInIndex">
            <summary>
            New version of a file has been added to the Index. A previous version exists in the Head.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.DeletedFromIndex">
            <summary>
            The deletion of a file has been promoted from the working directory to the Index. A previous version exists in the Head.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.RenamedInIndex">
            <summary>
            The renaming of a file has been promoted from the working directory to the Index. A previous version exists in the Head.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.TypeChangeInIndex">
            <summary>
            A change in type for a file has been promoted from the working directory to the Index. A previous version exists in the Head.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.NewInWorkdir">
            <summary>
            New file in the working directory, unknown from the Index and the Head.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.ModifiedInWorkdir">
            <summary>
            The file has been updated in the working directory. A previous version exists in the Index.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.DeletedFromWorkdir">
            <summary>
            The file has been deleted from the working directory. A previous version exists in the Index.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.TypeChangeInWorkdir">
            <summary>
            The file type has been changed in the working directory. A previous version exists in the Index.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.RenamedInWorkdir">
            <summary>
            The file has been renamed in the working directory.  The previous version at the previous name exists in the Index.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Unreadable">
            <summary>
            The file is unreadable in the working directory.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Ignored">
            <summary>
            The file is <see cref="F:LibGit2Sharp.FileStatus.NewInWorkdir"/> but its name and/or path matches an exclude pattern in a <c>gitignore</c> file.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Conflicted">
            <summary>
            The file is <see cref="F:LibGit2Sharp.FileStatus.Conflicted"/> due to a merge.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.DirectReference">
            <summary>
            A DirectReference points directly to a <see cref="T:LibGit2Sharp.GitObject"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.DirectReference.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.DirectReference.Target">
            <summary>
            Gets the target of this <see cref="T:LibGit2Sharp.DirectReference"/>
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws if Local Repository is not set.</exception>
        </member>
        <member name="M:LibGit2Sharp.DirectReference.ResolveToDirectReference">
            <summary>
            As a <see cref="T:LibGit2Sharp.DirectReference"/> is already peeled, invoking this will return the same <see cref="T:LibGit2Sharp.DirectReference"/>.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="T:LibGit2Sharp.GitObject">
            <summary>
            A GitObject
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitObject.repo">
            <summary>
            The <see cref="T:LibGit2Sharp.Repository"/> containing the object.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.GitObject.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.GitObject.#ctor(LibGit2Sharp.Repository,LibGit2Sharp.ObjectId)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.GitObject"/> class.
            </summary>
            <param name="repo">The <see cref="T:LibGit2Sharp.Repository"/> containing the object.</param>
            <param name="id">The <see cref="T:LibGit2Sharp.ObjectId"/> it should be identified by.</param>
        </member>
        <member name="P:LibGit2Sharp.GitObject.Id">
            <summary>
            Gets the id of this object
            </summary>
        </member>
        <member name="P:LibGit2Sharp.GitObject.Sha">
            <summary>
            Gets the 40 character sha1 of this object.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.GitObject.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.GitObject"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.GitObject"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.GitObject"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.GitObject.Equals(LibGit2Sharp.GitObject)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.GitObject"/> is equal to the current <see cref="T:LibGit2Sharp.GitObject"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.GitObject"/> to compare with the current <see cref="T:LibGit2Sharp.GitObject"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.GitObject"/> is equal to the current <see cref="T:LibGit2Sharp.GitObject"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.GitObject.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.GitObject.op_Equality(LibGit2Sharp.GitObject,LibGit2Sharp.GitObject)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.GitObject"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.GitObject"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.GitObject"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.GitObject.op_Inequality(LibGit2Sharp.GitObject,LibGit2Sharp.GitObject)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.GitObject"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.GitObject"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.GitObject"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.GitObject.ToString">
            <summary>
            Returns the <see cref="P:LibGit2Sharp.GitObject.Id"/>, a <see cref="T:System.String"/> representation of the current <see cref="T:LibGit2Sharp.GitObject"/>.
            </summary>
            <returns>The <see cref="P:LibGit2Sharp.GitObject.Id"/> that represents the current <see cref="T:LibGit2Sharp.GitObject"/>.</returns>
        </member>
        <member name="T:LibGit2Sharp.ICommitLog">
            <summary>
            A log of commits in a <see cref="T:LibGit2Sharp.Repository"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ICommitLog.SortedBy">
            <summary>
            Gets the current sorting strategy applied when enumerating the log.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Index">
            <summary>
            The Index is a staging area between the Working directory and the Repository.
            It's used to prepare and aggregate the changes that will be part of the next commit.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Index.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Index.Count">
            <summary>
            Gets the number of <see cref="T:LibGit2Sharp.IndexEntry"/> in the <see cref="T:LibGit2Sharp.Index"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Index.IsFullyMerged">
            <summary>
            Determines if the <see cref="T:LibGit2Sharp.Index"/> is free from conflicts.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Index.Item(System.String)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.IndexEntry"/> with the specified relative path.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Index.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.Index.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.Index.Replace(LibGit2Sharp.Tree)">
            <summary>
            Replaces entries in the <see cref="T:LibGit2Sharp.Index"/> with entries from the specified <see cref="T:LibGit2Sharp.Tree"/>.
            <para>
              This overwrites all existing state in the <see cref="T:LibGit2Sharp.Index"/>.
            </para>
            </summary>
            <param name="source">The <see cref="T:LibGit2Sharp.Tree"/> to read the entries from.</param>
        </member>
        <member name="M:LibGit2Sharp.Index.Clear">
            <summary>
            Clears all entries the <see cref="T:LibGit2Sharp.Index"/>. This is semantically equivalent to
            creating an empty <see cref="T:LibGit2Sharp.Tree"/> object and resetting the <see cref="T:LibGit2Sharp.Index"/> to that <see cref="T:LibGit2Sharp.Tree"/>.
            <para>
              This overwrites all existing state in the <see cref="T:LibGit2Sharp.Index"/>.
            </para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Index.Remove(System.String)">
            <summary>
            Removes a specified entry from the <see cref="T:LibGit2Sharp.Index"/>.
            </summary>
            <param name="indexEntryPath">The path of the <see cref="T:LibGit2Sharp.Index"/> entry to be removed.</param>
        </member>
        <member name="M:LibGit2Sharp.Index.Add(System.String)">
            <summary>
            Adds a file from the working directory in the <see cref="T:LibGit2Sharp.Index"/>.
            <para>
              If an entry with the same path already exists in the <see cref="T:LibGit2Sharp.Index"/>,
              the newly added one will overwrite it.
            </para>
            </summary>
            <param name="pathInTheWorkdir">The path, in the working directory, of the file to be added.</param>
        </member>
        <member name="M:LibGit2Sharp.Index.Add(LibGit2Sharp.Blob,System.String,LibGit2Sharp.Mode)">
            <summary>
            Adds an entry in the <see cref="T:LibGit2Sharp.Index"/> from a <see cref="T:LibGit2Sharp.Blob"/>.
            <para>
              If an entry with the same path already exists in the <see cref="T:LibGit2Sharp.Index"/>,
              the newly added one will overwrite it.
            </para>
            </summary>
            <param name="blob">The <see cref="T:LibGit2Sharp.Blob"/> which content should be added to the <see cref="T:LibGit2Sharp.Index"/>.</param>
            <param name="indexEntryPath">The path to be used in the <see cref="T:LibGit2Sharp.Index"/>.</param>
            <param name="indexEntryMode">Either <see cref="F:LibGit2Sharp.Mode.NonExecutableFile"/>, <see cref="F:LibGit2Sharp.Mode.ExecutableFile"/>
            or <see cref="F:LibGit2Sharp.Mode.SymbolicLink"/>.</param>
        </member>
        <member name="P:LibGit2Sharp.Index.Conflicts">
            <summary>
             Gets the conflicts that exist.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Index.Replace(LibGit2Sharp.Commit)">
            <summary>
            Replaces entries in the <see cref="T:LibGit2Sharp.Index"/> with entries from the specified <see cref="T:LibGit2Sharp.Commit"/>.
            </summary>
            <param name="commit">The target <see cref="T:LibGit2Sharp.Commit"/> object.</param>
        </member>
        <member name="M:LibGit2Sharp.Index.Replace(LibGit2Sharp.Commit,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Replaces entries in the <see cref="T:LibGit2Sharp.Index"/> with entries from the specified <see cref="T:LibGit2Sharp.Commit"/>.
            </summary>
            <param name="commit">The target <see cref="T:LibGit2Sharp.Commit"/> object.</param>
            <param name="paths">The list of paths (either files or directories) that should be considered.</param>
        </member>
        <member name="M:LibGit2Sharp.Index.Replace(LibGit2Sharp.Commit,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Replaces entries in the <see cref="T:LibGit2Sharp.Index"/> with entries from the specified <see cref="T:LibGit2Sharp.Commit"/>.
            </summary>
            <param name="commit">The target <see cref="T:LibGit2Sharp.Commit"/> object.</param>
            <param name="paths">The list of paths (either files or directories) that should be considered.</param>
            <param name="explicitPathsOptions">
            If set, the passed <paramref name="paths"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
        </member>
        <member name="M:LibGit2Sharp.Index.Write">
            <summary>
            Write the contents of this <see cref="T:LibGit2Sharp.Index"/> to disk
            </summary>
        </member>
        <member name="T:LibGit2Sharp.IndexEntry">
            <summary>
            A reference to a <see cref="T:LibGit2Sharp.Blob"/> known by the <see cref="T:LibGit2Sharp.Index"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexEntry.Path">
            <summary>
            Gets the relative path to the file within the working directory.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexEntry.Mode">
            <summary>
            Gets the file mode.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexEntry.StageLevel">
            <summary>
            Gets the stage number.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexEntry.AssumeUnchanged">
            <summary>
            Whether the file is marked as assume-unchanged
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexEntry.Id">
            <summary>
            Gets the id of the <see cref="T:LibGit2Sharp.Blob"/> pointed at by this index entry.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IndexEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.IndexEntry"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.IndexEntry"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.IndexEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexEntry.Equals(LibGit2Sharp.IndexEntry)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.IndexEntry"/> is equal to the current <see cref="T:LibGit2Sharp.IndexEntry"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.IndexEntry"/> to compare with the current <see cref="T:LibGit2Sharp.IndexEntry"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.IndexEntry"/> is equal to the current <see cref="T:LibGit2Sharp.IndexEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexEntry.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexEntry.op_Equality(LibGit2Sharp.IndexEntry,LibGit2Sharp.IndexEntry)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.IndexEntry"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.IndexEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.IndexEntry"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexEntry.op_Inequality(LibGit2Sharp.IndexEntry,LibGit2Sharp.IndexEntry)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.IndexEntry"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.IndexEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.IndexEntry"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.IQueryableCommitLog">
            <summary>
            A log of commits in a <see cref="T:LibGit2Sharp.Repository"/> that can be filtered with queries.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IQueryableCommitLog.QueryBy(LibGit2Sharp.CommitFilter)">
            <summary>
            Returns the list of commits of the repository matching the specified <paramref name="filter"/>.
            </summary>
            <param name="filter">The options used to control which commits will be returned.</param>
            <returns>A list of commits, ready to be enumerated.</returns>
        </member>
        <member name="M:LibGit2Sharp.IQueryableCommitLog.QueryBy(System.String)">
            <summary>
            Returns the list of commits of the repository representing the history of a file beyond renames.
            </summary>
            <param name="path">The file's path.</param>
            <returns>A list of file history entries, ready to be enumerated.</returns>
        </member>
        <member name="M:LibGit2Sharp.IQueryableCommitLog.QueryBy(System.String,LibGit2Sharp.FollowFilter)">
            <summary>
            Returns the list of commits of the repository representing the history of a file beyond renames.
            </summary>
            <param name="path">The file's path.</param>
            <param name="filter">The options used to control which commits will be returned.</param>
            <returns>A list of file history entries, ready to be enumerated.</returns>
        </member>
        <member name="M:LibGit2Sharp.IQueryableCommitLog.QueryBy(System.String,LibGit2Sharp.CommitFilter)">
            <summary>
            Returns the list of commits of the repository representing the history of a file beyond renames.
            </summary>
            <param name="path">The file's path.</param>
            <param name="filter">The options used to control which commits will be returned.</param>
            <returns>A list of file history entries, ready to be enumerated.</returns>
        </member>
        <member name="T:LibGit2Sharp.Mode">
            <summary>
            Git specific modes for entries.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Mode.Nonexistent">
            <summary>
            000000 file mode (the entry doesn't exist or is unreadable)
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Mode.Directory">
            <summary>
            040000 file mode
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Mode.NonExecutableFile">
            <summary>
            100644 file mode
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Mode.NonExecutableGroupWritableFile">
            <summary>
            Obsolete 100664 file mode.
            <para>0100664 mode is an early Git design mistake. It's kept for
              ascendant compatibility as some <see cref="T:LibGit2Sharp.Tree"/> and
              <see cref="P:LibGit2Sharp.Repository.Index"/> entries may still bear
              this mode in some old git repositories, but it's now deprecated.
            </para>
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Mode.ExecutableFile">
            <summary>
            100755 file mode
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Mode.SymbolicLink">
            <summary>
            120000 file mode
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Mode.GitLink">
            <summary>
            160000 file mode
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ObjectDatabase">
            <summary>
            Provides methods to directly work against the Git object database
            without involving the index nor the working directory.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.Contains(LibGit2Sharp.ObjectId)">
            <summary>
            Determines if the given object can be found in the object database.
            </summary>
            <param name="objectId">Identifier of the object being searched for.</param>
            <returns>True if the object has been found; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.RetrieveObjectMetadata(LibGit2Sharp.ObjectId)">
            <summary>
            Retrieves the header of a GitObject from the object database. The header contains the Size
            and Type of the object. Note that most backends do not support reading only the header
            of an object, so the whole object will be read and then size would be returned.
            </summary>
            <param name="objectId">Object Id of the queried object</param>
            <returns>GitObjectMetadata object instance containg object header information</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateBlob(System.String)">
            <summary>
            Inserts a <see cref="T:LibGit2Sharp.Blob"/> into the object database, created from the content of a file.
            </summary>
            <param name="path">Path to the file to create the blob from.  A relative path is allowed to
            be passed if the <see cref="T:LibGit2Sharp.Repository"/> is a standard, non-bare, repository. The path
            will then be considered as a path relative to the root of the working directory.</param>
            <returns>The created <see cref="T:LibGit2Sharp.Blob"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.AddBackend(LibGit2Sharp.OdbBackend,System.Int32)">
            <summary>
            Adds the provided backend to the object database with the specified priority.
            <para>
            If the provided backend implements <see cref="T:System.IDisposable"/>, the <see cref="M:System.IDisposable.Dispose"/>
            method will be honored and invoked upon the disposal of the repository.
            </para>
            </summary>
            <param name="backend">The backend to add</param>
            <param name="priority">The priority at which libgit2 should consult this backend (higher values are consulted first)</param>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.Write``1(System.Byte[])">
            <summary>
            Write an object to the object database
            </summary>
            <param name="data">The contents of the object</param>
            <typeparam name="T">The type of object to write</typeparam>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateBlob(System.IO.Stream)">
            <summary>
            Inserts a <see cref="T:LibGit2Sharp.Blob"/> into the object database, created from the content of a stream.
            <para>Optionally, git filters will be applied to the content before storing it.</para>
            </summary>
            <param name="stream">The stream from which will be read the content of the blob to be created.</param>
            <returns>The created <see cref="T:LibGit2Sharp.Blob"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateBlob(System.IO.Stream,System.String)">
            <summary>
            Inserts a <see cref="T:LibGit2Sharp.Blob"/> into the object database, created from the content of a stream.
            <para>Optionally, git filters will be applied to the content before storing it.</para>
            </summary>
            <param name="stream">The stream from which will be read the content of the blob to be created.</param>
            <param name="hintpath">The hintpath is used to determine what git filters should be applied to the object before it can be placed to the object database.</param>
            <returns>The created <see cref="T:LibGit2Sharp.Blob"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateBlob(System.IO.Stream,System.String,System.Int64)">
            <summary>
            Inserts a <see cref="T:LibGit2Sharp.Blob"/> into the object database, created from the content of a stream.
            <para>Optionally, git filters will be applied to the content before storing it.</para>
            </summary>
            <param name="stream">The stream from which will be read the content of the blob to be created.</param>
            <param name="hintpath">The hintpath is used to determine what git filters should be applied to the object before it can be placed to the object database.</param>
            <param name="numberOfBytesToConsume">The number of bytes to consume from the stream.</param>
            <returns>The created <see cref="T:LibGit2Sharp.Blob"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateBlob(System.IO.Stream,System.Int64)">
            <summary>
            Inserts a <see cref="T:LibGit2Sharp.Blob"/> into the object database created from the content of the stream.
            </summary>
            <param name="stream">The stream from which will be read the content of the blob to be created.</param>
            <param name="numberOfBytesToConsume">Number of bytes to consume from the stream.</param>
            <returns>The created <see cref="T:LibGit2Sharp.Blob"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateTree(LibGit2Sharp.TreeDefinition)">
            <summary>
            Inserts a <see cref="T:LibGit2Sharp.Tree"/> into the object database, created from a <see cref="T:LibGit2Sharp.TreeDefinition"/>.
            </summary>
            <param name="treeDefinition">The <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <returns>The created <see cref="T:LibGit2Sharp.Tree"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateTree(LibGit2Sharp.Index)">
            <summary>
            Inserts a <see cref="T:LibGit2Sharp.Tree"/> into the object database, created from the <see cref="T:LibGit2Sharp.Index"/>.
            <para>
              It recursively creates tree objects for each of the subtrees stored in the index, but only returns the root tree.
            </para>
            <para>
              The index must be fully merged.
            </para>
            </summary>
            <param name="index">The <see cref="T:LibGit2Sharp.Index"/>.</param>
            <returns>The created <see cref="T:LibGit2Sharp.Tree"/>. This can be used e.g. to create a <see cref="T:LibGit2Sharp.Commit"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateCommit(LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.String,LibGit2Sharp.Tree,System.Collections.Generic.IEnumerable{LibGit2Sharp.Commit},System.Boolean)">
            <summary>
            Inserts a <see cref="T:LibGit2Sharp.Commit"/> into the object database, referencing an existing <see cref="T:LibGit2Sharp.Tree"/>.
            <para>
            Prettifing the message includes:
            * Removing empty lines from the beginning and end.
            * Removing trailing spaces from every line.
            * Turning multiple consecutive empty lines between paragraphs into just one empty line.
            * Ensuring the commit message ends with a newline.
            * Removing every line starting with "#".
            </para>
            </summary>
            <param name="author">The <see cref="T:LibGit2Sharp.Signature"/> of who made the change.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Signature"/> of who added the change to the repository.</param>
            <param name="message">The description of why a change was made to the repository.</param>
            <param name="tree">The <see cref="T:LibGit2Sharp.Tree"/> of the <see cref="T:LibGit2Sharp.Commit"/> to be created.</param>
            <param name="parents">The parents of the <see cref="T:LibGit2Sharp.Commit"/> to be created.</param>
            <param name="prettifyMessage">True to prettify the message, or false to leave it as is.</param>
            <returns>The created <see cref="T:LibGit2Sharp.Commit"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateCommit(LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.String,LibGit2Sharp.Tree,System.Collections.Generic.IEnumerable{LibGit2Sharp.Commit},System.Boolean,System.Nullable{System.Char})">
            <summary>
            Inserts a <see cref="T:LibGit2Sharp.Commit"/> into the object database, referencing an existing <see cref="T:LibGit2Sharp.Tree"/>.
            <para>
            Prettifing the message includes:
            * Removing empty lines from the beginning and end.
            * Removing trailing spaces from every line.
            * Turning multiple consecutive empty lines between paragraphs into just one empty line.
            * Ensuring the commit message ends with a newline.
            * Removing every line starting with the <paramref name="commentChar"/>.
            </para>
            </summary>
            <param name="author">The <see cref="T:LibGit2Sharp.Signature"/> of who made the change.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Signature"/> of who added the change to the repository.</param>
            <param name="message">The description of why a change was made to the repository.</param>
            <param name="tree">The <see cref="T:LibGit2Sharp.Tree"/> of the <see cref="T:LibGit2Sharp.Commit"/> to be created.</param>
            <param name="parents">The parents of the <see cref="T:LibGit2Sharp.Commit"/> to be created.</param>
            <param name="prettifyMessage">True to prettify the message, or false to leave it as is.</param>
            <param name="commentChar">When non null, lines starting with this character will be stripped if prettifyMessage is true.</param>
            <returns>The created <see cref="T:LibGit2Sharp.Commit"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateCommitWithSignature(System.String,System.String,System.String)">
            <summary>
            Inserts a <see cref="T:LibGit2Sharp.Commit"/> into the object database after attaching the given signature.
            </summary>
            <param name="commitContent">The raw unsigned commit</param>
            <param name="signature">The signature data </param>
            <param name="field">The header field in the commit in which to store the signature</param>
            <returns>The created <see cref="T:LibGit2Sharp.Commit"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateCommitWithSignature(System.String,System.String)">
            <summary>
            Inserts a <see cref="T:LibGit2Sharp.Commit"/> into the object database after attaching the given signature.
            <para>
            This overload uses the default header field of "gpgsig"
            </para>
            </summary>
            <param name="commitContent">The raw unsigned commit</param>
            <param name="signature">The signature data </param>
            <returns>The created <see cref="T:LibGit2Sharp.Commit"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateTagAnnotation(System.String,LibGit2Sharp.GitObject,LibGit2Sharp.Signature,System.String)">
            <summary>
            Inserts a <see cref="T:LibGit2Sharp.TagAnnotation"/> into the object database, pointing to a specific <see cref="T:LibGit2Sharp.GitObject"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The <see cref="T:LibGit2Sharp.GitObject"/> being pointed at.</param>
            <param name="tagger">The tagger.</param>
            <param name="message">The message.</param>
            <returns>The created <see cref="T:LibGit2Sharp.TagAnnotation"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.Archive(LibGit2Sharp.Tree,System.String)">
            <summary>
            Create a TAR archive of the given tree.
            </summary>
            <param name="tree">The tree.</param>
            <param name="archivePath">The archive path.</param>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.Archive(LibGit2Sharp.Commit,System.String)">
            <summary>
            Create a TAR archive of the given commit.
            </summary>
            <param name="commit">commit.</param>
            <param name="archivePath">The archive path.</param>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.Archive(LibGit2Sharp.Commit,LibGit2Sharp.ArchiverBase)">
            <summary>
            Archive the given commit.
            </summary>
            <param name="commit">The commit.</param>
            <param name="archiver">The archiver to use.</param>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.Archive(LibGit2Sharp.Tree,LibGit2Sharp.ArchiverBase)">
            <summary>
            Archive the given tree.
            </summary>
            <param name="tree">The tree.</param>
            <param name="archiver">The archiver to use.</param>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CalculateHistoryDivergence(LibGit2Sharp.Commit,LibGit2Sharp.Commit)">
            <summary>
            Returns the merge base (best common ancestor) of the given commits
            and the distance between each of these commits and this base.
            </summary>
            <param name="one">The <see cref="T:LibGit2Sharp.Commit"/> being used as a reference.</param>
            <param name="another">The <see cref="T:LibGit2Sharp.Commit"/> being compared against <paramref name="one"/>.</param>
            <returns>A instance of <see cref="T:LibGit2Sharp.HistoryDivergence"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CherryPickCommit(LibGit2Sharp.Commit,LibGit2Sharp.Commit,System.Int32,LibGit2Sharp.MergeTreeOptions)">
            <summary>
            Performs a cherry-pick of <paramref name="cherryPickCommit"/> onto <paramref name="cherryPickOnto"/> commit.
            </summary>
            <param name="cherryPickCommit">The commit to cherry-pick.</param>
            <param name="cherryPickOnto">The commit to cherry-pick onto.</param>
            <param name="mainline">Which commit to consider the parent for the diff when cherry-picking a merge commit.</param>
            <param name="options">The options for the merging in the cherry-pick operation.</param>
            <returns>A result containing a <see cref="T:LibGit2Sharp.Tree"/> if the cherry-pick was successful and a list of <see cref="T:LibGit2Sharp.Conflict"/>s if it is not.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.ShortenObjectId(LibGit2Sharp.GitObject)">
            <summary>
            Calculates the current shortest abbreviated <see cref="T:LibGit2Sharp.ObjectId"/>
            string representation for a <see cref="T:LibGit2Sharp.GitObject"/>.
            </summary>
            <param name="gitObject">The <see cref="T:LibGit2Sharp.GitObject"/> which identifier should be shortened.</param>
            <returns>A short string representation of the <see cref="T:LibGit2Sharp.ObjectId"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.ShortenObjectId(LibGit2Sharp.GitObject,System.Int32)">
            <summary>
            Calculates the current shortest abbreviated <see cref="T:LibGit2Sharp.ObjectId"/>
            string representation for a <see cref="T:LibGit2Sharp.GitObject"/>.
            </summary>
            <param name="gitObject">The <see cref="T:LibGit2Sharp.GitObject"/> which identifier should be shortened.</param>
            <param name="minLength">Minimum length of the shortened representation.</param>
            <returns>A short string representation of the <see cref="T:LibGit2Sharp.ObjectId"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CanMergeWithoutConflict(LibGit2Sharp.Commit,LibGit2Sharp.Commit)">
            <summary>
            Returns whether merging <paramref name="one"/> into <paramref name="another"/>
            would result in merge conflicts.
            </summary>
            <param name="one">The commit wrapping the base tree to merge into.</param>
            <param name="another">The commit wrapping the tree to merge into <paramref name="one"/>.</param>
            <returns>True if the merge does not result in a conflict, false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.FindMergeBase(LibGit2Sharp.Commit,LibGit2Sharp.Commit)">
            <summary>
            Find the best possible merge base given two <see cref="T:LibGit2Sharp.Commit"/>s.
            </summary>
            <param name="first">The first <see cref="T:LibGit2Sharp.Commit"/>.</param>
            <param name="second">The second <see cref="T:LibGit2Sharp.Commit"/>.</param>
            <returns>The merge base or null if none found.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.FindMergeBase(System.Collections.Generic.IEnumerable{LibGit2Sharp.Commit},LibGit2Sharp.MergeBaseFindingStrategy)">
            <summary>
            Find the best possible merge base given two or more <see cref="T:LibGit2Sharp.Commit"/> according to the <see cref="T:LibGit2Sharp.MergeBaseFindingStrategy"/>.
            </summary>
            <param name="commits">The <see cref="T:LibGit2Sharp.Commit"/>s for which to find the merge base.</param>
            <param name="strategy">The strategy to leverage in order to find the merge base.</param>
            <returns>The merge base or null if none found.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.MergeCommits(LibGit2Sharp.Commit,LibGit2Sharp.Commit,LibGit2Sharp.MergeTreeOptions)">
            <summary>
            Perform a three-way merge of two commits, looking up their
            commit ancestor. The returned index will contain the results
            of the merge and can be examined for conflicts. The returned
            index must be disposed.
            </summary>
            <param name="ours">The first tree</param>
            <param name="theirs">The second tree</param>
            <param name="options">The <see cref="T:LibGit2Sharp.MergeTreeOptions"/> controlling the merge</param>
            <returns>The <see cref="T:LibGit2Sharp.Index"/> containing the merged trees and any conflicts</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.Pack(LibGit2Sharp.PackBuilderOptions)">
            <summary>
            Packs all the objects in the <see cref="T:LibGit2Sharp.ObjectDatabase"/> and write a pack (.pack) and index (.idx) files for them.
            </summary>
            <param name="options">Packing options</param>
            This method will invoke the default action of packing all objects in an arbitrary order.
            <returns>Packing results</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.Pack(LibGit2Sharp.PackBuilderOptions,System.Action{LibGit2Sharp.PackBuilder})">
            <summary>
            Packs objects in the <see cref="T:LibGit2Sharp.ObjectDatabase"/> chosen by the packDelegate action
            and write a pack (.pack) and index (.idx) files for them
            </summary>
            <param name="options">Packing options</param>
            <param name="packDelegate">Packing action</param>
            <returns>Packing results</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.InternalPack(LibGit2Sharp.PackBuilderOptions,System.Action{LibGit2Sharp.PackBuilder})">
            <summary>
            Packs objects in the <see cref="T:LibGit2Sharp.ObjectDatabase"/> and write a pack (.pack) and index (.idx) files for them.
            For internal use only.
            </summary>
            <param name="options">Packing options</param>
            <param name="packDelegate">Packing action</param>
            <returns>Packing results</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.RevertCommit(LibGit2Sharp.Commit,LibGit2Sharp.Commit,System.Int32,LibGit2Sharp.MergeTreeOptions)">
            <summary>
            Performs a revert of <paramref name="revertCommit"/> onto <paramref name="revertOnto"/> commit.
            </summary>
            <param name="revertCommit">The commit to revert.</param>
            <param name="revertOnto">The commit to revert onto.</param>
            <param name="mainline">Which commit to consider the parent for the diff when reverting a merge commit.</param>
            <param name="options">The options for the merging in the revert operation.</param>
            <returns>A result containing a <see cref="T:LibGit2Sharp.Tree"/> if the revert was successful and a list of <see cref="T:LibGit2Sharp.Conflict"/>s if it is not.</returns>
        </member>
        <member name="T:LibGit2Sharp.OdbBackend">
            <summary>
            Base class for all custom managed backends for the libgit2 object database (ODB).
            <para>
            If the derived backend implements <see cref="T:System.IDisposable"/>, the <see cref="M:System.IDisposable.Dispose"/>
            method will be honored and invoked upon the disposal of the repository.
            </para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.Free">
            <summary>
            Invoked by libgit2 when this backend is no longer needed.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.OdbBackend.SupportedOperations">
            <summary>
            In your subclass, override this member to provide the list of actions your backend supports.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.AllocateAndBuildFrom(System.Byte[])">
            <summary>
            Call this method from your implementations of Read and ReadPrefix to allocate a buffer in
            which to return the object's data.
            </summary>
            <param name="bytes">The bytes to be copied to the stream.</param>
            <returns>
            A Stream already filled with the content of provided the byte array.
            Do not dispose this object before returning it.
            </returns>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.Allocate(System.Int64)">
            <summary>
            Call this method from your implementations of Read and ReadPrefix to allocate a buffer in
            which to return the object's data.
            </summary>
            <param name="size">Number of bytes to allocate</param>
            <returns>A Stream for you to write to and then return. Do not dispose this object before returning it.</returns>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.Read(LibGit2Sharp.ObjectId,System.IO.UnmanagedMemoryStream@,LibGit2Sharp.ObjectType@)">
            <summary>
            Requests that this backend read an object.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.ReadPrefix(System.String,LibGit2Sharp.ObjectId@,System.IO.UnmanagedMemoryStream@,LibGit2Sharp.ObjectType@)">
            <summary>
            Requests that this backend read an object. The object ID may not be complete (may be a prefix).
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.ReadHeader(LibGit2Sharp.ObjectId,System.Int32@,LibGit2Sharp.ObjectType@)">
            <summary>
            Requests that this backend read an object's header (length and object type) but not its contents.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.Write(LibGit2Sharp.ObjectId,System.IO.Stream,System.Int64,LibGit2Sharp.ObjectType)">
            <summary>
            Requests that this backend write an object to the backing store.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.ReadStream(LibGit2Sharp.ObjectId,LibGit2Sharp.OdbBackendStream@)">
            <summary>
            Requests that this backend read an object. Returns a stream so that the caller can read the data in chunks.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.WriteStream(System.Int64,LibGit2Sharp.ObjectType,LibGit2Sharp.OdbBackendStream@)">
            <summary>
            Requests that this backend write an object to the backing store. Returns a stream so that the caller can write
            the data in chunks.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.Exists(LibGit2Sharp.ObjectId)">
            <summary>
            Requests that this backend check if an object ID exists.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.ExistsPrefix(System.String,LibGit2Sharp.ObjectId@)">
            <summary>
            Requests that this backend check if an object ID exists. The object ID may not be complete (may be a prefix).
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.ForEach(LibGit2Sharp.OdbBackend.ForEachCallback)">
            <summary>
            Requests that this backend enumerate all items in the backing store.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.OdbBackend.ForEachCallback">
            <summary>
            The signature of the callback method provided to the Foreach method.
            </summary>
            <param name="oid">The object ID of the object in the backing store.</param>
            <returns>A non-negative result indicates the enumeration should continue. Otherwise, the enumeration should stop.</returns>
        </member>
        <member name="T:LibGit2Sharp.OdbBackend.OdbBackendOperations">
            <summary>
            Flags used by subclasses of OdbBackend to indicate which operations they support.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.Read">
            <summary>
            This OdbBackend declares that it supports the Read method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.ReadPrefix">
            <summary>
            This OdbBackend declares that it supports the ReadPrefix method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.ReadHeader">
            <summary>
            This OdbBackend declares that it supports the ReadHeader method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.Write">
            <summary>
            This OdbBackend declares that it supports the Write method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.ReadStream">
            <summary>
            This OdbBackend declares that it supports the ReadStream method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.WriteStream">
            <summary>
            This OdbBackend declares that it supports the WriteStream method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.Exists">
            <summary>
            This OdbBackend declares that it supports the Exists method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.ExistsPrefix">
            <summary>
            This OdbBackend declares that it supports the ExistsPrefix method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.ForEach">
            <summary>
            This OdbBackend declares that it supports the Foreach method.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.OdbBackend.ReturnCode">
            <summary>
            Libgit2 expected backend return codes.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.ReturnCode.GIT_OK">
            <summary>
            No error has occured.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.ReturnCode.GIT_ENOTFOUND">
            <summary>
            No object matching the oid, or short oid, can be found in the backend.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.ReturnCode.GIT_EAMBIGUOUS">
            <summary>
            The given short oid is ambiguous.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.ReturnCode.GIT_EUSER">
            <summary>
            Interruption of the foreach() callback is requested.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.OdbBackendStream">
            <summary>
            When an OdbBackend implements the WriteStream or ReadStream methods, it returns an OdbBackendStream to libgit2.
            Libgit2 then uses the OdbBackendStream to read or write from the backend in a streaming fashion.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackendStream.#ctor">
            <summary>
            This is to quiet the MetaFixture.TypesInLibGit2SharpMustBeExtensibleInATestingContext test.
            Do not use this constructor.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackendStream.#ctor(LibGit2Sharp.OdbBackend)">
            <summary>
            Base constructor for OdbBackendStream. Make sure that your derived class calls this base constructor.
            </summary>
            <param name="backend">The backend to which this backend stream is attached.</param>
        </member>
        <member name="M:LibGit2Sharp.OdbBackendStream.Dispose">
            <summary>
            Invoked by libgit2 when this stream is no longer needed.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.OdbBackendStream.CanRead">
            <summary>
            If true, then it is legal to call the Read method.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.OdbBackendStream.CanWrite">
            <summary>
            If true, then it is legal to call the Write and FinalizeWrite methods.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackendStream.Read(System.IO.Stream,System.Int64)">
            <summary>
            Requests that the stream write the next length bytes of the stream to the provided Stream object.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackendStream.Write(System.IO.Stream,System.Int64)">
            <summary>
            Requests that the stream write the first length bytes of the provided Stream object to the stream.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackendStream.FinalizeWrite(LibGit2Sharp.ObjectId)">
            <summary>
            After all bytes have been written to the stream, the object ID is provided to FinalizeWrite.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.OdbBackendStream.Backend">
            <summary>
            The backend object this stream was created by.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ReferenceWrapper`1">
            <summary>
            A base class for things that wrap a <see cref="P:LibGit2Sharp.ReferenceWrapper`1.Reference"/> (branch, tag, etc).
            </summary>
            <typeparam name="TObject">The type of the referenced Git object.</typeparam>
        </member>
        <member name="F:LibGit2Sharp.ReferenceWrapper`1.repo">
            <summary>
            The repository.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.#ctor(LibGit2Sharp.Repository,LibGit2Sharp.Reference,System.Func{LibGit2Sharp.Reference,System.String})">
            <param name="repo">The repository.</param>
            <param name="reference">The reference.</param>
            <param name="canonicalNameSelector">A function to construct the reference's canonical name.</param>
        </member>
        <member name="P:LibGit2Sharp.ReferenceWrapper`1.CanonicalName">
            <summary>
            Gets the full name of this reference.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ReferenceWrapper`1.FriendlyName">
            <summary>
            Gets the human-friendly name of this reference.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ReferenceWrapper`1.Reference">
            <summary>
            The underlying <see cref="P:LibGit2Sharp.ReferenceWrapper`1.Reference"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.ToString">
            <summary>
            Returns the <see cref="P:LibGit2Sharp.ReferenceWrapper`1.CanonicalName"/>, a <see cref="T:System.String"/> representation of the current reference.
            </summary>
            <returns>The <see cref="P:LibGit2Sharp.ReferenceWrapper`1.CanonicalName"/> that represents the current reference.</returns>
        </member>
        <member name="P:LibGit2Sharp.ReferenceWrapper`1.TargetObject">
            <summary>
            Gets the <typeparamref name="TObject"/> this <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> points to.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.Shorten">
            <summary>
            Removes redundent leading namespaces (regarding the kind of
            reference being wrapped) from the canonical name.
            </summary>
            <returns>The friendly shortened name</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.Equals(LibGit2Sharp.ReferenceWrapper{`0})">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> is equal to the current <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> to compare with the current <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> is equal to the current <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.op_Equality(LibGit2Sharp.ReferenceWrapper{`0},LibGit2Sharp.ReferenceWrapper{`0})">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.op_Inequality(LibGit2Sharp.ReferenceWrapper{`0},LibGit2Sharp.ReferenceWrapper{`0})">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.ObjectId">
            <summary>
            Uniquely identifies a <see cref="T:LibGit2Sharp.GitObject"/>.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ObjectId.HexSize">
            <summary>
            Size of the string-based representation of a SHA-1.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ObjectId.Zero">
            <summary>
            Zero ObjectId
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.#ctor(LibGit2Sharp.Core.GitOid)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.ObjectId"/> class.
            </summary>
            <param name="oid">The oid.</param>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.ObjectId"/> class.
            </summary>
            <param name="rawId">The byte array.</param>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.ObjectId"/> class.
            </summary>
            <param name="sha">The sha.</param>
        </member>
        <member name="P:LibGit2Sharp.ObjectId.RawId">
            <summary>
            Gets the raw id.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ObjectId.Sha">
            <summary>
            Gets the sha.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.TryParse(System.String,LibGit2Sharp.ObjectId@)">
            <summary>
            Converts the specified string representation of a Sha-1 to its <see cref="T:LibGit2Sharp.ObjectId"/> equivalent and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="sha">A string containing a Sha-1 to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:LibGit2Sharp.ObjectId"/> value equivalent to the Sha-1 contained in <paramref name="sha"/>, if the conversion succeeded, or <code>null</code> if the conversion failed.</param>
            <returns>true if the <paramref name="sha"/> parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.ObjectId"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.ObjectId"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.ObjectId"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.Equals(LibGit2Sharp.ObjectId)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.ObjectId"/> is equal to the current <see cref="T:LibGit2Sharp.ObjectId"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.ObjectId"/> to compare with the current <see cref="T:LibGit2Sharp.ObjectId"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.ObjectId"/> is equal to the current <see cref="T:LibGit2Sharp.ObjectId"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.ToString">
            <summary>
            Returns the <see cref="P:LibGit2Sharp.ObjectId.Sha"/>, a <see cref="T:System.String"/> representation of the current <see cref="T:LibGit2Sharp.ObjectId"/>.
            </summary>
            <returns>The <see cref="P:LibGit2Sharp.ObjectId.Sha"/> that represents the current <see cref="T:LibGit2Sharp.ObjectId"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.ToString(System.Int32)">
            <summary>
            Returns the <see cref="P:LibGit2Sharp.ObjectId.Sha"/>, a <see cref="T:System.String"/> representation of the current <see cref="T:LibGit2Sharp.ObjectId"/>.
            </summary>
            <param name="prefixLength">The number of chars the <see cref="P:LibGit2Sharp.ObjectId.Sha"/> should be truncated to.</param>
            <returns>The <see cref="P:LibGit2Sharp.ObjectId.Sha"/> that represents the current <see cref="T:LibGit2Sharp.ObjectId"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.op_Equality(LibGit2Sharp.ObjectId,LibGit2Sharp.ObjectId)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.ObjectId"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.ObjectId"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.ObjectId"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.op_Inequality(LibGit2Sharp.ObjectId,LibGit2Sharp.ObjectId)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.ObjectId"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.ObjectId"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.ObjectId"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.op_Explicit(System.String)~LibGit2Sharp.ObjectId">
            <summary>
            Create an <see cref="T:LibGit2Sharp.ObjectId"/> for the given <paramref name="sha"/>.
            </summary>
            <param name="sha">The object SHA.</param>
            <returns>An <see cref="T:LibGit2Sharp.ObjectId"/>, or null if <paramref name="sha"/> is null.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.StartsWith(System.String)">
            <summary>
            Determine whether <paramref name="shortSha"/> matches the hexified
            representation of the first nibbles of this instance.
            <para>
              Comparison is made in a case insensitive-manner.
            </para>
            </summary>
            <returns>True if this instance starts with <paramref name="shortSha"/>,
            false otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Reference">
            <summary>
            A Reference to another git object
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Reference.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Reference.#ctor(LibGit2Sharp.IRepository,System.String,System.String)">
            <remarks>
            This would be protected+internal, were that supported by C#.
            Do not use except in subclasses.
            </remarks>
        </member>
        <member name="M:LibGit2Sharp.Reference.IsValidName(System.String)">
             <summary>
             Determines if the proposed reference name is well-formed.
             </summary>
             <para>
             - Top-level names must contain only capital letters and underscores,
             and must begin and end with a letter. (e.g. "HEAD", "ORIG_HEAD").
            
             - Names prefixed with "refs/" can be almost anything.  You must avoid
             the characters '~', '^', ':', '\\', '?', '[', and '*', and the
             sequences ".." and "@{" which have special meaning to revparse.
             </para>
             <param name="canonicalName">The name to be checked.</param>
             <returns>true is the name is valid; false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.Reference.IsLocalBranch">
            <summary>
            Determine if the current <see cref="T:LibGit2Sharp.Reference"/> is a local branch.
            </summary>
            <returns>true if the current <see cref="T:LibGit2Sharp.Reference"/> is a local branch, false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.Reference.IsRemoteTrackingBranch">
            <summary>
            Determine if the current <see cref="T:LibGit2Sharp.Reference"/> is a remote tracking branch.
            </summary>
            <returns>true if the current <see cref="T:LibGit2Sharp.Reference"/> is a remote tracking branch, false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.Reference.IsTag">
            <summary>
            Determine if the current <see cref="T:LibGit2Sharp.Reference"/> is a tag.
            </summary>
            <returns>true if the current <see cref="T:LibGit2Sharp.Reference"/> is a tag, false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.Reference.IsNote">
            <summary>
            Determine if the current <see cref="T:LibGit2Sharp.Reference"/> is a note.
            </summary>
            <returns>true if the current <see cref="T:LibGit2Sharp.Reference"/> is a note, false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.Reference.CanonicalName">
            <summary>
            Gets the full name of this reference.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Reference.ResolveToDirectReference">
            <summary>
            Recursively peels the target of the reference until a direct reference is encountered.
            </summary>
            <returns>The <see cref="T:LibGit2Sharp.DirectReference"/> this <see cref="T:LibGit2Sharp.Reference"/> points to.</returns>
        </member>
        <member name="P:LibGit2Sharp.Reference.TargetIdentifier">
            <summary>
            Gets the target declared by the reference.
            <para>
              If this reference is a <see cref="T:LibGit2Sharp.SymbolicReference"/>, returns the canonical name of the target.
              Otherwise, if this reference is a <see cref="T:LibGit2Sharp.DirectReference"/>, returns the sha of the target.
            </para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Reference.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Reference"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.Reference"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Reference"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Reference.Equals(LibGit2Sharp.Reference)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.Reference"/> is equal to the current <see cref="T:LibGit2Sharp.Reference"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.Reference"/> to compare with the current <see cref="T:LibGit2Sharp.Reference"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.Reference"/> is equal to the current <see cref="T:LibGit2Sharp.Reference"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Reference.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.Reference.op_Equality(LibGit2Sharp.Reference,LibGit2Sharp.Reference)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.Reference"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Reference"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Reference"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.Reference.op_Inequality(LibGit2Sharp.Reference,LibGit2Sharp.Reference)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.Reference"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Reference"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Reference"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.Reference.ToString">
            <summary>
            Returns the <see cref="P:LibGit2Sharp.Reference.CanonicalName"/>, a <see cref="T:System.String"/> representation of the current <see cref="T:LibGit2Sharp.Reference"/>.
            </summary>
            <returns>The <see cref="P:LibGit2Sharp.Reference.CanonicalName"/> that represents the current <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="T:LibGit2Sharp.ReferenceCollection">
            <summary>
            The Collection of references in a <see cref="T:LibGit2Sharp.Repository"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.#ctor(LibGit2Sharp.Repository)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.ReferenceCollection"/> class.
            </summary>
            <param name="repo">The repo.</param>
        </member>
        <member name="P:LibGit2Sharp.ReferenceCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Reference"/> with the specified name.
            </summary>
            <param name="name">The canonical name of the reference to resolve.</param>
            <returns>The resolved <see cref="T:LibGit2Sharp.Reference"/> if it has been found, null otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Add(System.String,System.String,System.String)">
            <summary>
            Creates a direct or symbolic reference with the specified name and target
            </summary>
            <param name="name">The name of the reference to create.</param>
            <param name="canonicalRefNameOrObjectish">The target which can be either the canonical name of a reference or a revparse spec.</param>
            <param name="logMessage">The optional message to log in the <see cref="T:LibGit2Sharp.ReflogCollection"/> when adding the <see cref="T:LibGit2Sharp.Reference"/></param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Add(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a direct or symbolic reference with the specified name and target
            </summary>
            <param name="name">The name of the reference to create.</param>
            <param name="canonicalRefNameOrObjectish">The target which can be either the canonical name of a reference or a revparse spec.</param>
            <param name="logMessage">The optional message to log in the <see cref="T:LibGit2Sharp.ReflogCollection"/> when adding the <see cref="T:LibGit2Sharp.Reference"/></param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Add(System.String,System.String)">
            <summary>
            Creates a direct or symbolic reference with the specified name and target
            </summary>
            <param name="name">The name of the reference to create.</param>
            <param name="canonicalRefNameOrObjectish">The target which can be either the canonical name of a reference or a revparse spec.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Add(System.String,System.String,System.Boolean)">
            <summary>
            Creates a direct or symbolic reference with the specified name and target
            </summary>
            <param name="name">The name of the reference to create.</param>
            <param name="canonicalRefNameOrObjectish">The target which can be either the canonical name of a reference or a revparse spec.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Add(System.String,LibGit2Sharp.ObjectId,System.String)">
            <summary>
            Creates a direct reference with the specified name and target
            </summary>
            <param name="name">The canonical name of the reference to create.</param>
            <param name="targetId">Id of the target object.</param>
            <param name="logMessage">The optional message to log in the <see cref="T:LibGit2Sharp.ReflogCollection"/> when adding the <see cref="T:LibGit2Sharp.DirectReference"/></param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Add(System.String,LibGit2Sharp.ObjectId,System.String,System.Boolean)">
            <summary>
            Creates a direct reference with the specified name and target
            </summary>
            <param name="name">The canonical name of the reference to create.</param>
            <param name="targetId">Id of the target object.</param>
            <param name="logMessage">The optional message to log in the <see cref="T:LibGit2Sharp.ReflogCollection"/> when adding the <see cref="T:LibGit2Sharp.DirectReference"/></param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Add(System.String,LibGit2Sharp.ObjectId)">
            <summary>
            Creates a direct reference with the specified name and target
            </summary>
            <param name="name">The canonical name of the reference to create.</param>
            <param name="targetId">Id of the target object.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Add(System.String,LibGit2Sharp.ObjectId,System.Boolean)">
            <summary>
            Creates a direct reference with the specified name and target
            </summary>
            <param name="name">The canonical name of the reference to create.</param>
            <param name="targetId">Id of the target object.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Add(System.String,LibGit2Sharp.Reference,System.String)">
            <summary>
            Creates a symbolic reference with the specified name and target
            </summary>
            <param name="name">The canonical name of the reference to create.</param>
            <param name="targetRef">The target reference.</param>
            <param name="logMessage">The optional message to log in the <see cref="T:LibGit2Sharp.ReflogCollection"/> when adding the <see cref="T:LibGit2Sharp.SymbolicReference"/></param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Add(System.String,LibGit2Sharp.Reference,System.String,System.Boolean)">
            <summary>
            Creates a symbolic reference with the specified name and target
            </summary>
            <param name="name">The canonical name of the reference to create.</param>
            <param name="targetRef">The target reference.</param>
            <param name="logMessage">The optional message to log in the <see cref="T:LibGit2Sharp.ReflogCollection"/> when adding the <see cref="T:LibGit2Sharp.SymbolicReference"/></param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Add(System.String,LibGit2Sharp.Reference)">
            <summary>
            Creates a symbolic reference with the specified name and target
            </summary>
            <param name="name">The canonical name of the reference to create.</param>
            <param name="targetRef">The target reference.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Add(System.String,LibGit2Sharp.Reference,System.Boolean)">
            <summary>
            Creates a symbolic reference with the specified name and target
            </summary>
            <param name="name">The canonical name of the reference to create.</param>
            <param name="targetRef">The target reference.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Remove(System.String)">
            <summary>
            Remove a reference with the specified name
            </summary>
            <param name="name">The canonical name of the reference to delete.</param>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Remove(LibGit2Sharp.Reference)">
            <summary>
            Remove a reference from the repository
            </summary>
            <param name="reference">The reference to delete.</param>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Rename(LibGit2Sharp.Reference,System.String,System.String)">
            <summary>
            Rename an existing reference with a new name, and update the reflog
            </summary>
            <param name="reference">The reference to rename.</param>
            <param name="newName">The new canonical name.</param>
            <param name="logMessage">Message added to the reflog.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Rename(LibGit2Sharp.Reference,System.String,System.String,System.Boolean)">
            <summary>
            Rename an existing reference with a new name, and update the reflog
            </summary>
            <param name="reference">The reference to rename.</param>
            <param name="newName">The new canonical name.</param>
            <param name="logMessage">Message added to the reflog.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Rename(System.String,System.String)">
            <summary>
            Rename an existing reference with a new name
            </summary>
            <param name="currentName">The canonical name of the reference to rename.</param>
            <param name="newName">The new canonical name.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Rename(System.String,System.String,System.Boolean)">
            <summary>
            Rename an existing reference with a new name
            </summary>
            <param name="currentName">The canonical name of the reference to rename.</param>
            <param name="newName">The new canonical name.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Rename(System.String,System.String,System.String)">
            <summary>
            Rename an existing reference with a new name
            </summary>
            <param name="currentName">The canonical name of the reference to rename.</param>
            <param name="newName">The new canonical name.</param>
            <param name="logMessage">The optional message to log in the <see cref="T:LibGit2Sharp.ReflogCollection"/></param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Rename(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Rename an existing reference with a new name
            </summary>
            <param name="currentName">The canonical name of the reference to rename.</param>
            <param name="newName">The new canonical name.</param>
            <param name="logMessage">The optional message to log in the <see cref="T:LibGit2Sharp.ReflogCollection"/></param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Rename(LibGit2Sharp.Reference,System.String)">
            <summary>
            Rename an existing reference with a new name
            </summary>
            <param name="reference">The reference to rename.</param>
            <param name="newName">The new canonical name.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Rename(LibGit2Sharp.Reference,System.String,System.Boolean)">
            <summary>
            Rename an existing reference with a new name
            </summary>
            <param name="reference">The reference to rename.</param>
            <param name="newName">The new canonical name.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.UpdateTarget(LibGit2Sharp.Reference,LibGit2Sharp.ObjectId,System.String)">
            <summary>
            Updates the target of a direct reference.
            </summary>
            <param name="directRef">The direct reference which target should be updated.</param>
            <param name="targetId">The new target.</param>
            <param name="logMessage">The optional message to log in the <see cref="T:LibGit2Sharp.ReflogCollection"/> of the <paramref name="directRef"/> reference</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.UpdateTarget(LibGit2Sharp.Reference,System.String,System.String)">
            <summary>
            Updates the target of a direct reference.
            </summary>
            <param name="directRef">The direct reference which target should be updated.</param>
            <param name="objectish">The revparse spec of the target.</param>
            <param name="logMessage">The optional message to log in the <see cref="T:LibGit2Sharp.ReflogCollection"/></param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.UpdateTarget(LibGit2Sharp.Reference,System.String)">
            <summary>
            Updates the target of a direct reference
            </summary>
            <param name="directRef">The direct reference which target should be updated.</param>
            <param name="objectish">The revparse spec of the target.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.UpdateTarget(System.String,System.String,System.String)">
            <summary>
            Updates the target of a reference
            </summary>
            <param name="name">The canonical name of the reference.</param>
            <param name="canonicalRefNameOrObjectish">The target which can be either the canonical name of a reference or a revparse spec.</param>
            <param name="logMessage">The optional message to log in the <see cref="T:LibGit2Sharp.ReflogCollection"/> of the <paramref name="name"/> reference.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.UpdateTarget(System.String,System.String)">
            <summary>
            Updates the target of a reference
            </summary>
            <param name="name">The canonical name of the reference.</param>
            <param name="canonicalRefNameOrObjectish">The target which can be either the canonical name of a reference or a revparse spec.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.UpdateTarget(LibGit2Sharp.Reference,LibGit2Sharp.ObjectId)">
            <summary>
            Updates the target of a direct reference
            </summary>
            <param name="directRef">The direct reference which target should be updated.</param>
            <param name="targetId">The new target.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.UpdateTarget(LibGit2Sharp.Reference,LibGit2Sharp.Reference,System.String)">
            <summary>
            Updates the target of a symbolic reference
            </summary>
            <param name="symbolicRef">The symbolic reference which target should be updated.</param>
            <param name="targetRef">The new target.</param>
            <param name="logMessage">The optional message to log in the <see cref="T:LibGit2Sharp.ReflogCollection"/> of the <paramref name="symbolicRef"/> reference.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.UpdateTarget(LibGit2Sharp.Reference,LibGit2Sharp.Reference)">
            <summary>
            Updates the target of a symbolic reference
            </summary>
            <param name="symbolicRef">The symbolic reference which target should be updated.</param>
            <param name="targetRef">The new target.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.FromGlob(System.String)">
            <summary>
            Returns the list of references of the repository matching the specified <paramref name="pattern"/>.
            </summary>
            <param name="pattern">The glob pattern the reference name should match.</param>
            <returns>A list of references, ready to be enumerated.</returns>
        </member>
        <member name="P:LibGit2Sharp.ReferenceCollection.Head">
            <summary>
            Shortcut to return the HEAD reference.
            </summary>
            <returns>
            A <see cref="T:LibGit2Sharp.DirectReference"/> if the HEAD is detached;
            otherwise a <see cref="T:LibGit2Sharp.SymbolicReference"/>.
            </returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.ReachableFrom(System.Collections.Generic.IEnumerable{LibGit2Sharp.Reference},System.Collections.Generic.IEnumerable{LibGit2Sharp.Commit})">
            <summary>
            Find the <see cref="T:LibGit2Sharp.Reference"/>s among <paramref name="refSubset"/>
            that can reach at least one <see cref="T:LibGit2Sharp.Commit"/> in the specified <paramref name="targets"/>.
            </summary>
            <param name="refSubset">The set of <see cref="T:LibGit2Sharp.Reference"/>s to examine.</param>
            <param name="targets">The set of <see cref="T:LibGit2Sharp.Commit"/>s that are interesting.</param>
            <returns>A subset of <paramref name="refSubset"/> that can reach at least one <see cref="T:LibGit2Sharp.Commit"/> within <paramref name="targets"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.ReachableFrom(System.Collections.Generic.IEnumerable{LibGit2Sharp.Commit})">
            <summary>
            Find the <see cref="T:LibGit2Sharp.Reference"/>s
            that can reach at least one <see cref="T:LibGit2Sharp.Commit"/> in the specified <paramref name="targets"/>.
            </summary>
            <param name="targets">The set of <see cref="T:LibGit2Sharp.Commit"/>s that are interesting.</param>
            <returns>The list of <see cref="T:LibGit2Sharp.Reference"/> that can reach at least one <see cref="T:LibGit2Sharp.Commit"/> within <paramref name="targets"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Log(System.String)">
            <summary>
            Returns as a <see cref="T:LibGit2Sharp.ReflogCollection"/> the reflog of the <see cref="T:LibGit2Sharp.Reference"/> named <paramref name="canonicalName"/>
            </summary>
            <param name="canonicalName">The canonical name of the reference</param>
            <returns>a <see cref="T:LibGit2Sharp.ReflogCollection"/>, enumerable of <see cref="T:LibGit2Sharp.ReflogEntry"/></returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Log(LibGit2Sharp.Reference)">
            <summary>
            Returns as a <see cref="T:LibGit2Sharp.ReflogCollection"/> the reflog of the <see cref="T:LibGit2Sharp.Reference"/> <paramref name="reference"/>
            </summary>
            <param name="reference">The reference</param>
            <returns>a <see cref="T:LibGit2Sharp.ReflogCollection"/>, enumerable of <see cref="T:LibGit2Sharp.ReflogEntry"/></returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.RewriteHistory(LibGit2Sharp.RewriteHistoryOptions,LibGit2Sharp.Commit[])">
            <summary>
            Rewrite some of the commits in the repository and all the references that can reach them.
            </summary>
            <param name="options">Specifies behavior for this rewrite.</param>
            <param name="commitsToRewrite">The <see cref="T:LibGit2Sharp.Commit"/> objects to rewrite.</param>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.RewriteHistory(LibGit2Sharp.RewriteHistoryOptions,System.Collections.Generic.IEnumerable{LibGit2Sharp.Commit})">
            <summary>
            Rewrite some of the commits in the repository and all the references that can reach them.
            </summary>
            <param name="options">Specifies behavior for this rewrite.</param>
            <param name="commitsToRewrite">The <see cref="T:LibGit2Sharp.Commit"/> objects to rewrite.</param>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.EnsureHasLog(System.String)">
            <summary>
            Ensure that a reflog exists for the given canonical name
            </summary>
            <param name="canonicalName">Canonical name of the reference</param>
        </member>
        <member name="T:LibGit2Sharp.Remote">
            <summary>
            A remote repository whose branches are tracked.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Remote.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Remote.Dispose">
            <summary>
            Release the unmanaged remote object
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Remote.Name">
            <summary>
            Gets the alias of this remote repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Remote.Url">
            <summary>
            Gets the url to use to communicate with this remote repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Remote.PushUrl">
            <summary>
            Gets the distinct push url for this remote repository, if set.
            Defaults to the fetch url (<see cref="P:LibGit2Sharp.Remote.Url"/>) if not set.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Remote.TagFetchMode">
            <summary>
            Gets the Tag Fetch Mode of the remote - indicating how tags are fetched.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Remote.RefSpecs">
            <summary>
            Gets the list of <see cref="T:LibGit2Sharp.RefSpec"/>s defined for this <see cref="T:LibGit2Sharp.Remote"/>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Remote.FetchRefSpecs">
            <summary>
            Gets the list of <see cref="T:LibGit2Sharp.RefSpec"/>s defined for this <see cref="T:LibGit2Sharp.Remote"/>
            that are intended to be used during a Fetch operation
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Remote.PushRefSpecs">
            <summary>
            Gets the list of <see cref="T:LibGit2Sharp.RefSpec"/>s defined for this <see cref="T:LibGit2Sharp.Remote"/>
            that are intended to be used during a Push operation
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Remote.FetchSpecTransformToSource(System.String)">
            <summary>
            Transform a reference to its source reference using the <see cref="T:LibGit2Sharp.Remote"/>'s default fetchspec.
            </summary>
            <param name="reference">The reference to transform.</param>
            <returns>The transformed reference.</returns>
        </member>
        <member name="M:LibGit2Sharp.Remote.IsValidName(System.String)">
            <summary>
            Determines if the proposed remote name is well-formed.
            </summary>
            <param name="name">The name to be checked.</param>
            <returns>true if the name is valid; false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.Remote.AutomaticallyPruneOnFetch">
            <summary>
            Gets the configured behavior regarding the deletion
            of stale remote tracking branches.
            <para>
              If defined, will return the value of the <code>remote.&lt;name&gt;.prune</code> entry.
              Otherwise return the value of <code>fetch.prune</code>.
            </para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RemoteCollection">
            <summary>
            The collection of <see cref="T:LibGit2Sharp.Remote"/> in a <see cref="T:LibGit2Sharp.Repository"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RemoteCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Remote"/> with the specified name.
            </summary>
            <param name="name">The name of the remote to retrieve.</param>
            <returns>The retrived <see cref="T:LibGit2Sharp.Remote"/> if it has been found, null otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.Update(LibGit2Sharp.Remote,System.Action{LibGit2Sharp.RemoteUpdater}[])">
            <summary>
            Update properties of a remote.
            </summary>
            <param name="remote">The remote to update.</param>
            <param name="actions">Delegate to perform updates on the remote.</param>
            <returns>The updated remote.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.Update(System.String,System.Action{LibGit2Sharp.RemoteUpdater}[])">
             <summary>
             Update properties of a remote.
            
             These updates will be performed as a bulk update at the end of the method.
             </summary>
             <param name="remote">The name of the remote to update.</param>
             <param name="actions">Delegate to perform updates on the remote.</param>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.Add(System.String,System.String)">
            <summary>
            Creates a <see cref="T:LibGit2Sharp.Remote"/> with the specified name and for the repository at the specified location.
            <para>
              A default fetch refspec will be added for this remote.
            </para>
            </summary>
            <param name="name">The name of the remote to create.</param>
            <param name="url">The location of the repository.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Remote"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.Add(System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:LibGit2Sharp.Remote"/> with the specified name and for the repository at the specified location.
            </summary>
            <param name="name">The name of the remote to create.</param>
            <param name="url">The location of the repository.</param>
            <param name="fetchRefSpec">The refSpec to be used when fetching from this remote.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Remote"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.Remove(System.String)">
            <summary>
            Deletes the <see cref="T:LibGit2Sharp.Remote"/> with the specified name.
            </summary>
            <param name="name">The name of the remote to remove.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Remote"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.Rename(System.String,System.String)">
            <summary>
            Renames an existing <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="name">The current remote name.</param>
            <param name="newName">The new name the existing remote should bear.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Remote"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.Rename(System.String,System.String,LibGit2Sharp.Handlers.RemoteRenameFailureHandler)">
            <summary>
            Renames an existing <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="name">The current remote name.</param>
            <param name="newName">The new name the existing remote should bear.</param>
            <param name="callback">The callback to be used when problems with renaming occur. (e.g. non-default fetch refspecs)</param>
            <returns>A new <see cref="T:LibGit2Sharp.Remote"/>.</returns>
        </member>
        <member name="T:LibGit2Sharp.Repository">
            <summary>
            A Repository is the primary interface into a git repository
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Repository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.Repository"/> class
            that does not point to an on-disk Git repository.  This is
            suitable only for custom, in-memory Git repositories that are
            configured with custom object database, reference database and/or
            configuration backends.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Repository.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.Repository"/> class.
            <para>For a standard repository, <paramref name="path"/> should either point to the ".git" folder or to the working directory. For a bare repository, <paramref name="path"/> should directly point to the repository folder.</para>
            </summary>
            <param name="path">
            The path to the git repository to open, can be either the path to the git directory (for non-bare repositories this
            would be the ".git" folder inside the working directory) or the path to the working directory.
            </param>
        </member>
        <member name="M:LibGit2Sharp.Repository.#ctor(System.String,LibGit2Sharp.RepositoryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.Repository"/> class,
            providing optional behavioral overrides through the
            <paramref name="options"/> parameter.
            <para>For a standard repository, <paramref name="path"/> may
            either point to the ".git" folder or to the working directory.
            For a bare repository, <paramref name="path"/> should directly
            point to the repository folder.</para>
            </summary>
            <param name="path">
            The path to the git repository to open, can be either the
            path to the git directory (for non-bare repositories this
            would be the ".git" folder inside the working directory)
            or the path to the working directory.
            </param>
            <param name="options">
            Overrides to the way a repository is opened.
            </param>
        </member>
        <member name="M:LibGit2Sharp.Repository.IsValid(System.String)">
            <summary>
            Check if parameter <paramref name="path"/> leads to a valid git repository.
            </summary>
            <param name="path">
            The path to the git repository to check, can be either the path to the git directory (for non-bare repositories this
            would be the ".git" folder inside the working directory) or the path to the working directory.
            </param>
            <returns>True if a repository can be resolved through this path; false otherwise</returns>
        </member>
        <member name="P:LibGit2Sharp.Repository.Head">
            <summary>
            Shortcut to return the branch pointed to by HEAD
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Config">
            <summary>
            Provides access to the configuration settings for this repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Index">
            <summary>
            Gets the index.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Ignore">
            <summary>
            Manipulate the currently ignored files.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Network">
            <summary>
            Provides access to network functionality for a repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Rebase">
            <summary>
            Provides access to rebase functionality for a repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.ObjectDatabase">
            <summary>
            Gets the database.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Refs">
            <summary>
            Lookup and enumerate references in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Commits">
            <summary>
            Lookup and enumerate commits in the repository.
            Iterating this collection directly starts walking from the HEAD.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Branches">
            <summary>
            Lookup and enumerate branches in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Tags">
            <summary>
            Lookup and enumerate tags in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Stashes">
            <summary>
             Lookup and enumerate stashes in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Info">
            <summary>
            Provides high level information about this repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Diff">
            <summary>
            Provides access to diffing functionalities to show changes between the working tree and the index or a tree, changes between the index and a tree, changes between two trees, or changes between two files on disk.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Notes">
            <summary>
            Lookup notes in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Submodules">
            <summary>
            Submodules in the repository.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Repository.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Repository.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Repository.Init(System.String)">
            <summary>
            Initialize a repository at the specified <paramref name="path"/>.
            </summary>
            <param name="path">The path to the working folder when initializing a standard ".git" repository. Otherwise, when initializing a bare repository, the path to the expected location of this later.</param>
            <returns>The path to the created repository.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Init(System.String,System.Boolean)">
            <summary>
            Initialize a repository at the specified <paramref name="path"/>.
            </summary>
            <param name="path">The path to the working folder when initializing a standard ".git" repository. Otherwise, when initializing a bare repository, the path to the expected location of this later.</param>
            <param name="isBare">true to initialize a bare repository. False otherwise, to initialize a standard ".git" repository.</param>
            <returns>The path to the created repository.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Init(System.String,System.String)">
            <summary>
            Initialize a repository by explictly setting the path to both the working directory and the git directory.
            </summary>
            <param name="workingDirectoryPath">The path to the working directory.</param>
            <param name="gitDirectoryPath">The path to the git repository to be created.</param>
            <returns>The path to the created repository.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Lookup(LibGit2Sharp.ObjectId)">
            <summary>
            Try to lookup an object by its <see cref="T:LibGit2Sharp.ObjectId"/>. If no matching object is found, null will be returned.
            </summary>
            <param name="id">The id to lookup.</param>
            <returns>The <see cref="T:LibGit2Sharp.GitObject"/> or null if it was not found.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Lookup(System.String)">
            <summary>
            Try to lookup an object by its sha or a reference canonical name. If no matching object is found, null will be returned.
            </summary>
            <param name="objectish">A revparse spec for the object to lookup.</param>
            <returns>The <see cref="T:LibGit2Sharp.GitObject"/> or null if it was not found.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Lookup(LibGit2Sharp.ObjectId,LibGit2Sharp.ObjectType)">
            <summary>
            Try to lookup an object by its <see cref="T:LibGit2Sharp.ObjectId"/> and <see cref="T:LibGit2Sharp.ObjectType"/>. If no matching object is found, null will be returned.
            </summary>
            <param name="id">The id to lookup.</param>
            <param name="type">The kind of GitObject being looked up</param>
            <returns>The <see cref="T:LibGit2Sharp.GitObject"/> or null if it was not found.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Lookup(System.String,LibGit2Sharp.ObjectType)">
            <summary>
            Try to lookup an object by its sha or a reference canonical name and <see cref="T:LibGit2Sharp.ObjectType"/>. If no matching object is found, null will be returned.
            </summary>
            <param name="objectish">A revparse spec for the object to lookup.</param>
            <param name="type">The kind of <see cref="T:LibGit2Sharp.GitObject"/> being looked up</param>
            <returns>The <see cref="T:LibGit2Sharp.GitObject"/> or null if it was not found.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.ListRemoteReferences(System.String)">
            <summary>
            Lists the Remote Repository References.
            </summary>
            <para>
            Does not require a local Repository. The retrieved
            <see cref="P:LibGit2Sharp.IBelongToARepository.Repository"/>
            throws <see cref="T:System.InvalidOperationException"/> in this case.
            </para>
            <param name="url">The url to list from.</param>
            <returns>The references in the remote repository.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.ListRemoteReferences(System.String,LibGit2Sharp.Handlers.CredentialsHandler)">
            <summary>
            Lists the Remote Repository References.
            </summary>
            <para>
            Does not require a local Repository. The retrieved
            <see cref="P:LibGit2Sharp.IBelongToARepository.Repository"/>
            throws <see cref="T:System.InvalidOperationException"/> in this case.
            </para>
            <param name="url">The url to list from.</param>
            <param name="credentialsProvider">The <see cref="T:System.Func`1"/> used to connect to remote repository.</param>
            <returns>The references in the remote repository.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Discover(System.String)">
            <summary>
            Probe for a git repository.
            <para>The lookup start from <paramref name="startingPath"/> and walk upward parent directories if nothing has been found.</para>
            </summary>
            <param name="startingPath">The base path where the lookup starts.</param>
            <returns>The path to the git repository, or null if no repository was found.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Clone(System.String,System.String)">
            <summary>
            Clone using default options.
            </summary>
            <exception cref="T:LibGit2Sharp.RecurseSubmodulesException">This exception is thrown when there
            is an error is encountered while recursively cloning submodules. The inner exception
            will contain the original exception. The initially cloned repository would
            be reported through the <see cref="P:LibGit2Sharp.RecurseSubmodulesException.InitialRepositoryPath"/>
            property.</exception>"
            <exception cref="T:LibGit2Sharp.UserCancelledException">Exception thrown when the cancelling
            the clone of the initial repository.</exception>"
            <param name="sourceUrl">URI for the remote repository</param>
            <param name="workdirPath">Local path to clone into</param>
            <returns>The path to the created repository.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Clone(System.String,System.String,LibGit2Sharp.CloneOptions)">
            <summary>
            Clone with specified options.
            </summary>
            <exception cref="T:LibGit2Sharp.RecurseSubmodulesException">This exception is thrown when there
            is an error is encountered while recursively cloning submodules. The inner exception
            will contain the original exception. The initially cloned repository would
            be reported through the <see cref="P:LibGit2Sharp.RecurseSubmodulesException.InitialRepositoryPath"/>
            property.</exception>"
            <exception cref="T:LibGit2Sharp.UserCancelledException">Exception thrown when the cancelling
            the clone of the initial repository.</exception>"
            <param name="sourceUrl">URI for the remote repository</param>
            <param name="workdirPath">Local path to clone into</param>
            <param name="options"><see cref="T:LibGit2Sharp.CloneOptions"/> controlling clone behavior</param>
            <returns>The path to the created repository.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.RecursivelyCloneSubmodules(LibGit2Sharp.CloneOptions,System.String,System.Int32)">
            <summary>
            Recursively clone submodules if directed to do so by the clone options.
            </summary>
            <param name="options">Options controlling clone behavior.</param>
            <param name="repoPath">Path of the parent repository.</param>
            <param name="recursionDepth">The current depth of the recursion.</param>
        </member>
        <member name="M:LibGit2Sharp.Repository.OnRepositoryOperationStarting(LibGit2Sharp.Handlers.RepositoryOperationStarting,LibGit2Sharp.RepositoryOperationContext)">
            <summary>
            If a callback has been provided to notify callers that we are
            either starting to work on a repository.
            </summary>
            <param name="repositoryChangedCallback">The callback to notify change.</param>
            <param name="context">Context of the repository this operation affects.</param>
            <returns>true to continue the operation, false to cancel.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Blame(System.String,LibGit2Sharp.BlameOptions)">
            <summary>
            Find where each line of a file originated.
            </summary>
            <param name="path">Path of the file to blame.</param>
            <param name="options">Specifies optional parameters; if null, the defaults are used.</param>
            <returns>The blame for the file.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Checkout(System.String,LibGit2Sharp.CheckoutOptions)">
            <summary>
            Checkout the specified <see cref="T:LibGit2Sharp.Branch"/>, reference or SHA.
            <para>
              If the committishOrBranchSpec parameter resolves to a branch name, then the checked out HEAD will
              will point to the branch. Otherwise, the HEAD will be detached, pointing at the commit sha.
            </para>
            </summary>
            <param name="committishOrBranchSpec">A revparse spec for the commit or branch to checkout.</param>
            <param name="options"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Checkout(LibGit2Sharp.Branch,LibGit2Sharp.CheckoutOptions)">
            <summary>
            Checkout the tip commit of the specified <see cref="T:LibGit2Sharp.Branch"/> object. If this commit is the
            current tip of the branch, will checkout the named branch. Otherwise, will checkout the tip commit
            as a detached HEAD.
            </summary>
            <param name="branch">The <see cref="T:LibGit2Sharp.Branch"/> to check out.</param>
            <param name="options"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Checkout(LibGit2Sharp.Commit,LibGit2Sharp.CheckoutOptions)">
            <summary>
            Checkout the specified <see cref="T:LibGit2Sharp.Commit"/>.
            <para>
              Will detach the HEAD and make it point to this commit sha.
            </para>
            </summary>
            <param name="commit">The <see cref="T:LibGit2Sharp.Commit"/> to check out.</param>
            <param name="options"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Checkout(LibGit2Sharp.Tree,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.CheckoutOptions)">
            <summary>
            Checkout the specified tree.
            </summary>
            <param name="tree">The <see cref="T:LibGit2Sharp.Tree"/> to checkout.</param>
            <param name="paths">The paths to checkout.</param>
            <param name="options">Collection of parameters controlling checkout behavior.</param>
        </member>
        <member name="M:LibGit2Sharp.Repository.CheckoutTree(LibGit2Sharp.Tree,System.Collections.Generic.IList{System.String},LibGit2Sharp.Core.IConvertableToGitCheckoutOpts)">
            <summary>
            Checkout the specified tree.
            </summary>
            <param name="tree">The <see cref="T:LibGit2Sharp.Tree"/> to checkout.</param>
            <param name="paths">The paths to checkout.</param>
            <param name="opts">Collection of parameters controlling checkout behavior.</param>
        </member>
        <member name="M:LibGit2Sharp.Repository.Reset(LibGit2Sharp.ResetMode,LibGit2Sharp.Commit)">
            <summary>
            Sets the current <see cref="P:LibGit2Sharp.Repository.Head"/> to the specified commit and optionally resets the <see cref="P:LibGit2Sharp.Repository.Index"/> and
            the content of the working tree to match.
            </summary>
            <param name="resetMode">Flavor of reset operation to perform.</param>
            <param name="commit">The target commit object.</param>
        </member>
        <member name="M:LibGit2Sharp.Repository.Reset(LibGit2Sharp.ResetMode,LibGit2Sharp.Commit,LibGit2Sharp.CheckoutOptions)">
            <summary>
            Sets <see cref="P:LibGit2Sharp.Repository.Head"/> to the specified commit and optionally resets the <see cref="P:LibGit2Sharp.Repository.Index"/> and
            the content of the working tree to match.
            </summary>
            <param name="resetMode">Flavor of reset operation to perform.</param>
            <param name="commit">The target commit object.</param>
            <param name="opts">Collection of parameters controlling checkout behavior.</param>
        </member>
        <member name="M:LibGit2Sharp.Repository.CheckoutPaths(System.String,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.CheckoutOptions)">
            <summary>
            Updates specifed paths in the index and working directory with the versions from the specified branch, reference, or SHA.
            <para>
            This method does not switch branches or update the current repository HEAD.
            </para>
            </summary>
            <param name = "committishOrBranchSpec">A revparse spec for the commit or branch to checkout paths from.</param>
            <param name="paths">The paths to checkout. Will throw if null is passed in. Passing an empty enumeration results in nothing being checked out.</param>
            <param name="checkoutOptions">Collection of parameters controlling checkout behavior.</param>
        </member>
        <member name="M:LibGit2Sharp.Repository.Commit(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,LibGit2Sharp.CommitOptions)">
            <summary>
            Stores the content of the <see cref="P:LibGit2Sharp.Repository.Index"/> as a new <see cref="T:LibGit2Sharp.Commit"/> into the repository.
            The tip of the <see cref="P:LibGit2Sharp.Repository.Head"/> will be used as the parent of this new Commit.
            Once the commit is created, the <see cref="P:LibGit2Sharp.Repository.Head"/> will move forward to point at it.
            </summary>
            <param name="message">The description of why a change was made to the repository.</param>
            <param name="author">The <see cref="T:LibGit2Sharp.Signature"/> of who made the change.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Signature"/> of who added the change to the repository.</param>
            <param name="options">The <see cref="T:LibGit2Sharp.CommitOptions"/> that specify the commit behavior.</param>
            <returns>The generated <see cref="T:LibGit2Sharp.Commit"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.RemoveUntrackedFiles">
            <summary>
            Clean the working tree by removing files that are not under version control.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Repository.Merge(LibGit2Sharp.Commit,LibGit2Sharp.Signature,LibGit2Sharp.MergeOptions)">
            <summary>
            Merges changes from commit into the branch pointed at by HEAD.
            </summary>
            <param name="commit">The commit to merge into the branch pointed at by HEAD.</param>
            <param name="merger">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the merge.</param>
            <param name="options">Specifies optional parameters controlling merge behavior; if null, the defaults are used.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Merge(LibGit2Sharp.Branch,LibGit2Sharp.Signature,LibGit2Sharp.MergeOptions)">
            <summary>
            Merges changes from branch into the branch pointed at by HEAD.
            </summary>
            <param name="branch">The branch to merge into the branch pointed at by HEAD.</param>
            <param name="merger">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the merge.</param>
            <param name="options">Specifies optional parameters controlling merge behavior; if null, the defaults are used.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Merge(System.String,LibGit2Sharp.Signature,LibGit2Sharp.MergeOptions)">
            <summary>
            Merges changes from the commit into the branch pointed at by HEAD.
            </summary>
            <param name="committish">The commit to merge into the branch pointed at by HEAD.</param>
            <param name="merger">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the merge.</param>
            <param name="options">Specifies optional parameters controlling merge behavior; if null, the defaults are used.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.MergeFetchedRefs(LibGit2Sharp.Signature,LibGit2Sharp.MergeOptions)">
            <summary>
            Merge the reference that was recently fetched. This will merge
            the branch on the fetched remote that corresponded to the
            current local branch when we did the fetch.  This is the
            second step in performing a pull operation (after having
            performed said fetch).
            </summary>
            <param name="merger">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the merge.</param>
            <param name="options">Specifies optional parameters controlling merge behavior; if null, the defaults are used.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Revert(LibGit2Sharp.Commit,LibGit2Sharp.Signature,LibGit2Sharp.RevertOptions)">
            <summary>
            Revert the specified commit.
            <para>
             If the revert is successful but there are no changes to commit,
             then the <see cref="T:LibGit2Sharp.RevertStatus"/> will be <see cref="F:LibGit2Sharp.RevertStatus.NothingToRevert"/>.
             If the revert is successful and there are changes to revert, then
             the <see cref="T:LibGit2Sharp.RevertStatus"/> will be <see cref="F:LibGit2Sharp.RevertStatus.Reverted"/>.
             If the revert resulted in conflicts, then the <see cref="T:LibGit2Sharp.RevertStatus"/>
             will be <see cref="F:LibGit2Sharp.RevertStatus.Conflicts"/>.
            </para>
            </summary>
            <param name="commit">The <see cref="M:LibGit2Sharp.Repository.Commit(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,LibGit2Sharp.CommitOptions)"/> to revert.</param>
            <param name="reverter">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the revert.</param>
            <param name="options"><see cref="T:LibGit2Sharp.RevertOptions"/> controlling revert behavior.</param>
            <returns>The result of the revert.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.CherryPick(LibGit2Sharp.Commit,LibGit2Sharp.Signature,LibGit2Sharp.CherryPickOptions)">
            <summary>
            Cherry-picks the specified commit.
            </summary>
            <param name="commit">The <see cref="M:LibGit2Sharp.Repository.Commit(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,LibGit2Sharp.CommitOptions)"/> to cherry-pick.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the cherry pick.</param>
            <param name="options"><see cref="T:LibGit2Sharp.CherryPickOptions"/> controlling cherry pick behavior.</param>
            <returns>The result of the cherry pick.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Merge(LibGit2Sharp.Core.Handles.AnnotatedCommitHandle[],LibGit2Sharp.Signature,LibGit2Sharp.MergeOptions)">
            <summary>
            Internal implementation of merge.
            </summary>
            <param name="annotatedCommits">Merge heads to operate on.</param>
            <param name="merger">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the merge.</param>
            <param name="options">Specifies optional parameters controlling merge behavior; if null, the defaults are used.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.NormalMerge(LibGit2Sharp.Core.Handles.AnnotatedCommitHandle[],LibGit2Sharp.Signature,LibGit2Sharp.MergeOptions)">
            <summary>
            Perform a normal merge (i.e. a non-fast-forward merge).
            </summary>
            <param name="annotatedCommits">The merge head handles to merge.</param>
            <param name="merger">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the merge.</param>
            <param name="options">Specifies optional parameters controlling merge behavior; if null, the defaults are used.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.FastForwardMerge(LibGit2Sharp.Core.Handles.AnnotatedCommitHandle,LibGit2Sharp.MergeOptions)">
            <summary>
            Perform a fast-forward merge.
            </summary>
            <param name="annotatedCommit">The merge head handle to fast-forward merge.</param>
            <param name="options">Options controlling merge behavior.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="P:LibGit2Sharp.Repository.MergeHeads">
            <summary>
            Gets the references to the tips that are currently being merged.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Repository.Stage(System.String,LibGit2Sharp.StageOptions)">
             <summary>
             Promotes to the staging area the latest modifications of a file in the working directory (addition, updation or removal).
            
             If this path is ignored by configuration then it will not be staged unless <see cref="P:LibGit2Sharp.StageOptions.IncludeIgnored"/> is unset.
             </summary>
             <param name="path">The path of the file within the working directory.</param>
             <param name="stageOptions">Determines how paths will be staged.</param>
        </member>
        <member name="M:LibGit2Sharp.Repository.Stage(System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.StageOptions)">
             <summary>
             Promotes to the staging area the latest modifications of a collection of files in the working directory (addition, updation or removal).
            
             Any paths (even those listed explicitly) that are ignored by configuration will not be staged unless <see cref="P:LibGit2Sharp.StageOptions.IncludeIgnored"/> is unset.
             </summary>
             <param name="paths">The collection of paths of the files within the working directory.</param>
             <param name="stageOptions">Determines how paths will be staged.</param>
        </member>
        <member name="M:LibGit2Sharp.Repository.Unstage(System.String,LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Removes from the staging area all the modifications of a file since the latest commit (addition, updation or removal).
            </summary>
            <param name="path">The path of the file within the working directory.</param>
            <param name="explicitPathsOptions">
            The passed <paramref name="path"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
        </member>
        <member name="M:LibGit2Sharp.Repository.Unstage(System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Removes from the staging area all the modifications of a collection of file since the latest commit (addition, updation or removal).
            </summary>
            <param name="paths">The collection of paths of the files within the working directory.</param>
            <param name="explicitPathsOptions">
            The passed <paramref name="paths"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
        </member>
        <member name="M:LibGit2Sharp.Repository.Move(System.String,System.String)">
            <summary>
            Moves and/or renames a file in the working directory and promotes the change to the staging area.
            </summary>
            <param name="sourcePath">The path of the file within the working directory which has to be moved/renamed.</param>
            <param name="destinationPath">The target path of the file within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Repository.Move(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Moves and/or renames a collection of files in the working directory and promotes the changes to the staging area.
            </summary>
            <param name="sourcePaths">The paths of the files within the working directory which have to be moved/renamed.</param>
            <param name="destinationPaths">The target paths of the files within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Repository.Remove(System.String,System.Boolean,LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Removes a file from the staging area, and optionally removes it from the working directory as well.
            <para>
              If the file has already been deleted from the working directory, this method will only deal
              with promoting the removal to the staging area.
            </para>
            <para>
              The default behavior is to remove the file from the working directory as well.
            </para>
            <para>
              When not passing a <paramref name="explicitPathsOptions"/>, the passed path will be treated as
              a pathspec. You can for example use it to pass the relative path to a folder inside the working directory,
              so that all files beneath this folders, and the folder itself, will be removed.
            </para>
            </summary>
            <param name="path">The path of the file within the working directory.</param>
            <param name="removeFromWorkingDirectory">True to remove the file from the working directory, False otherwise.</param>
            <param name="explicitPathsOptions">
            The passed <paramref name="path"/> will be treated as an explicit path.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
        </member>
        <member name="M:LibGit2Sharp.Repository.Remove(System.Collections.Generic.IEnumerable{System.String},System.Boolean,LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Removes a collection of fileS from the staging, and optionally removes them from the working directory as well.
            <para>
              If a file has already been deleted from the working directory, this method will only deal
              with promoting the removal to the staging area.
            </para>
            <para>
              The default behavior is to remove the files from the working directory as well.
            </para>
            <para>
              When not passing a <paramref name="explicitPathsOptions"/>, the passed paths will be treated as
              a pathspec. You can for example use it to pass the relative paths to folders inside the working directory,
              so that all files beneath these folders, and the folders themselves, will be removed.
            </para>
            </summary>
            <param name="paths">The collection of paths of the files within the working directory.</param>
            <param name="removeFromWorkingDirectory">True to remove the files from the working directory, False otherwise.</param>
            <param name="explicitPathsOptions">
            The passed <paramref name="paths"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
        </member>
        <member name="M:LibGit2Sharp.Repository.RetrieveStatus(System.String)">
            <summary>
            Retrieves the state of a file in the working directory, comparing it against the staging area and the latest commit.
            </summary>
            <param name="filePath">The relative path within the working directory to the file.</param>
            <returns>A <see cref="T:LibGit2Sharp.FileStatus"/> representing the state of the <paramref name="filePath"/> parameter.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.RetrieveStatus(LibGit2Sharp.StatusOptions)">
            <summary>
            Retrieves the state of all files in the working directory, comparing them against the staging area and the latest commit.
            </summary>
            <param name="options">If set, the options that control the status investigation.</param>
            <returns>A <see cref="T:LibGit2Sharp.RepositoryStatus"/> holding the state of all the files.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Describe(LibGit2Sharp.Commit,LibGit2Sharp.DescribeOptions)">
            <summary>
            Finds the most recent annotated tag that is reachable from a commit.
            <para>
              If the tag points to the commit, then only the tag is shown. Otherwise,
              it suffixes the tag name with the number of additional commits on top
              of the tagged object and the abbreviated object name of the most recent commit.
            </para>
            <para>
              Optionally, the <paramref name="options"/> parameter allow to tweak the
              search strategy (considering lightweith tags, or even branches as reference points)
              and the formatting of the returned identifier.
            </para>
            </summary>
            <param name="commit">The commit to be described.</param>
            <param name="options">Determines how the commit will be described.</param>
            <returns>A descriptive identifier for the commit based on the nearest annotated tag.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.RevParse(System.String,LibGit2Sharp.Reference@,LibGit2Sharp.GitObject@)">
            <summary>
            Parse an extended SHA-1 expression and retrieve the object and the reference
            mentioned in the revision (if any).
            </summary>
            <param name="revision">An extended SHA-1 expression for the object to look up</param>
            <param name="reference">The reference mentioned in the revision (if any)</param>
            <param name="obj">The object which the revision resolves to</param>
        </member>
        <member name="T:LibGit2Sharp.RepositoryInformation">
            <summary>
            Provides high level information about a repository.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RepositoryInformation.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryInformation.Path">
            <summary>
            Gets the normalized path to the git repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryInformation.WorkingDirectory">
            <summary>
            Gets the normalized path to the working directory.
            <para>
              If the repository is bare, null is returned.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryInformation.IsBare">
            <summary>
            Indicates whether the repository has a working directory.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryInformation.IsShallow">
            <summary>
            Indicates whether the repository is shallow (the result of `git clone --depth ...`)
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryInformation.IsHeadDetached">
            <summary>
            Indicates whether the Head points to an arbitrary commit instead of the tip of a local branch.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryInformation.IsHeadUnborn">
            <summary>
            Indicates whether the Head points to a reference which doesn't exist.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryInformation.CurrentOperation">
            <summary>
            The pending interactive operation.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryInformation.Message">
            <summary>
            The message for a pending interactive operation.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RepositoryExtensions">
            <summary>
            Provides helper overloads to a <see cref="T:LibGit2Sharp.Repository"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Lookup``1(LibGit2Sharp.IRepository,System.String)">
            <summary>
            Try to lookup an object by its sha or a reference name.
            </summary>
            <typeparam name="T">The kind of <see cref="T:LibGit2Sharp.GitObject"/> to lookup.</typeparam>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being looked up.</param>
            <param name="objectish">The revparse spec for the object to lookup.</param>
            <returns>The retrieved <see cref="T:LibGit2Sharp.GitObject"/>, or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Lookup``1(LibGit2Sharp.IRepository,LibGit2Sharp.ObjectId)">
            <summary>
            Try to lookup an object by its <see cref="T:LibGit2Sharp.ObjectId"/>.
            </summary>
            <typeparam name="T">The kind of <see cref="T:LibGit2Sharp.GitObject"/> to lookup.</typeparam>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being looked up.</param>
            <param name="id">The id.</param>
            <returns>The retrieved <see cref="T:LibGit2Sharp.GitObject"/>, or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.ApplyTag(LibGit2Sharp.IRepository,System.String)">
            <summary>
            Creates a lightweight tag with the specified name. This tag will point at the commit pointed at by the <see cref="P:LibGit2Sharp.Repository.Head"/>.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="tagName">The name of the tag to create.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.ApplyTag(LibGit2Sharp.IRepository,System.String,System.String)">
            <summary>
            Creates a lightweight tag with the specified name. This tag will point at the <paramref name="objectish"/>.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="tagName">The name of the tag to create.</param>
            <param name="objectish">The revparse spec for the target object.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.ApplyTag(LibGit2Sharp.IRepository,System.String,LibGit2Sharp.Signature,System.String)">
            <summary>
            Creates an annotated tag with the specified name. This tag will point at the commit pointed at by the <see cref="P:LibGit2Sharp.Repository.Head"/>.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="tagName">The name of the tag to create.</param>
            <param name="tagger">The identity of the creator of this tag.</param>
            <param name="message">The annotation message.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.ApplyTag(LibGit2Sharp.IRepository,System.String,System.String,LibGit2Sharp.Signature,System.String)">
            <summary>
            Creates an annotated tag with the specified name. This tag will point at the <paramref name="objectish"/>.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="tagName">The name of the tag to create.</param>
            <param name="objectish">The revparse spec for the target object.</param>
            <param name="tagger">The identity of the creator of this tag.</param>
            <param name="message">The annotation message.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.CreateBranch(LibGit2Sharp.IRepository,System.String)">
            <summary>
            Creates a branch with the specified name. This branch will point at the commit pointed at by the <see cref="P:LibGit2Sharp.Repository.Head"/>.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="branchName">The name of the branch to create.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.CreateBranch(LibGit2Sharp.IRepository,System.String,LibGit2Sharp.Commit)">
            <summary>
            Creates a branch with the specified name. This branch will point at <paramref name="target"/>.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="branchName">The name of the branch to create.</param>
            <param name="target">The commit which should be pointed at by the Branch.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.CreateBranch(LibGit2Sharp.IRepository,System.String,System.String)">
            <summary>
            Creates a branch with the specified name. This branch will point at the commit pointed at by the <see cref="P:LibGit2Sharp.Repository.Head"/>.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="branchName">The name of the branch to create.</param>
            <param name="committish">The revparse spec for the target commit.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Reset(LibGit2Sharp.IRepository,LibGit2Sharp.ResetMode)">
            <summary>
            Sets the current <see cref="P:LibGit2Sharp.Repository.Head"/> and resets the <see cref="T:LibGit2Sharp.Index"/> and
            the content of the working tree to match.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="resetMode">Flavor of reset operation to perform.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Reset(LibGit2Sharp.IRepository,LibGit2Sharp.ResetMode,System.String)">
            <summary>
            Sets the current <see cref="P:LibGit2Sharp.Repository.Head"/> to the specified commitish and optionally resets the <see cref="T:LibGit2Sharp.Index"/> and
            the content of the working tree to match.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="resetMode">Flavor of reset operation to perform.</param>
            <param name="committish">A revparse spec for the target commit object.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Commit(LibGit2Sharp.IRepository,System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature)">
            <summary>
            Stores the content of the <see cref="P:LibGit2Sharp.Repository.Index"/> as a new <see cref="T:LibGit2Sharp.Commit"/> into the repository.
            The tip of the <see cref="P:LibGit2Sharp.Repository.Head"/> will be used as the parent of this new Commit.
            Once the commit is created, the <see cref="P:LibGit2Sharp.Repository.Head"/> will move forward to point at it.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="message">The description of why a change was made to the repository.</param>
            <param name="author">The <see cref="T:LibGit2Sharp.Signature"/> of who made the change.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Signature"/> of who added the change to the repository.</param>
            <returns>The generated <see cref="T:LibGit2Sharp.Commit"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Fetch(LibGit2Sharp.IRepository,System.String)">
            <summary>
            Fetch from the specified remote.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="remoteName">The name of the <see cref="T:LibGit2Sharp.Remote"/> to fetch from.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Fetch(LibGit2Sharp.IRepository,System.String,LibGit2Sharp.FetchOptions)">
            <summary>
            Fetch from the specified remote.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="remoteName">The name of the <see cref="T:LibGit2Sharp.Remote"/> to fetch from.</param>
            <param name="options"><see cref="T:LibGit2Sharp.FetchOptions"/> controlling fetch behavior</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Checkout(LibGit2Sharp.IRepository,System.String)">
            <summary>
            Checkout the specified <see cref="T:LibGit2Sharp.Branch"/>, reference or SHA.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="commitOrBranchSpec">A revparse spec for the commit or branch to checkout.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Checkout(LibGit2Sharp.IRepository,LibGit2Sharp.Branch)">
            <summary>
            Checkout the commit pointed at by the tip of the specified <see cref="T:LibGit2Sharp.Branch"/>.
            <para>
              If this commit is the current tip of the branch as it exists in the repository, the HEAD
              will point to this branch. Otherwise, the HEAD will be detached, pointing at the commit sha.
            </para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="branch">The <see cref="T:LibGit2Sharp.Branch"/> to check out.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Checkout(LibGit2Sharp.IRepository,LibGit2Sharp.Commit)">
            <summary>
            Checkout the specified <see cref="T:LibGit2Sharp.Commit"/>.
            <para>
              Will detach the HEAD and make it point to this commit sha.
            </para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="commit">The <see cref="T:LibGit2Sharp.Commit"/> to check out.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Committishes(LibGit2Sharp.Repository,System.Object,System.Boolean)">
            <summary>
            Dereferences the passed identifier to a commit. If the identifier is enumerable, all items are dereferenced.
            </summary>
            <param name="repo">Repository to search</param>
            <param name="identifier">Committish to dereference</param>
            <param name="throwIfNotFound">If true, allow thrown exceptions to propagate. If false, exceptions will be swallowed and null returned.</param>
            <returns>A series of commit <see cref="T:LibGit2Sharp.ObjectId"/>s which identify commit objects.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Committish(LibGit2Sharp.Repository,System.Object)">
            <summary>
            Dereference the identifier to a commit. If the identifier is enumerable, dereference the first element.
            </summary>
            <param name="repo">The <see cref="T:LibGit2Sharp.Repository"/> to search</param>
            <param name="identifier">Committish to dereference</param>
            <returns>An <see cref="T:LibGit2Sharp.ObjectId"/> for a commit object.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Merge(LibGit2Sharp.IRepository,LibGit2Sharp.Branch,LibGit2Sharp.Signature)">
            <summary>
            Merges changes from branch into the branch pointed at by HEAD.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="branch">The branch to merge into the branch pointed at by HEAD.</param>
            <param name="merger">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the merge.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Merge(LibGit2Sharp.IRepository,System.String,LibGit2Sharp.Signature)">
            <summary>
            Merges changes from the commit into the branch pointed at by HEAD.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="committish">The commit to merge into the branch pointed at by HEAD.</param>
            <param name="merger">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the merge.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Checkout(LibGit2Sharp.IRepository,LibGit2Sharp.Branch,LibGit2Sharp.CheckoutOptions)">
            <summary>
            Checkout the tip commit of the specified <see cref="T:LibGit2Sharp.Branch"/> object. If this commit is the
            current tip of the branch, will checkout the named branch. Otherwise, will checkout the tip commit
            as a detached HEAD.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="branch">The <see cref="T:LibGit2Sharp.Branch"/> to check out.</param>
            <param name="options"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Checkout(LibGit2Sharp.IRepository,LibGit2Sharp.Commit,LibGit2Sharp.CheckoutOptions)">
            <summary>
            Checkout the specified <see cref="T:LibGit2Sharp.Commit"/>.
            <para>
              Will detach the HEAD and make it point to this commit sha.
            </para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="commit">The <see cref="T:LibGit2Sharp.Commit"/> to check out.</param>
            <param name="options"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Checkout(LibGit2Sharp.IRepository,System.String,LibGit2Sharp.CheckoutOptions)">
            <summary>
            Checkout the specified <see cref="T:LibGit2Sharp.Branch"/>, reference or SHA.
            <para>
              If the committishOrBranchSpec parameter resolves to a branch name, then the checked out HEAD will
              will point to the branch. Otherwise, the HEAD will be detached, pointing at the commit sha.
            </para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="committishOrBranchSpec">A revparse spec for the commit or branch to checkout.</param>
            <param name="options"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.CheckoutPaths(LibGit2Sharp.IRepository,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates specifed paths in the index and working directory with the versions from the specified branch, reference, or SHA.
            <para>
            This method does not switch branches or update the current repository HEAD.
            </para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name = "committishOrBranchSpec">A revparse spec for the commit or branch to checkout paths from.</param>
            <param name="paths">The paths to checkout. Will throw if null is passed in. Passing an empty enumeration results in nothing being checked out.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Reset(LibGit2Sharp.IRepository,LibGit2Sharp.ResetMode,LibGit2Sharp.Commit)">
            <summary>
            Sets the current <see cref="P:LibGit2Sharp.IRepository.Head"/> to the specified commit and optionally resets the <see cref="T:LibGit2Sharp.Index"/> and
            the content of the working tree to match.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="resetMode">Flavor of reset operation to perform.</param>
            <param name="commit">The target commit object.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Blame(LibGit2Sharp.IRepository,System.String)">
            <summary>
            Find where each line of a file originated.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="path">Path of the file to blame.</param>
            <returns>The blame for the file.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.CherryPick(LibGit2Sharp.IRepository,LibGit2Sharp.Commit,LibGit2Sharp.Signature)">
            <summary>
            Cherry-picks the specified commit.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="commit">The <see cref="T:LibGit2Sharp.Commit"/> to cherry-pick.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the cherry pick.</param>
            <returns>The result of the cherry pick.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Merge(LibGit2Sharp.IRepository,LibGit2Sharp.Commit,LibGit2Sharp.Signature)">
            <summary>
            Merges changes from commit into the branch pointed at by HEAD.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="commit">The commit to merge into the branch pointed at by HEAD.</param>
            <param name="merger">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the merge.</param>
            <returns>The <see cref="T:LibGit2Sharp.MergeResult"/> of the merge.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Revert(LibGit2Sharp.IRepository,LibGit2Sharp.Commit,LibGit2Sharp.Signature)">
            <summary>
            Revert the specified commit.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="commit">The <see cref="T:LibGit2Sharp.Commit"/> to revert.</param>
            <param name="reverter">The <see cref="T:LibGit2Sharp.Signature"/> of who is performing the revert.</param>
            <returns>The result of the revert.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Stage(LibGit2Sharp.IRepository,System.String)">
            <summary>
            Promotes to the staging area the latest modifications of a file in the working directory (addition, updation or removal).
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="path">The path of the file within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Stage(LibGit2Sharp.IRepository,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Promotes to the staging area the latest modifications of a collection of files in the working directory (addition, updation or removal).
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="paths">The collection of paths of the files within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Unstage(LibGit2Sharp.IRepository,System.String)">
            <summary>
            Removes from the staging area all the modifications of a file since the latest commit (addition, updation or removal).
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="path">The path of the file within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Unstage(LibGit2Sharp.IRepository,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes from the staging area all the modifications of a collection of file since the latest commit (addition, updation or removal).
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="paths">The collection of paths of the files within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Remove(LibGit2Sharp.IRepository,System.String)">
            <summary>
            Removes a file from the staging area, and optionally removes it from the working directory as well.
            <para>
              If the file has already been deleted from the working directory, this method will only deal
              with promoting the removal to the staging area.
            </para>
            <para>
              The default behavior is to remove the file from the working directory as well.
            </para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="path">The path of the file within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Remove(LibGit2Sharp.IRepository,System.String,System.Boolean)">
            <summary>
            Removes a file from the staging area, and optionally removes it from the working directory as well.
            <para>
              If the file has already been deleted from the working directory, this method will only deal
              with promoting the removal to the staging area.
            </para>
            <para>
              The default behavior is to remove the file from the working directory as well.
            </para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="path">The path of the file within the working directory.</param>
            <param name="removeFromWorkingDirectory">True to remove the file from the working directory, False otherwise.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Remove(LibGit2Sharp.IRepository,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes a collection of fileS from the staging, and optionally removes them from the working directory as well.
            <para>
              If a file has already been deleted from the working directory, this method will only deal
              with promoting the removal to the staging area.
            </para>
            <para>
              The default behavior is to remove the files from the working directory as well.
            </para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="paths">The collection of paths of the files within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Remove(LibGit2Sharp.IRepository,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Removes a collection of fileS from the staging, and optionally removes them from the working directory as well.
            <para>
              If a file has already been deleted from the working directory, this method will only deal
              with promoting the removal to the staging area.
            </para>
            <para>
              The default behavior is to remove the files from the working directory as well.
            </para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="paths">The collection of paths of the files within the working directory.</param>
            <param name="removeFromWorkingDirectory">True to remove the files from the working directory, False otherwise.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.RetrieveStatus(LibGit2Sharp.IRepository)">
            <summary>
            Retrieves the state of all files in the working directory, comparing them against the staging area and the latest commit.
            </summary>
            <returns>A <see cref="T:LibGit2Sharp.RepositoryStatus"/> holding the state of all the files.</returns>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Describe(LibGit2Sharp.IRepository,LibGit2Sharp.Commit)">
            <summary>
            Finds the most recent annotated tag that is reachable from a commit.
            <para>
              If the tag points to the commit, then only the tag is shown. Otherwise,
              it suffixes the tag name with the number of additional commits on top
              of the tagged object and the abbreviated object name of the most recent commit.
            </para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="commit">The commit to be described.</param>
            <returns>A descriptive identifier for the commit based on the nearest annotated tag.</returns>
        </member>
        <member name="T:LibGit2Sharp.RepositoryOptions">
            <summary>
            Provides optional additional information to the Repository to be opened.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOptions.WorkingDirectoryPath">
            <summary>
            Overrides the probed location of the working directory of a standard repository,
            or, combined with <see cref="P:LibGit2Sharp.RepositoryOptions.IndexPath"/>, would
            allow to work against a bare repository as it was a standard one.
            <para>
              The path has to lead to an existing directory.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOptions.IndexPath">
            <summary>
            Overrides the probed location of the Index file of a standard repository,
            or, combined with <see cref="P:LibGit2Sharp.RepositoryOptions.WorkingDirectoryPath"/>, would
            allow to work against a bare repository as it was a standard one.
            <para>
              The path has either to lead to an existing valid Index file,
              or to a non existent Index file which will be eventually created.
            </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOptions.GlobalConfigurationLocation">
            <summary>
            Overrides the probed location of the Global configuration file of a repository.
            <para>
              The path has either to lead to an existing valid configuration file,
              or to a non existent configuration file which will be eventually created.
            </para>
            <seealso cref="M:LibGit2Sharp.GlobalSettings.SetConfigSearchPaths(LibGit2Sharp.ConfigurationLevel,System.String[])"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOptions.XdgConfigurationLocation">
            <summary>
            Overrides the probed location of the XDG configuration file of a repository.
            <para>
              The path has either to lead to an existing valid configuration file,
              or to a non existent configuration file which will be eventually created.
            </para>
            <seealso cref="M:LibGit2Sharp.GlobalSettings.SetConfigSearchPaths(LibGit2Sharp.ConfigurationLevel,System.String[])"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOptions.SystemConfigurationLocation">
            <summary>
            Overrides the probed location of the System configuration file of a repository.
            <para>
              The path has to lead to an existing valid configuration file,
              or to a non existent configuration file which will be eventually created.
            </para>
            <seealso cref="M:LibGit2Sharp.GlobalSettings.SetConfigSearchPaths(LibGit2Sharp.ConfigurationLevel,System.String[])"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOptions.Identity">
            <summary>
            Overrides the default identity to be used when creating reflog entries.
            <para>
              When unset the identity will be retreived from the repository's configuration.
              When no identity can be found in the repository configuration stores, a fake
              identity ("unknown" as both name and email), will be used.
            </para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RepositoryStatus">
            <summary>
            Holds the result of the determination of the state of the working directory.
            <para>Only files that differ from the current index and/or commit will be considered.</para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RepositoryStatus.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Item(System.String)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.StatusEntry"/> for the specified relative path.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RepositoryStatus.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryStatus.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Added">
            <summary>
            List of files added to the index, which are not in the current commit
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Staged">
            <summary>
            List of files added to the index, which are already in the current commit with different content
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Removed">
            <summary>
            List of files removed from the index but are existent in the current commit
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Missing">
            <summary>
            List of files existent in the index but are missing in the working directory
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Modified">
            <summary>
            List of files with unstaged modifications. A file may be modified and staged at the same time if it has been modified after adding.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Untracked">
            <summary>
            List of files existing in the working directory but are neither tracked in the index nor in the current commit.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Ignored">
            <summary>
            List of files existing in the working directory that are ignored.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.RenamedInIndex">
            <summary>
            List of files that were renamed and staged.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.RenamedInWorkDir">
            <summary>
            List of files that were renamed in the working directory but have not been staged.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Unaltered">
            <summary>
            List of files that were unmodified in the working directory.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.IsDirty">
            <summary>
            True if the index or the working directory has been altered since the last commit. False otherwise.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Signature">
            <summary>
            A signature
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Signature.#ctor(System.String,System.String,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.Signature"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="email">The email.</param>
            <param name="when">The when.</param>
        </member>
        <member name="M:LibGit2Sharp.Signature.#ctor(LibGit2Sharp.Identity,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.Signature"/> class.
            </summary>
            <param name="identity">The identity.</param>
            <param name="when">The when.</param>
        </member>
        <member name="P:LibGit2Sharp.Signature.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Signature.Email">
            <summary>
            Gets the email.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Signature.When">
            <summary>
            Gets the date when this signature happened.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Signature.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Signature"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.Signature"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Signature"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Signature.Equals(LibGit2Sharp.Signature)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.Signature"/> is equal to the current <see cref="T:LibGit2Sharp.Signature"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.Signature"/> to compare with the current <see cref="T:LibGit2Sharp.Signature"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.Signature"/> is equal to the current <see cref="T:LibGit2Sharp.Signature"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Signature.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.Signature.op_Equality(LibGit2Sharp.Signature,LibGit2Sharp.Signature)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.Signature"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Signature"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Signature"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.Signature.op_Inequality(LibGit2Sharp.Signature,LibGit2Sharp.Signature)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.Signature"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Signature"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Signature"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.Signature.ToString">
            <summary>
            Returns "<see cref="P:LibGit2Sharp.Signature.Name"/> &lt;<see cref="P:LibGit2Sharp.Signature.Email"/>&gt;" for the current <see cref="T:LibGit2Sharp.Signature"/>.
            </summary>
            <returns>The <see cref="P:LibGit2Sharp.Signature.Name"/> and <see cref="P:LibGit2Sharp.Signature.Email"/> of the current <see cref="T:LibGit2Sharp.Signature"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.SignatureHelpers.SafeBuildHandle(LibGit2Sharp.Signature)">
            <summary>
            Build the handle for the Signature, or return a handle
            to an empty signature.
            </summary>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="T:LibGit2Sharp.StatusEntry">
            <summary>
            Holds the calculated status of a particular file at a particular instant.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.StatusEntry.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StatusEntry.State">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.FileStatus"/> of the file.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StatusEntry.FilePath">
            <summary>
            Gets the relative new filepath to the working directory of the file.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StatusEntry.HeadToIndexRenameDetails">
            <summary>
            Gets the rename details from the HEAD to the Index, if this <see cref="T:LibGit2Sharp.FileStatus"/> contains <see cref="F:LibGit2Sharp.FileStatus.RenamedInIndex"/>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StatusEntry.IndexToWorkDirRenameDetails">
            <summary>
            Gets the rename details from the Index to the working directory, if this <see cref="T:LibGit2Sharp.FileStatus"/> contains <see cref="F:LibGit2Sharp.FileStatus.RenamedInWorkdir"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.StatusEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.StatusEntry"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.StatusEntry"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.StatusEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.StatusEntry.Equals(LibGit2Sharp.StatusEntry)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.StatusEntry"/> is equal to the current <see cref="T:LibGit2Sharp.StatusEntry"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.StatusEntry"/> to compare with the current <see cref="T:LibGit2Sharp.StatusEntry"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.StatusEntry"/> is equal to the current <see cref="T:LibGit2Sharp.StatusEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.StatusEntry.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.StatusEntry.op_Equality(LibGit2Sharp.StatusEntry,LibGit2Sharp.StatusEntry)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.StatusEntry"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.StatusEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.StatusEntry"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.StatusEntry.op_Inequality(LibGit2Sharp.StatusEntry,LibGit2Sharp.StatusEntry)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.StatusEntry"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.StatusEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.StatusEntry"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.SymbolicReference">
            <summary>
            A SymbolicReference is a reference that points to another reference
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SymbolicReference.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.SymbolicReference.Target">
            <summary>
            Gets the target of this <see cref="T:LibGit2Sharp.SymbolicReference"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SymbolicReference.ResolveToDirectReference">
            <summary>
            Recursively peels the target of the reference until a direct reference is encountered.
            </summary>
            <returns>The <see cref="T:LibGit2Sharp.DirectReference"/> this <see cref="T:LibGit2Sharp.SymbolicReference"/> points to.</returns>
        </member>
        <member name="T:LibGit2Sharp.Tag">
            <summary>
            A Tag
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Tag.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Tag.Annotation">
            <summary>
            Gets the optional information associated to this tag.
            <para>When the <see cref="T:LibGit2Sharp.Tag"/> is a lightweight tag, <c>null</c> is returned.</para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Tag.Target">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.GitObject"/> that this tag points to.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Tag.PeeledTarget">
            <summary>
            Gets the peeled <see cref="T:LibGit2Sharp.GitObject"/> that this tag points to.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Tag.IsAnnotated">
            <summary>
            Indicates whether the tag holds any metadata.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Tag.Shorten">
            <summary>
            Removes redundent leading namespaces (regarding the kind of
            reference being wrapped) from the canonical name.
            </summary>
            <returns>The friendly shortened name</returns>
        </member>
        <member name="T:LibGit2Sharp.TagAnnotation">
            <summary>
            A TagAnnotation
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TagAnnotation.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TagAnnotation.Name">
            <summary>
            Gets the name of this tag.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TagAnnotation.Message">
            <summary>
            Gets the message of this tag.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TagAnnotation.Target">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.GitObject"/> that this tag annotation points to.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TagAnnotation.Tagger">
            <summary>
            Gets the tagger.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.TagCollection">
            <summary>
            The collection of <see cref="T:LibGit2Sharp.Tag"/>s in a <see cref="T:LibGit2Sharp.Repository"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.#ctor(LibGit2Sharp.Repository)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.TagCollection"/> class.
            </summary>
            <param name="repo">The repo.</param>
        </member>
        <member name="P:LibGit2Sharp.TagCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.Tag"/> with the specified name.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Add(System.String,System.String,LibGit2Sharp.Signature,System.String)">
            <summary>
            Creates an annotated tag with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="objectish">Revparse spec for the target object.</param>
            <param name="tagger">The tagger.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Add(System.String,System.String,LibGit2Sharp.Signature,System.String,System.Boolean)">
            <summary>
            Creates an annotated tag with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="objectish">Revparse spec for the target object.</param>
            <param name="tagger">The tagger.</param>
            <param name="message">The message.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing tag, false otherwise.</param>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Add(System.String,System.String)">
            <summary>
            Creates a lightweight tag with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="objectish">Revparse spec for the target object.</param>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Add(System.String,System.String,System.Boolean)">
            <summary>
            Creates a lightweight tag with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="objectish">Revparse spec for the target object.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing tag, false otherwise.</param>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Add(System.String,LibGit2Sharp.GitObject,LibGit2Sharp.Signature,System.String)">
            <summary>
            Creates an annotated tag with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target <see cref="T:LibGit2Sharp.GitObject"/>.</param>
            <param name="tagger">The tagger.</param>
            <param name="message">The message.</param>
            <returns>The added <see cref="T:LibGit2Sharp.Tag"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Add(System.String,LibGit2Sharp.GitObject,LibGit2Sharp.Signature,System.String,System.Boolean)">
            <summary>
            Creates an annotated tag with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target <see cref="T:LibGit2Sharp.GitObject"/>.</param>
            <param name="tagger">The tagger.</param>
            <param name="message">The message.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing tag, false otherwise.</param>
            <returns>The added <see cref="T:LibGit2Sharp.Tag"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Add(System.String,LibGit2Sharp.GitObject)">
            <summary>
            Creates a lightweight tag with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target <see cref="T:LibGit2Sharp.GitObject"/>.</param>
            <returns>The added <see cref="T:LibGit2Sharp.Tag"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Add(System.String,LibGit2Sharp.GitObject,System.Boolean)">
            <summary>
            Creates a lightweight tag with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target <see cref="T:LibGit2Sharp.GitObject"/>.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing tag, false otherwise.</param>
            <returns>The added <see cref="T:LibGit2Sharp.Tag"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Remove(System.String)">
            <summary>
            Deletes the tag with the specified name.
            </summary>
            <param name="name">The short or canonical name of the tag to delete.</param>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Remove(LibGit2Sharp.Tag)">
            <summary>
            Deletes the tag with the specified name.
            </summary>
            <param name="tag">The tag to delete.</param>
        </member>
        <member name="T:LibGit2Sharp.Tree">
            <summary>
            A container which references a list of other <see cref="T:LibGit2Sharp.Tree"/>s and <see cref="T:LibGit2Sharp.Blob"/>s.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Tree.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Tree.Count">
            <summary>
            Gets the number of <see cref="T:LibGit2Sharp.TreeEntry"/> immediately under this <see cref="T:LibGit2Sharp.Tree"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Tree.Item(System.String)">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.TreeEntry"/> pointed at by the <paramref name="relativePath"/> in this <see cref="T:LibGit2Sharp.Tree"/> instance.
            </summary>
            <param name="relativePath">The relative path to the <see cref="T:LibGit2Sharp.TreeEntry"/> from this instance.</param>
            <returns><c>null</c> if nothing has been found, the <see cref="T:LibGit2Sharp.TreeEntry"/> otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.Tree.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.Tree.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:LibGit2Sharp.TreeDefinition">
            <summary>
            Holds the meta data of a <see cref="T:LibGit2Sharp.Tree"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.From(LibGit2Sharp.Tree)">
            <summary>
            Builds a <see cref="T:LibGit2Sharp.TreeDefinition"/> from an existing <see cref="T:LibGit2Sharp.Tree"/>.
            </summary>
            <param name="tree">The <see cref="T:LibGit2Sharp.Tree"/> to be processed.</param>
            <returns>A new <see cref="T:LibGit2Sharp.TreeDefinition"/> holding the meta data of the <paramref name="tree"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.From(LibGit2Sharp.Commit)">
            <summary>
            Builds a <see cref="T:LibGit2Sharp.TreeDefinition"/> from a <see cref="T:LibGit2Sharp.Commit"/>'s <see cref="T:LibGit2Sharp.Tree"/>.
            </summary>
            <param name="commit">The <see cref="T:LibGit2Sharp.Commit"/> whose tree is to be processed</param>
            <returns>A new <see cref="T:LibGit2Sharp.TreeDefinition"/> holding the meta data of the <paramref name="commit"/>'s <see cref="T:LibGit2Sharp.Tree"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> located at each of the
            specified <paramref name="treeEntryPaths"/>.
            </summary>
            <param name="treeEntryPaths">The paths within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <returns>The current <see cref="T:LibGit2Sharp.TreeDefinition"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.Remove(System.String)">
            <summary>
            Removes a <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> located the specified <paramref name="treeEntryPath"/> path.
            </summary>
            <param name="treeEntryPath">The path within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <returns>The current <see cref="T:LibGit2Sharp.TreeDefinition"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.Add(System.String,LibGit2Sharp.TreeEntryDefinition)">
            <summary>
            Adds or replaces a <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> at the specified <paramref name="targetTreeEntryPath"/> location.
            </summary>
            <param name="targetTreeEntryPath">The path within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <param name="treeEntryDefinition">The <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> to be stored at the described location.</param>
            <returns>The current <see cref="T:LibGit2Sharp.TreeDefinition"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.Add(System.String,LibGit2Sharp.TreeEntry)">
            <summary>
            Adds or replaces a <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>, built from the provided <see cref="T:LibGit2Sharp.TreeEntry"/>, at the specified <paramref name="targetTreeEntryPath"/> location.
            </summary>
            <param name="targetTreeEntryPath">The path within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <param name="treeEntry">The <see cref="T:LibGit2Sharp.TreeEntry"/> to be stored at the described location.</param>
            <returns>The current <see cref="T:LibGit2Sharp.TreeDefinition"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.Add(System.String,LibGit2Sharp.Blob,LibGit2Sharp.Mode)">
            <summary>
            Adds or replaces a <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>, dynamically built from the provided <see cref="T:LibGit2Sharp.Blob"/>, at the specified <paramref name="targetTreeEntryPath"/> location.
            </summary>
            <param name="targetTreeEntryPath">The path within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <param name="blob">The <see cref="T:LibGit2Sharp.Blob"/> to be stored at the described location.</param>
            <param name="mode">The file related <see cref="T:LibGit2Sharp.Mode"/> attributes.</param>
            <returns>The current <see cref="T:LibGit2Sharp.TreeDefinition"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.Add(System.String,System.String,LibGit2Sharp.Mode)">
            <summary>
            Adds or replaces a <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>, dynamically built from the content of the file, at the specified <paramref name="targetTreeEntryPath"/> location.
            </summary>
            <param name="targetTreeEntryPath">The path within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <param name="filePath">The path to the file from which a <see cref="T:LibGit2Sharp.Blob"/> will be built and stored at the described location. A relative path is allowed to be passed if the target
            <see cref="T:LibGit2Sharp.Repository"/> is a standard, non-bare, repository. The path will then be considered as a path relative to the root of the working directory.</param>
            <param name="mode">The file related <see cref="T:LibGit2Sharp.Mode"/> attributes.</param>
            <returns>The current <see cref="T:LibGit2Sharp.TreeDefinition"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.Add(System.String,LibGit2Sharp.Tree)">
            <summary>
            Adds or replaces a <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>, dynamically built from the provided <see cref="T:LibGit2Sharp.Tree"/>, at the specified <paramref name="targetTreeEntryPath"/> location.
            </summary>
            <param name="targetTreeEntryPath">The path within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <param name="tree">The <see cref="T:LibGit2Sharp.Tree"/> to be stored at the described location.</param>
            <returns>The current <see cref="T:LibGit2Sharp.TreeDefinition"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.Add(LibGit2Sharp.Submodule)">
            <summary>
            Adds or replaces a gitlink <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> equivalent to <paramref name="submodule"/>.
            </summary>
            <param name="submodule">The <see cref="T:LibGit2Sharp.Submodule"/> to be linked.</param>
            <returns>The current <see cref="T:LibGit2Sharp.TreeDefinition"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.AddGitLink(System.String,LibGit2Sharp.ObjectId)">
            <summary>
            Adds or replaces a gitlink <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>,
            referencing the commit identified by <paramref name="objectId"/>,
            at the specified <paramref name="targetTreeEntryPath"/> location.
            </summary>
            <param name="targetTreeEntryPath">The path within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <param name="objectId">The <see cref="T:LibGit2Sharp.ObjectId"/> of the commit to be linked at the described location.</param>
            <returns>The current <see cref="T:LibGit2Sharp.TreeDefinition"/>.</returns>
        </member>
        <member name="P:LibGit2Sharp.TreeDefinition.Item(System.String)">
            <summary>
            Retrieves the <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> located the specified <paramref name="treeEntryPath"/> path.
            </summary>
            <param name="treeEntryPath">The path within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <returns>The found <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> if any; null otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.TreeEntry">
            <summary>
            Representation of an entry in a <see cref="T:LibGit2Sharp.Tree"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeEntry.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntry.Mode">
            <summary>
            Gets the file mode.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntry.Name">
            <summary>
            Gets the filename.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntry.Path">
            <summary>
            Gets the path.
            <para>The path is expressed in a relative form from the latest known <see cref="T:LibGit2Sharp.Tree"/>. Path segments are separated with a forward or backslash, depending on the OS the libray is being run on."/></para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntry.Target">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.GitObject"/> being pointed at.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntry.TargetType">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.TreeEntryTargetType"/> of the <see cref="P:LibGit2Sharp.TreeEntry.Target"/> being pointed at.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntry"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.TreeEntry"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntry.Equals(LibGit2Sharp.TreeEntry)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.TreeEntry"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntry"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.TreeEntry"/> to compare with the current <see cref="T:LibGit2Sharp.TreeEntry"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.TreeEntry"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntry.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntry.op_Equality(LibGit2Sharp.TreeEntry,LibGit2Sharp.TreeEntry)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.TreeEntry"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.TreeEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.TreeEntry"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntry.op_Inequality(LibGit2Sharp.TreeEntry,LibGit2Sharp.TreeEntry)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.TreeEntry"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.TreeEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.TreeEntry"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.TreeEntryDefinition">
            <summary>
            Holds the meta data of a <see cref="T:LibGit2Sharp.TreeEntry"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeEntryDefinition.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryDefinition.Mode">
            <summary>
            Gets file mode.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryDefinition.TargetType">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.TreeEntryTargetType"/> of the target being pointed at.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryDefinition.TargetId">
            <summary>
            Gets the <see cref="T:LibGit2Sharp.ObjectId"/> of the target being pointed at.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeEntryDefinition.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntryDefinition.Equals(LibGit2Sharp.TreeEntryDefinition)">
            <summary>
            Determines whether the specified <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> to compare with the current <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntryDefinition.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntryDefinition.op_Equality(LibGit2Sharp.TreeEntryDefinition,LibGit2Sharp.TreeEntryDefinition)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntryDefinition.op_Inequality(LibGit2Sharp.TreeEntryDefinition,LibGit2Sharp.TreeEntryDefinition)">
            <summary>
            Tests if two <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.UserCancelledException">
            <summary>
            The exception that is thrown when an operation is canceled.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.UserCancelledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UserCancelledException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.UserCancelledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UserCancelledException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:LibGit2Sharp.UserCancelledException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UserCancelledException"/> class with a specified error message.
            </summary>
            <param name="format">A composite format string for use in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:LibGit2Sharp.UserCancelledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UserCancelledException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.UserCancelledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.UserCancelledException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.UsernamePasswordCredentials">
            <summary>
            Class that holds username and password credentials for remote repository access.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.UsernamePasswordCredentials.GitCredentialHandler(System.IntPtr@)">
            <summary>
            Callback to acquire a credential object.
            </summary>
            <param name="cred">The newly created credential object.</param>
            <returns>0 for success, &lt; 0 to indicate an error, &gt; 0 to indicate no credential was acquired.</returns>
        </member>
        <member name="P:LibGit2Sharp.UsernamePasswordCredentials.Username">
            <summary>
            Username for username/password authentication (as in HTTP basic auth).
            </summary>
        </member>
        <member name="P:LibGit2Sharp.UsernamePasswordCredentials.Password">
            <summary>
            Password for username/password authentication (as in HTTP basic auth).
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Version">
            <summary>
            Gets the current LibGit2Sharp version.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Version.#ctor">
            <summary>
            Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Version.InformationalVersion">
            <summary>
            Returns version of the LibGit2Sharp library.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Version.Features">
            <summary>
            Returns all the optional features that were compiled into
            libgit2.
            </summary>
            <returns>A <see cref="T:LibGit2Sharp.BuiltInFeatures"/> enumeration.</returns>
        </member>
        <member name="P:LibGit2Sharp.Version.LibGit2CommitSha">
            <summary>
            Returns the SHA hash for the libgit2 library.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Version.LibGit2SharpCommitSha">
            <summary>
            Returns the SHA hash for the LibGit2Sharp library.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Version.ToString">
            <summary>
            Returns a string representing the LibGit2Sharp version.
            </summary>
            <para>
              The format of the version number is as follows:
              <para>Major.Minor.Patch-LibGit2Sharp_abbrev_hash-libgit2_abbrev_hash (x86|x64 - features)</para>
            </para>
            <returns></returns>
        </member>
        <member name="T:LibGit2Sharp.SupportedCredentialTypes">
            <summary>
            Credential types supported by the server. If the server supports a particular type of
            authentication, it will be set to true.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SupportedCredentialTypes.UsernamePassword">
            <summary>
            Plain username and password combination
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SupportedCredentialTypes.Default">
            <summary>
            Ask Windows to provide its default credentials for the current user (e.g. NTLM)
            </summary>
        </member>
        <member name="T:LibGit2Sharp.StashApplyProgress">
            <summary>
            The current progress of the stash application.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashApplyProgress.None">
            <summary>
            Not passed by the callback. Used as dummy value.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashApplyProgress.LoadingStash">
            <summary>
            Loading the stashed data from the object database.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashApplyProgress.AnalyzeIndex">
            <summary>
            The stored index is being analyzed.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashApplyProgress.AnalyzeModified">
            <summary>
            The modified files are being analyzed.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashApplyProgress.AnalyzeUntracked">
            <summary>
            The untracked and ignored files are being analyzed.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashApplyProgress.CheckoutUntracked">
            <summary>
            The untracked files are being written to disk.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashApplyProgress.CheckoutModified">
            <summary>
            The modified files are being written to disk.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashApplyProgress.Done">
            <summary>
            The stash was applied successfully.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.StashApplyOptions">
            <summary>
            The options to be used for stash application.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StashApplyOptions.ApplyModifiers">
            <summary>
            <see cref="T:LibGit2Sharp.StashApplyModifiers"/> for controlling checkout index reinstating./>
            </summary>
            <value>The flags.</value>
        </member>
        <member name="P:LibGit2Sharp.StashApplyOptions.CheckoutOptions">
            <summary>
            <see cref="P:LibGit2Sharp.StashApplyOptions.CheckoutOptions"/> controlling checkout behavior.
            </summary>
            <value>The checkout options.</value>
        </member>
        <member name="P:LibGit2Sharp.StashApplyOptions.ProgressHandler">
            <summary>
            <see cref="T:LibGit2Sharp.Handlers.StashApplyProgressHandler"/> for controlling stash application progress./>
            </summary>
            <value>The progress handler.</value>
        </member>
        <member name="T:LibGit2Sharp.StashApplyModifiers">
            <summary>
            The flags which control whether the index should be reinstated.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashApplyModifiers.Default">
            <summary>
            Default. Will apply the stash and result in an index with conflicts
            if any arise.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashApplyModifiers.ReinstateIndex">
            <summary>
            In case any conflicts arise, this will not apply the stash.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.StashApplyStatus">
            <summary>
            The result of a stash application operation.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashApplyStatus.Applied">
            <summary>
            The stash application was successful.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashApplyStatus.Conflicts">
            <summary>
            The stash application ended up with conflicts.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashApplyStatus.NotFound">
            <summary>
            The stash index given was not found.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.StashApplyStatus.UncommittedChanges">
            <summary>
            The stash application was aborted due to uncommitted changes in the index.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Certificate">
            <summary>
            Top-level certificate type. The usable certificates inherit from this class.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CertificateX509">
            <summary>
            Conains a X509 certificate
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CertificateX509.#ctor">
            <summary>
            For mocking purposes
            </summary>
        </member>
        <member name="P:LibGit2Sharp.CertificateX509.Certificate">
            <summary>
            The certificate.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CertificateSsh">
            <summary>
            This class represents the hostkey which is avaiable when connecting to a SSH host.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CertificateSsh.#ctor">
            <summary>
            For mocking purposes
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CertificateSsh.HashMD5">
            <summary>
            The MD5 hash of the host. Meaningful if <see cref="F:LibGit2Sharp.CertificateSsh.HasMD5"/> is true
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CertificateSsh.HashSHA1">
            <summary>
            The SHA1 hash of the host. Meaningful if <see cref="F:LibGit2Sharp.CertificateSsh.HasSHA1"/> is true
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CertificateSsh.HasMD5">
            <summary>
            True if we have the MD5 hostkey hash from the server
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CertificateSsh.HasSHA1">
            <summary>
            True if we have the SHA1 hostkey hash from the server
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CertificateSsh.#ctor(LibGit2Sharp.Core.git_certificate_ssh*)">
            <summary>
            True if we have the SHA1 hostkey hash from the server
            </summary>public readonly bool HasSHA1;
        </member>
        <member name="T:LibGit2Sharp.IDiffResult">
            <summary>
              Marker interface to identify Diff results.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Commands">
            <summary>
            Fetch changes from the configured upstream remote and branch into the branch pointed at by HEAD.
            </summary>
            <summary>
            Class to serve as namespacing for the command-emulating methods
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Commands.Pull(LibGit2Sharp.Repository,LibGit2Sharp.Signature,LibGit2Sharp.PullOptions)">
            <summary>
            Fetch changes from the configured upstream remote and branch into the branch pointed at by HEAD.
            </summary>
            <param name="repository">The repository.</param>
            <param name="merger">The signature to use for the merge.</param>
            <param name="options">The options for fetch and merging.</param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Fetch(LibGit2Sharp.Repository,System.String,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.FetchOptions,System.String)">
            <summary>
            Perform a fetch
            </summary>
            <param name="repository">The repository in which to fetch.</param>
            <param name="remote">The remote to fetch from. Either as a remote name or a URL</param>
            <param name="options">Fetch options.</param>
            <param name="logMessage">Log message for any ref updates.</param>
            <param name="refspecs">List of refspecs to apply as active.</param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Stage(LibGit2Sharp.IRepository,System.String)">
             <summary>
             Promotes to the staging area the latest modifications of a file in the working directory (addition, updation or removal).
            
             If this path is ignored by configuration then it will not be staged unless <see cref="P:LibGit2Sharp.StageOptions.IncludeIgnored"/> is unset.
             </summary>
             <param name="repository">The repository in which to act</param>
             <param name="path">The path of the file within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Stage(LibGit2Sharp.IRepository,System.String,LibGit2Sharp.StageOptions)">
             <summary>
             Promotes to the staging area the latest modifications of a file in the working directory (addition, updation or removal).
            
             If this path is ignored by configuration then it will not be staged unless <see cref="P:LibGit2Sharp.StageOptions.IncludeIgnored"/> is unset.
             </summary>
             <param name="repository">The repository in which to act</param>
             <param name="path">The path of the file within the working directory.</param>
             <param name="stageOptions">Determines how paths will be staged.</param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Stage(LibGit2Sharp.IRepository,System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Promotes to the staging area the latest modifications of a collection of files in the working directory (addition, updation or removal).
            
             Any paths (even those listed explicitly) that are ignored by configuration will not be staged unless <see cref="P:LibGit2Sharp.StageOptions.IncludeIgnored"/> is unset.
             </summary>
             <param name="repository">The repository in which to act</param>
             <param name="paths">The collection of paths of the files within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Stage(LibGit2Sharp.IRepository,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.StageOptions)">
             <summary>
             Promotes to the staging area the latest modifications of a collection of files in the working directory (addition, updation or removal).
            
             Any paths (even those listed explicitly) that are ignored by configuration will not be staged unless <see cref="P:LibGit2Sharp.StageOptions.IncludeIgnored"/> is unset.
             </summary>
             <param name="repository">The repository in which to act</param>
             <param name="paths">The collection of paths of the files within the working directory.</param>
             <param name="stageOptions">Determines how paths will be staged.</param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Unstage(LibGit2Sharp.IRepository,System.String)">
            <summary>
            Removes from the staging area all the modifications of a file since the latest commit (addition, updation or removal).
            </summary>
            <param name="repository">The repository in which to act</param>
            <param name="path">The path of the file within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Unstage(LibGit2Sharp.IRepository,System.String,LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Removes from the staging area all the modifications of a file since the latest commit (addition, updation or removal).
            </summary>
            <param name="repository">The repository in which to act</param>
            <param name="path">The path of the file within the working directory.</param>
            <param name="explicitPathsOptions">
            The passed <paramref name="path"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Unstage(LibGit2Sharp.IRepository,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes from the staging area all the modifications of a collection of file since the latest commit (addition, updation or removal).
            </summary>
            <param name="repository">The repository in which to act</param>
            <param name="paths">The collection of paths of the files within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Unstage(LibGit2Sharp.IRepository,System.Collections.Generic.IEnumerable{System.String},LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Removes from the staging area all the modifications of a collection of file since the latest commit (addition, updation or removal).
            </summary>
            <param name="repository">The repository in which to act</param>
            <param name="paths">The collection of paths of the files within the working directory.</param>
            <param name="explicitPathsOptions">
            The passed <paramref name="paths"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Move(LibGit2Sharp.IRepository,System.String,System.String)">
            <summary>
            Moves and/or renames a file in the working directory and promotes the change to the staging area.
            </summary>
            <param name="repository">The repository to act on</param>
            <param name="sourcePath">The path of the file within the working directory which has to be moved/renamed.</param>
            <param name="destinationPath">The target path of the file within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Move(LibGit2Sharp.IRepository,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Moves and/or renames a collection of files in the working directory and promotes the changes to the staging area.
            </summary>
            <param name="repository">The repository to act on</param>
            <param name="sourcePaths">The paths of the files within the working directory which have to be moved/renamed.</param>
            <param name="destinationPaths">The target paths of the files within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Remove(LibGit2Sharp.IRepository,System.String)">
            <summary>
            Removes a file from the staging area, and optionally removes it from the working directory as well.
            <para>
              If the file has already been deleted from the working directory, this method will only deal
              with promoting the removal to the staging area.
            </para>
            <para>
              The default behavior is to remove the file from the working directory as well.
            </para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="path">The path of the file within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Remove(LibGit2Sharp.IRepository,System.String,System.Boolean)">
            <summary>
            Removes a file from the staging area, and optionally removes it from the working directory as well.
            <para>
              If the file has already been deleted from the working directory, this method will only deal
              with promoting the removal to the staging area.
            </para>
            <para>
              The default behavior is to remove the file from the working directory as well.
            </para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="path">The path of the file within the working directory.</param>
            <param name="removeFromWorkingDirectory">True to remove the file from the working directory, False otherwise.</param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Remove(LibGit2Sharp.IRepository,System.String,System.Boolean,LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Removes a file from the staging area, and optionally removes it from the working directory as well.
            <para>
              If the file has already been deleted from the working directory, this method will only deal
              with promoting the removal to the staging area.
            </para>
            <para>
              The default behavior is to remove the file from the working directory as well.
            </para>
            <para>
              When not passing a <paramref name="explicitPathsOptions"/>, the passed path will be treated as
              a pathspec. You can for example use it to pass the relative path to a folder inside the working directory,
              so that all files beneath this folders, and the folder itself, will be removed.
            </para>
            </summary>
            <param name="repository">The repository in which to operate</param>
            <param name="path">The path of the file within the working directory.</param>
            <param name="removeFromWorkingDirectory">True to remove the file from the working directory, False otherwise.</param>
            <param name="explicitPathsOptions">
            The passed <paramref name="path"/> will be treated as an explicit path.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Remove(LibGit2Sharp.IRepository,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes a collection of fileS from the staging, and optionally removes them from the working directory as well.
            <para>
              If a file has already been deleted from the working directory, this method will only deal
              with promoting the removal to the staging area.
            </para>
            <para>
              The default behavior is to remove the files from the working directory as well.
            </para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.IRepository"/> being worked with.</param>
            <param name="paths">The collection of paths of the files within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Remove(LibGit2Sharp.IRepository,System.Collections.Generic.IEnumerable{System.String},System.Boolean,LibGit2Sharp.ExplicitPathsOptions)">
            <summary>
            Removes a collection of fileS from the staging, and optionally removes them from the working directory as well.
            <para>
              If a file has already been deleted from the working directory, this method will only deal
              with promoting the removal to the staging area.
            </para>
            <para>
              The default behavior is to remove the files from the working directory as well.
            </para>
            <para>
              When not passing a <paramref name="explicitPathsOptions"/>, the passed paths will be treated as
              a pathspec. You can for example use it to pass the relative paths to folders inside the working directory,
              so that all files beneath these folders, and the folders themselves, will be removed.
            </para>
            </summary>
            <param name="repository">The repository in which to operate</param>
            <param name="paths">The collection of paths of the files within the working directory.</param>
            <param name="removeFromWorkingDirectory">True to remove the files from the working directory, False otherwise.</param>
            <param name="explicitPathsOptions">
            The passed <paramref name="paths"/> will be treated as explicit paths.
            Use these options to determine how unmatched explicit paths should be handled.
            </param>
        </member>
        <member name="M:LibGit2Sharp.Commands.Checkout(LibGit2Sharp.IRepository,System.String)">
            <summary>
            Checkout the specified <see cref="T:LibGit2Sharp.Branch"/>, reference or SHA.
            <para>
              If the committishOrBranchSpec parameter resolves to a branch name, then the checked out HEAD will
              will point to the branch. Otherwise, the HEAD will be detached, pointing at the commit sha.
            </para>
            </summary>
            <param name="repository">The repository to act on</param>
            <param name="committishOrBranchSpec">A revparse spec for the commit or branch to checkout.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.Commands.Checkout(LibGit2Sharp.IRepository,System.String,LibGit2Sharp.CheckoutOptions)">
            <summary>
            Checkout the specified <see cref="T:LibGit2Sharp.Branch"/>, reference or SHA.
            <para>
              If the committishOrBranchSpec parameter resolves to a branch name, then the checked out HEAD will
              will point to the branch. Otherwise, the HEAD will be detached, pointing at the commit sha.
            </para>
            </summary>
            <param name="repository">The repository to act on</param>
            <param name="committishOrBranchSpec">A revparse spec for the commit or branch to checkout.</param>
            <param name="options"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.Commands.Checkout(LibGit2Sharp.IRepository,LibGit2Sharp.Branch)">
            <summary>
            Checkout the tip commit of the specified <see cref="T:LibGit2Sharp.Branch"/> object. If this commit is the
            current tip of the branch, will checkout the named branch. Otherwise, will checkout the tip commit
            as a detached HEAD.
            </summary>
            <param name="repository">The repository to act on</param>
            <param name="branch">The <see cref="T:LibGit2Sharp.Branch"/> to check out.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.Commands.Checkout(LibGit2Sharp.IRepository,LibGit2Sharp.Branch,LibGit2Sharp.CheckoutOptions)">
            <summary>
            Checkout the tip commit of the specified <see cref="T:LibGit2Sharp.Branch"/> object. If this commit is the
            current tip of the branch, will checkout the named branch. Otherwise, will checkout the tip commit
            as a detached HEAD.
            </summary>
            <param name="repository">The repository to act on</param>
            <param name="branch">The <see cref="T:LibGit2Sharp.Branch"/> to check out.</param>
            <param name="options"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.Commands.Checkout(LibGit2Sharp.IRepository,LibGit2Sharp.Commit)">
            <summary>
            Checkout the specified <see cref="T:LibGit2Sharp.Commit"/>.
            <para>
              Will detach the HEAD and make it point to this commit sha.
            </para>
            </summary>
            <param name="repository">The repository to act on</param>
            <param name="commit">The <see cref="T:LibGit2Sharp.Commit"/> to check out.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.Commands.Checkout(LibGit2Sharp.IRepository,LibGit2Sharp.Commit,LibGit2Sharp.CheckoutOptions)">
            <summary>
            Checkout the specified <see cref="T:LibGit2Sharp.Commit"/>.
            <para>
              Will detach the HEAD and make it point to this commit sha.
            </para>
            </summary>
            <param name="repository">The repository to act on</param>
            <param name="commit">The <see cref="T:LibGit2Sharp.Commit"/> to check out.</param>
            <param name="options"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.Commands.Checkout(LibGit2Sharp.IRepository,LibGit2Sharp.Tree,LibGit2Sharp.CheckoutOptions,System.String)">
            <summary>
            Internal implementation of Checkout that expects the ID of the checkout target
            to already be in the form of a canonical branch name or a commit ID.
            </summary>
            <param name="repository">The repository to act on</param>
            <param name="tree">The <see cref="T:LibGit2Sharp.Tree"/> to checkout.</param>
            <param name="checkoutOptions"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <param name="refLogHeadSpec">The spec which will be written as target in the reflog.</param>
        </member>
        <member name="T:LibGit2Sharp.SignatureInfo">
            <summary>
            Structure for holding a signature extracted from a commit or a tag
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SignatureInfo.Signature">
            <summary>
            The signature data, PGP/GPG or otherwise.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.SignatureInfo.SignedData">
            <summary>
            The data which was signed. The object contents without the signature part.
            </summary>
        </member>
    </members>
</doc>
